/*!
 * speedy-vision.js v0.5.0-wip
 * GPU-accelerated Computer Vision for JavaScript
 * https://github.com/alemart/speedy-vision-js
 * 
 * Copyright 2020-2021 Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * @license Apache-2.0
 * 
 * Date: 2021-02-05T18:06:59.053Z
 */
var Speedy=function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=18)}([function(e,t,i){"use strict";i.d(t,"h",(function(){return r})),i.d(t,"e",(function(){return s})),i.d(t,"a",(function(){return o})),i.d(t,"f",(function(){return a})),i.d(t,"g",(function(){return c})),i.d(t,"d",(function(){return l})),i.d(t,"j",(function(){return d})),i.d(t,"i",(function(){return f})),i.d(t,"c",(function(){return h})),i.d(t,"b",(function(){return p}));class n extends Error{constructor(e,t=null){super([e,t?t.toString():"[speedy-vision.js]"].join("\n-> ")),this._cause=t}get name(){return this.constructor.name}set name(e){}get cause(){return this._cause}}class r extends n{constructor(e="",t=null){super("Unsupported operation. "+e,t)}}class s extends n{constructor(e="",t=null){super("WebGL error. "+e,t)}}class o extends n{constructor(e="",t=null){super("Can't call abstract method. "+e,t)}}class a extends n{constructor(e="",t=null){super("Illegal argument. "+e,t)}}class c extends n{constructor(e="",t=null){super("Illegal operation. "+e,t)}}class l extends n{constructor(e="",t=null){super("File not found. "+e,t)}}class d extends n{constructor(e="",t=null){super("Timeout error. "+e,t)}}class f extends n{constructor(e="",t=null){super("Parse error. "+e,t)}}class h extends n{constructor(e="",t=null){super("Assertion failed. "+e,t)}}class p extends n{constructor(e="",t=null){super("Access denied. "+e,t)}}},function(e,t,i){"use strict";i.d(t,"a",(function(){return s}));var n=i(0),r=i(6);class s{static warning(e,...t){const i=[e,...t].join(" ");return console.warn("[speedy-vision.js]",i),i}static log(e,...t){return[e,...t].join(" ")}static assert(e,t=""){if(!e)throw new n.c(t)}static enum(...e){return Object.freeze(e.reduce((e,t)=>(e[t]=Symbol(t),e),{}))}static setZeroTimeout(e){const t=s._setZeroTimeoutContext=s._setZeroTimeoutContext||(s._setZeroTimeoutContext={callbacks:new Map,_setup:window.addEventListener("message",e=>{if(e.source===window){const t=s._setZeroTimeoutContext,i=e.data,n=t.callbacks.get(i);void 0!==n&&(e.stopPropagation(),n.call(window),t.callbacks.delete(i))}},!0)}),i="0%"+Math.random();t.callbacks.set(i,e),window.postMessage(i,"*")}static functionArguments(e){const t=e.toString(),i=t.startsWith("function")?"function\\s.*\\(([^)]*)\\)":t.startsWith("(")?"\\(([^)]*)\\).*=>":"([^=]+).*=>",r=new RegExp(i).exec(t);if(null!==r){return r[1].replace(/\/\*.*?\*\//g,"").split(",").map(e=>e.replace(/=.*$/,"").trim()).filter(e=>e)}throw new n.i("Can't detect function arguments of "+t)}static getAllPropertyDescriptors(e){if(e){const t=Object.getPrototypeOf(e);return{...s.getAllPropertyDescriptors(t),...Object.getOwnPropertyDescriptors(e)}}return Object.create(null)}static isLittleEndian(){if(void 0!==s._isLittleEndian)return s._isLittleEndian;const e=new ArrayBuffer(2),t=new Uint8Array(e),i=new Uint16Array(e);return t[1]=202,t[0]=254,s._isLittleEndian=51966==i[0]}static createCanvas(e,t){const i=document.createElement("canvas");return i.width=e,i.height=t,i}static gaussianNoise(e=0,t=1){const i=2*Math.PI;let n,r=Math.random();do{n=Math.random()}while(n<=Number.EPSILON);return Math.sqrt(-2*Math.log(n))*Math.sin(i*r)*t+e}static gaussianKernel(e,t=-1,i=!0){if(t<0&&(t=0|Math.ceil(5*e),t+=1-t%2),(t|=0)<1||t%2==0)throw new n.f(`Invalid kernel size given to gaussianKernel: ${t} x 1`);if(e<=0)throw new n.f("Invalid sigma given to gaussianKernel: "+e);const r=new Array(t),s=t>>1,o=1.4142135623730951*+e,a=.3275911,c=.254829592,l=-.284496736,d=1.421413741,f=-1.453152027,h=1.061405429;let p=0;for(let e=0;e<t;e++){let t=(e-s+.5)/o,i=(e-s-.5)/o,n=1,u=1;t<0&&(n=-1,t=-t),i<0&&(u=-1,i=-i);const m=1/(1+a*t),_=1/(1+a*i),x=((((h*_+f)*_+d)*_+l)*_+c)*_,v=(n*(1-((((h*m+f)*m+d)*m+l)*m+c)*m*Math.exp(-t*t))-u*(1-x*Math.exp(-i*i)))/(2*o);r[e]=v,p+=v}return i?r.map(e=>e/p):r}static cartesian(e,t){return[].concat(...e.map(e=>t.map(t=>[e,t])))}static symmetricRange(e){if((e|=0)<0)throw new n.f("Expected a non-negative integer as input");return[...Array(2*e+1).keys()].map(t=>t-e)}static range(e){if((e|=0)<=0)throw new n.f("Expected a positive integer as input");return[...Array(e).keys()]}static requestCameraStream(e,t,i={}){if(s.log("Accessing the webcam..."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new n.h("Unsupported browser: no mediaDevices.getUserMedia()");return new r.a((r,o)=>{navigator.mediaDevices.getUserMedia({audio:!1,video:{width:{ideal:e},height:{ideal:t},aspectRatio:e/t,facingMode:"environment",frameRate:30},...i}).then(e=>{const t=document.createElement("video");t.onloadedmetadata=()=>{t.play(),s.log("The camera device is turned on!"),r(t)},t.srcObject=e}).catch(e=>{o(new n.b("Please give access to the camera and reload the page",e))})})}}},function(e,t,i){"use strict";i.d(t,"b",(function(){return v})),i.d(t,"a",(function(){return g}));var n=i(4),r=i(1),s=i(5),o=i(0);const a=[/\/\*(.|\s)*?\*\//g,/\/\/.*$/gm],c=/^\s*@\s*include\s+"(.*?)"/gm,l=/@(\w+)@/g,d=[/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*\=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+\+()\s*\)\s*\{\s*([\s\S]+?)\s*\}/g,/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*\=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+=\s*(-?\d+)\s*\)\s*\{\s*([\s\S]+?)\s*\}/g],f=Object.freeze({MAX_TEXTURE_LENGTH:n.h,PYRAMID_MAX_LEVELS:n.j,LOG2_PYRAMID_MAX_SCALE:n.f,PYRAMID_MAX_OCTAVES:n.k,PIXELCOMPONENT_RED:s.d.RED,PIXELCOMPONENT_GREEN:s.d.GREEN,PIXELCOMPONENT_BLUE:s.d.BLUE,PIXELCOMPONENT_ALPHA:s.d.ALPHA,FIX_BITS:n.a,FIX_RESOLUTION:n.b,MAX_DESCRIPTOR_SIZE:n.g,MIN_KEYPOINT_SIZE:n.i,KPF_NONE:n.d,KPF_ORIENTED:n.e,KPF_DISCARD:n.c});class h{static run(e,t=new Map){return function(e,t){const i=p.bind(t),n=d.length;for(let t=0;t<n;t++)e=e.replace(d[t],i);return e}(String(e).replace(a[0],"").replace(a[1],"").replace(c,(e,n)=>h.run(function(e){if(String(e).match(/^[a-zA-Z0-9_\-]+\.glsl$/))return i(20)("./"+e);throw new o.d(`Shader preprocessor: can't read file "${e}"`)}(n),t)).replace(l,(e,t)=>String(void 0!==f[t]?f[t]:"UNDEFINED_CONSTANT")),t)}}function p(e,t,i,n,s,a,c,l){const d=this;if(n=Number.isFinite(+n)?n:d.get(n),a=Number.isFinite(+a)?a:d.get(a),void 0===n||void 0===a){if(d.size>0)throw new o.i(`Can't unroll loop: unknown limits (start=${n}, end=${a}). Code:\n\n${e}`);return e}n=parseInt(n),a=parseInt(a),c=0==c.length?1:parseInt(c),r.a.assert(n<=a&&c>0);let f=null!==l.match(/\bbreak\s*;/)?"switch(1) { default:\n":"{\n";f+=`${t} ${i};\n`,a+="<="==s?1:0;for(let e=n;e<a;e+=c)f+=`{\n${i} = ${e};\n${l}\n}\n`;return f+="}\n",f}const u=Object.freeze({position:"a_position",texCoord:"a_texCoord"}),m=`#version 300 es\nin vec2 ${u.position};\nin vec2 ${u.texCoord};\nout vec2 texCoord;\n\nvoid main() {\n    gl_Position = vec4(${u.position}, 0.0, 1.0);\n    texCoord = ${u.texCoord};\n}`,_='#version 300 es\nprecision highp int;\nprecision mediump float;\nprecision mediump sampler2D;\n\nout vec4 color;\nin vec2 texCoord;\nuniform vec2 texSize;\n\n@include "global.glsl"\n';class x{constructor(e){const t=e.filepath||null,n=t?i(21)("./"+t):e.source||"";if(0==n.length)throw new o.f("Can't import shader: empty code");this._userSource=n,this._vertexSource=h.run(m),this._fragmentSource=h.run(_+this._userSource),this._filepath=t||"<in-memory>",this._arguments=[],this._uniforms=this._autodetectUniforms(this._fragmentSource),this._defines=new Map}static create(e){return new x({source:e})}static import(e){if(!String(e).match(/^[a-zA-Z0-9_\-\/]+\.glsl$/))throw new o.d(`Can't import shader: "${e}"`);return new x({filepath:e})}withArguments(...e){if(this._arguments.length>0)throw new o.g("Redefinition of shader arguments");this._arguments=e.map(e=>String(e));for(const e of this._arguments)if(!this._uniforms.has(e)&&!this._uniforms.has(e+"[0]"))throw new o.f(`Argument "${e}" has not been declared in the shader`);return this}withDefines(e){if(this._defines.size>0)throw new o.g("Redefinition of externally defined constants of a shader");const t=[];for(const i of Object.keys(e)){const n=Number(e[i]);this._defines.set(i,n),t.push(`#define ${i} ${n}\n`)}const i=_+t.join("")+this._userSource;return this._fragmentSource=h.run(i,this._defines),this}get fragmentSource(){return this._fragmentSource}get vertexSource(){return this._vertexSource}get attributes(){return u}get arguments(){return this._arguments}get uniforms(){return Array.from(this._uniforms.keys())}uniformType(e){if(!this._uniforms.has(e))throw new o.f(`Unrecognized uniform variable: "${e}"`);return this._uniforms.get(e)}definedConstant(e){if(!this._defines.has(e))throw new o.f(`Unrecognized externally defined constant: "${e}"`);return this._defines.get(e)}_autodetectUniforms(e){const t=e,i=/^\s*uniform\s+(highp\s+|mediump\s+|lowp\s+)?(\w+)\s+([^;]+)/gm,n=new Map;let r;for(;null!==(r=i.exec(t));){const e=r[2],t=r[3].split(",").map(e=>e.trim()).filter(e=>e);for(const i of t)if(i.endsWith("]")){if(!(r=i.match(/(\w+)\s*\[\s*(\d+)\s*\]$/)))throw new o.i(`Unspecified array length for uniform "${i}" in the shader`);const[t,s]=[r[1],Number(r[2])];if(0==s)throw new o.i(`Array ${t} has size zero`);for(let i=0;i<s;i++)n.set(`${t}[${i}]`,e)}else n.set(i,e)}return n}}function v(e){return x.import(e)}function g(e){return x.create(e)}},function(e,t,i){"use strict";i.r(t),i.d(t,"conv2D",(function(){return o})),i.d(t,"convX",(function(){return a})),i.d(t,"convY",(function(){return c})),i.d(t,"createKernel2D",(function(){return d})),i.d(t,"createKernel1D",(function(){return f})),i.d(t,"texConv2D",(function(){return h})),i.d(t,"texConvX",(function(){return p})),i.d(t,"texConvY",(function(){return u}));var n=i(2),r=i(1),s=i(0);function o(e,t=1){const i=new Float32Array(e.map(e=>+e*+t)),o=0|Math.sqrt(i.length),a=o>>1;if(o<1||o%2==0)throw new s.f("Can't perform a 2D convolution with an invalid kSize of "+o);if(o*o!=i.length)throw new s.f(`Invalid 2D convolution kernel of ${i.length} elements (expected: square)`);const c=a<=7?"pixelAtShortOffset":"pixelAtLongOffset",l=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n\n        ${d=(e,t,i)=>`\n        result += ${c}(image, ivec2(${0|i}, ${0|t})) * float(${+e});\n    `,r.a.cartesian(r.a.symmetricRange(a),r.a.symmetricRange(a)).map(e=>d(i[(e[0]+a)*o+(e[1]+a)],e[0],e[1])).join("\n")}\n\n        color = vec4(result.rgb, alpha);\n    }\n    `;var d;return Object(n.a)(l).withArguments("image")}function a(e,t=1){return l("x",e,t)}function c(e,t=1){return l("y",e,t)}function l(e,t,i=1){const o=new Float32Array(t.map(e=>+e*+i)),a=o.length,c=a>>1;if(a<1||a%2==0)throw new s.f("Can't perform a 1D convolution with an invalid kSize of "+a);if("x"!=e&&"y"!=e)throw new s.f(`Can't perform 1D convolution: invalid axis "${e}"`);const l=c<=7?"pixelAtShortOffset":"pixelAtLongOffset",d=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 pixel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n\n        ${f=(t,i)=>"x"==e?`\n        pixel += ${l}(image, ivec2(${0|i}, 0)) * float(${+t});\n    `:`\n        pixel += ${l}(image, ivec2(0, ${0|i})) * float(${+t});\n    `,r.a.symmetricRange(c).reduce((e,t)=>e+f(o[t+c],t),"")}\n\n        color = vec4(pixel.rgb, alpha);\n    }\n    `;var f;return Object(n.a)(d).withArguments("image")}function d(e){if((e|=0)<1||e%2==0)throw new s.f("Can't create a 2D texture kernel of size "+e);const t=`\n    uniform float kernel[${e*e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[(${e}) * thread.y + thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(e1) / 256.0f, floor(e2) / 256.0f, floor(e3) / 256.0f);\n    }\n    `;return Object(n.a)(t).withArguments("kernel")}function f(e){if((e|=0)<1||e%2==0)throw new s.f("Can't create a 1D texture kernel of size "+e);const t=`\n    uniform float kernel[${e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(e1) / 256.0f, floor(e2) / 256.0f, floor(e3) / 256.0f);\n    }\n    `;return Object(n.a)(t).withArguments("kernel")}function h(e){const t=e>>1;if(e<1||e%2==0)throw new s.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);const i=t<=7?"pixelAtShortOffset":"pixelAtLongOffset",o=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${a=(e,n)=>`\n        kernel = pixelAt(texKernel, ivec2(${e+t}, ${n+t}));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${i}(image, ivec2(${e}, ${n})) * value;\n    `,r.a.cartesian(r.a.symmetricRange(t),r.a.symmetricRange(t)).map(e=>a(e[0],e[1])).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var a;return Object(n.a)(o).withArguments("image","texKernel","scale","offset")}const p=e=>m(e,"x"),u=e=>m(e,"y");function m(e,t){const i=e>>1;if(e<1||e%2==0)throw new s.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);if("x"!=t&&"y"!=t)throw new s.f(`Can't perform a texture-based 1D convolution: invalid axis "${t}"`);const o=i<=7?"pixelAtShortOffset":"pixelAtLongOffset",a=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${c=e=>"x"==t?`\n        kernel = pixelAt(texKernel, ivec2(${e+i}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(${e}, 0)) * value;\n    `:`\n        kernel = pixelAt(texKernel, ivec2(${e+i}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(0, ${e})) * value;\n    `,r.a.symmetricRange(i).map(c).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var c;return Object(n.a)(a).withArguments("image","texKernel","scale","offset")}},function(e,t,i){"use strict";i.d(t,"j",(function(){return n})),i.d(t,"k",(function(){return r})),i.d(t,"f",(function(){return s})),i.d(t,"a",(function(){return o})),i.d(t,"b",(function(){return a})),i.d(t,"h",(function(){return c})),i.d(t,"g",(function(){return l})),i.d(t,"i",(function(){return d})),i.d(t,"d",(function(){return f})),i.d(t,"e",(function(){return h})),i.d(t,"c",(function(){return p}));const n=7,r=2*n-1,s=Math.log2(2),o=3,a=1*(1<<o),c=(1<<16-o)-2,l=64,d=8,f=0,h=1,p=128},function(e,t,i){"use strict";i.d(t,"c",(function(){return r})),i.d(t,"b",(function(){return s})),i.d(t,"d",(function(){return o})),i.d(t,"a",(function(){return a}));var n=i(1);const r=n.a.enum("Image","Video","Canvas","Bitmap"),s=n.a.enum("RGB","Greyscale","Binary"),o=Object.freeze({RED:1,GREEN:2,BLUE:4,ALPHA:8,ALL:15}),a=Object.freeze({[o.RED]:0,[o.GREEN]:1,[o.BLUE]:2,[o.ALPHA]:3})},function(e,t,i){"use strict";(function(e){i.d(t,"a",(function(){return r}));const n="undefined"!=typeof queueMicrotask&&queueMicrotask||void 0!==e&&e.nextTick||(e=>Promise.resolve().then(e));class r{constructor(e,t=!1){this._state=0,this._value=void 0,this._onFulfillment=null,this._onRejection=null,this._children=0,this[0]=this,this._parent=void 0,this._flags=t?2:0,this._fulfill=this._fulfill.bind(this),this._reject=this._reject.bind(this),this._resolve=this._resolve.bind(this),this._broadcastIfAsync=this._broadcastIfAsync.bind(this),e(this._fulfill,this._reject)}then(e,t=null){const i=new r(this._nop);return i._onFulfillment="function"==typeof e&&e,i._onRejection="function"==typeof t&&t,i._parent=this,this[this._children++]=i,this._flags&=-2,this._notify(),i}catch(e){return this.then(null,e)}finally(e){const t=t=>(e(),t);return this.then(t,t)}turbocharge(){let e=this;for(this._flags|=1;void 0!==e._parent;)e=e._parent,e._flags|=1;return e._notify(),this}toString(){switch(this._state){case 0:return"SpeedyPromise { <pending> }";case 1:return`SpeedyPromise { <fulfilled> ${this._value} }`;case 2:return`SpeedyPromise { <rejected> ${this._value} }`;default:return""}}static resolve(e){const t=new r(this._snop);return"object"==typeof e&&null!==e&&"then"in e||"function"==typeof e&&"then"in e?t._resolve(e):(t._value=e,t._state=1),t}static reject(e){const t=new r(this._snop);return t._value=e,t._state=2,t}static all(e){return new r((t,i)=>{const n=[];for(const t of e)n.push(t);const s=n.length;if(0==s)return void t([]);let o=s;const a=new Array(s),c=e=>i=>{a[e]=i,0==--o&&t(a)};for(let e=0;e<s;e++){const t=n[e];t.__proto__===r.prototype||t.__proto__===Promise.prototype?t.then(c(e),i):r.resolve(t).then(c(e),i)}})}static race(e){return new r((t,i)=>{const n=[];for(const t of e)n.push(t);const s=n.length;for(let e=0;e<s;e++){const s=n[e];s.__proto__===r.prototype||s.__proto__===Promise.prototype?s.then(t,i):r.resolve(s).then(t,i)}})}_fulfill(e){this._setState(1,e)}_reject(e){this._setState(2,e)}_setState(e,t){0==this._state&&(this._state=e,this._value=t,this._notify())}_notify(){0!=this._state&&(1&this._flags?this._broadcast():2&this._flags||n(this._broadcastIfAsync))}_broadcastIfAsync(){1&this._flags||this._broadcast()}_broadcast(){const e=this._children,t=this._state;if(1===t)for(let t=0;t<e;t++){const e=this[t],i=e._onFulfillment;try{i?i!==e._nop&&(e._resolve(i(this._value)),e._onFulfillment=e._nop):e._fulfill(this._value)}catch(t){e._reject(t)}}else if(2===t)for(let t=0;t<e;t++){const e=this[t],i=e._onRejection;try{i?i!==e._nop&&(e._resolve(i(this._value)),e._onRejection=e._nop):e._reject(this._value)}catch(t){e._reject(t)}}}_resolve(e){if("object"!=typeof e&&"function"!=typeof e||null===e)this._fulfill(e);else{if(e===this)throw new TypeError;if(e.__proto__!==r.prototype&&e.__proto__!==Promise.prototype)try{const t=e.then;if("function"==typeof t){let i=this._resolve,n=this._reject;try{t.call(e,e=>{i(e),i=n=this._nop},e=>{n(e),i=n=this._nop})}catch(e){i!==this._nop&&n!==this._nop&&this._reject(e)}}else this._fulfill(e)}catch(e){this._reject(e)}else e.then(this._resolve,this._reject)}}_nop(){}static _snop(){}}}).call(this,i(19))},function(e,t){e.exports={MatrixMath:
//! No imports here
class{static nop(e,t,i){}static fill(e,t,i){const{rows:n,columns:r,stride:s,length:o}=e,{value:a}=e.custom;if(n*r!=o)for(let e=0;e<r;e++)t.fill(a,e*s,e*s+n);else t.fill(a,0,o)}static copy(e,t,i){const{rows:n,columns:r,stride:s,length:o}=e,[a]=e.strideOfInputs,[c]=i;if(o==e.lengthOfInputs[0]&&n*r==o)return void t.set(c,0,o);let l,d,f,h;for(f=h=d=0;d<r;d++,f+=s,h+=a)for(l=0;l<n;l++)t[f+l]=c[h+l]}static transpose(e,t,i){const{rows:n,columns:r,stride:s}=e,[o]=e.strideOfInputs,[a]=i;let c,l,d,f;for(d=c=0;c<n;c++,d+=o)for(f=l=0;l<r;l++,f+=s)t[f+c]=a[d+l]}static add(e,t,i){const{rows:n,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=i;let d,f,h,p,u;for(f=0;f<r;f++)for(h=f*s,p=f*o,u=f*a,d=0;d<n;d++)t[h+d]=c[p+d]+l[u+d]}static subtract(e,t,i){const{rows:n,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=i;let d,f,h,p,u;for(f=0;f<r;f++)for(h=f*s,p=f*o,u=f*a,d=0;d<n;d++)t[h+d]=c[p+d]-l[u+d]}static multiply(e,t,i){const{rows:n,columns:r,stride:s,length:o}=e,[a,c]=e.columnsOfInputs,[l,d]=e.strideOfInputs,[f,h]=i;if(n*r!=o)for(let e=0;e<r;e++)t.fill(0,e*s,e*s+n);else t.fill(0,0,o);let p,u,m,_,x,v,g;for(_=v=m=0;m<c;m++,_+=s,v+=d)for(x=u=0;u<a;u++,x+=l)for(g=h[v+u],p=0;p<n;p++)t[_+p]+=f[x+p]*g}static multiplylt(e,t,i){const{rows:n,columns:r,stride:s,length:o}=e,[a,c]=e.columnsOfInputs,[l,d]=e.rowsOfInputs,[f,h]=e.strideOfInputs,[p,u]=i;let m,_,x,v,g,y,S;for(y=g=x=0;x<c;x++,y+=s,g+=h)for(v=_=0;_<a;_++,v+=f)for(t[S=y+_]=0,m=0;m<d;m++)t[S]+=p[v+m]*u[g+m]}static multiplyrt(e,t,i){const{rows:n,columns:r,stride:s,length:o}=e,[a,c]=e.columnsOfInputs,[l,d]=e.rowsOfInputs,[f,h]=e.strideOfInputs,[p,u]=i;if(n*r!=o)for(let e=0;e<r;e++)t.fill(0,e*s,e*s+n);else t.fill(0,0,o);let m,_,x,v,g,y,S;for(g=y=_=0;_<a;_++,g+=f,y+=h)for(v=x=0;x<d;x++,v+=s)for(S=u[y+x],m=0;m<n;m++)t[v+m]+=p[g+m]*S}static multiplyvec(e,t,i){const[n]=e.rowsOfInputs,[r]=e.columnsOfInputs,[s]=e.strideOfInputs,[o,a]=i;let c,l,d,f;for(t.fill(0,0,n),d=l=0;l<r;l++,d+=s)for(f=a[l],c=0;c<n;c++)t[c]+=o[d+c]*f}static scale(e,t,i){const{rows:n,columns:r,stride:s}=e,{scalar:o}=e.custom,[a]=i;let c,l,d;for(l=0;l<r;l++)for(d=l*s,c=0;c<n;c++)t[d+c]=a[d+c]*o}static compmult(e,t,i){const{rows:n,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=i;let d,f,h,p,u;for(f=0;f<r;f++)for(h=f*s,p=f*o,u=f*a,d=0;d<n;d++)t[h+d]=c[p+d]*l[u+d]}static outer(e,t,i){const{rows:n,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=i;let d,f,h,p;for(f=0;f<r;f++)for(h=l[f*a],p=f*s,d=0;d<n;d++)t[p+d]=c[d]*h}static qr(e,t,i){const{stride:n,type:r}=e,[s,o]=[e.rows,e.columns],[a,c]=e.rowsOfInputs,[l,d]=e.columnsOfInputs,[f]=e.strideOfInputs,[h,p]=i,{mode:u}=e.custom,m=Object.assign({},e,{custom:null}),_="full-qr"==u||"reduced-qr"==u;let x=[null,null,null];const v=this._createTypedArray(2*a*l+l,r),g=v.subarray(0,a*l),y=v.subarray(a*l,a*l+l),S=v.subarray(a*l+l,2*a*l+l),b=n,w=_?t.subarray(("reduced-qr"==u?l:a)*n):t.subarray(n);if(a<l)throw new Error(`Can't compute the QR decomposition of a ${a} x ${l} matrix`);if(s!=a)throw new Error(`Can't compute the QR decomposition of a ${a} x ${l} matrix: expected an output matrix of ${a} rows, but found a matrix of ${s} rows`);let O,A,E,T,I,M,L,R;for(h.length!=w.length?(x=this._submatrices(m,w,[h],b,[f],[0,a-1,0,l-1],[[0,a-1,0,l-1]]),this.copy(x[0],x[1],x[2])):w.set(h,0,h.length),E=0;E<l;E++){for(L=E*a+E,R=E*b+E,T=a-E,M=+(w[R]>=0)-+(w[R]<0),O=0;O<T;O++)g[L+O]=w[R+O];for(g[L]+=M*this._norm2(g,L,T),I=this._norm2(g,L,T),O=L+T-1;O>=L;O--)g[O]/=I;x=this._submatrices(m,y,[g,w],1,[a,b],[0,0,0,l-E-1],[[E,a-1,E,E],[E,a-1,E,l-1]]),this.multiplylt(x[0],x[1],x[2]),x=this._submatrices(m,S,[g,y],a,[a,1],[0,a-E-1,0,l-E-1],[[E,a-1,E,E],[0,0,0,l-E-1]]),this.outer(x[0],x[1],x[2]),x=this._submatrices(m,w,[w,S],b,[b,a],[E,a-1,E,l-1],[[E,a-1,E,l-1],[0,a-E-1,0,l-E-1]]),this._addInPlace(x[0],x[1],x[2],1,-2)}switch(u){case"full-qr":{const e=n,i=t.subarray(0,e*a).fill(0);let r,c,d;if(s!=a||o!=l+a)throw new Error(`Can't compute the full QR decomposition of a ${a} x ${l} matrix: expected an output matrix of size ${a} x ${l+a}, found ${s} x ${o}`);for(A=0;A<a;A++)for(c=A*e,i[c+A]=1,E=l-1;E>=0;E--)for(r=E*a,d=-2*this._dot(i,g,c+E,r+E,a-E),O=a-1;O>=E;O--)i[c+O]+=d*g[r+O];break}case"reduced-qr":{const e=n,i=t.subarray(0,e*l).fill(0);let r,c,d;if(s!=a||o!=l+l)throw new Error(`Can't compute the reduced QR decomposition of a ${a} x ${l} matrix: expected an output matrix of size ${a} x ${l+l}, found ${s} x ${o}`);for(A=0;A<l;A++)for(c=A*e,i[c+A]=1,E=l-1;E>=0;E--)for(r=E*a,d=-2*this._dot(i,g,c+E,r+E,a-E),O=a-1;O>=E;O--)i[c+O]+=d*g[r+O];break}case"Q'x":{const e=n,i=t.subarray(0,e),r=a,f=l;let h,u;if(r!=c||1!=d)throw new Error(`QR decomposition: the input vector is expected to be ${r} x 1, but is ${c} x ${d}`);if(r!=s||1+f!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${r} x ${1+f}, but is ${s} x ${o}`);for(O=0;O<r;O++)i[O]=p[O];for(E=0;E<f;E++)for(h=E*a,u=-2*this._dot(i,g,E,h+E,r-E),O=E;O<r;O++)i[O]+=u*g[h+O];break}case"Qx":{const e=n,i=t.subarray(0,e),r=a,f=l;let h,u;if(r!=c||1!=d)throw new Error(`QR decomposition: the input vector is expected to be ${r} x 1, but is ${c} x ${d}`);if(r!=s||1+f!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${r} x ${1+f}, but is ${s} x ${o}`);for(O=0;O<r;O++)i[O]=p[O];for(E=f-1;E>=0;E--)for(h=E*a,u=-2*this._dot(i,g,E,h+E,r-E),O=E;O<r;O++)i[O]+=u*g[h+O];break}case"reduced-Q'x":{const e=a,i=l,n=t.subarray(0,i),r=S.subarray(0,e);let f,h;if(e!=c||1!=d)throw new Error(`QR decomposition: the input vector is expected to be ${e} x 1, but is ${c} x ${d}`);if(e!=s||1+i!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${e} x ${1+i}, but is ${s} x ${o}`);for(A=0;A<i;A++){for(r.fill(0),r[A]=1,E=i-1;E>=0;E--)for(f=E*a,h=-2*this._dot(r,g,E,f+E,e-E),O=e-1;O>=E;O--)r[O]+=h*g[f+O];n[A]=this._dot(p,r,0,0,e)}break}default:throw new Error(`QR decomposition: unknown mode "${u}"`)}}static backsub(e,t,i){const{rows:n,columns:r}=e,[s]=i,[o]=e.rowsOfInputs,[a]=e.columnsOfInputs,[c]=e.strideOfInputs;if(a!==o+1)throw new Error(`Invalid input for backsub: expected ${o} x ${o+1} or ${a-1} x ${a} matrix, but found ${o} x ${a} matrix`);if(n!==o||1!==r)throw new Error(`Invalid output for backsub: expected ${o} x 1 matrix, but found ${n} x ${r} matrix`);const l=o,d=t,f=s.subarray(0,c),h=s.subarray(c);let p,u,m,_=(l-1)*c;for(d[l-1]=f[l-1]/h[_+(l-1)],u=l-2;u>=0;u--){for(d[u]=f[u],p=u+1;p<l;p++)d[u]-=d[p]*h[c*p+u];_-=c,m=h[_+u],d[u]/=m}}static lssolve(e,t,i){const{stride:n}=e,[r,s]=[e.rowsOfInputs[0],e.columnsOfInputs[0]],o=i[2]||this._createTypedArray(r*(s+1),e.type),a=Object.assign({},e);a.rows=r,a.columns=s+1,a.stride=r,a.custom={mode:"reduced-Q'x"},a.byteOffset=0,a.length=o.length,this.qr(a,o,[i[0],i[1]]);const c=this._submatrices(a,t,[o],n,[r],[0,s-1,0,0],[[0,s-1,0,s]]);this.backsub(c[0],c[1],c[2])}static _createTypedArray(e,t){return new(0,this.DataType[t])(e)}static _norm2(e,t=0,i=e.length){let n,r=0,s=t+i;for(n=t;n<s;n++)r+=e[n]*e[n];return Math.sqrt(r)}static _dot(e,t,i=0,n=0,r=e.length){let s,o=0;for(s=0;s<r;s++)o+=e[i+s]*t[n+s];return o}static _addInPlace(e,t,i,n,r){const{rows:s,columns:o,stride:a}=e,[c,l]=e.strideOfInputs,[d,f]=i;let h,p,u,m,_;for(m=_=u=p=0;p<o;p++,u+=a,m+=c,_+=l)for(h=0;h<s;h++)t[u+h]=n*d[m+h]+r*f[_+h]}static _submatrices(e,t,i,n,r,s,o){let a,c;for(e.rows=s[1]-s[0]+1,e.columns=s[3]-s[2]+1,e.stride=n,t=t.subarray(s[2]*n+s[0],s[3]*n+s[1]+1),e.length=t.length,e.byteOffset=t.byteOffset,a=i.length-1;a>=0;a--)c=o[a],e.rowsOfInputs[a]=c[1]-c[0]+1,e.columnsOfInputs[a]=c[3]-c[2]+1,e.strideOfInputs[a]=r[a],i[a]=i[a].subarray(c[2]*r[a]+c[0],c[3]*r[a]+c[1]+1),e.lengthOfInputs[a]=i[a].length,e.byteOffsetOfInputs[a]=i[a].byteOffset;return[e,t,i]}static get MatrixType(){return this._MatrixType||(this._MatrixType=Object.freeze({F32:0,F64:4,I32:8,U8:12}))}static get DataType(){return this._DataType||(this._DataType=Object.freeze({[this.MatrixType.F32]:Float32Array,[this.MatrixType.F64]:Float64Array,[this.MatrixType.I32]:Int32Array,[this.MatrixType.U8]:Uint8Array}))}static get DataTypeName(){return this._DataTypeName||(this._DataTypeName=Object.freeze({[this.MatrixType.F32]:"float32",[this.MatrixType.F64]:"float64",[this.MatrixType.I32]:"int32",[this.MatrixType.U8]:"uint8"}))}static get Opcode(){return this._Opcode||(this._Opcode=Object.freeze({NOP:0,FILL:2,COPY:3,TRANSPOSE:4,ADD:5,SUBTRACT:6,MULTIPLY:7,SCALE:8,COMPMULT:9,MULTIPLYLT:10,MULTIPLYRT:11,MULTIPLYVEC:12,OUTER:13,QR:16,BACKSUB:17,LSSOLVE:18}))}static get Opcode2fun(){return this._Opcode2fun||(this._Opcode2fun=Object.freeze({[this.Opcode.NOP]:this.nop,[this.Opcode.FILL]:this.fill,[this.Opcode.COPY]:this.copy,[this.Opcode.TRANSPOSE]:this.transpose,[this.Opcode.ADD]:this.add,[this.Opcode.SUBTRACT]:this.subtract,[this.Opcode.MULTIPLY]:this.multiply,[this.Opcode.SCALE]:this.scale,[this.Opcode.COMPMULT]:this.compmult,[this.Opcode.MULTIPLYLT]:this.multiplylt,[this.Opcode.MULTIPLYRT]:this.multiplyrt,[this.Opcode.MULTIPLYVEC]:this.multiplyvec,[this.Opcode.OUTER]:this.outer,[this.Opcode.QR]:this.qr,[this.Opcode.BACKSUB]:this.backsub,[this.Opcode.LSSOLVE]:this.lssolve}))}}}},function(e,t,i){"use strict";i.r(t),i.d(t,"median",(function(){return o}));var n=i(2),r=i(1),s=i(0);function o(e){if((e|=0)<=1||e%2==0)throw new s.f(`Can't create median filter with a ${e}x${e} window`);const t=e>>1,i=t<=7?"pixelAtShortOffset":"pixelAtLongOffset",o=e*e,a=o>>1,c=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float v[${o}], swpv;\n        int m;\n\n        // read pixels\n        ${l=(e,t,n)=>`\n        v[${e}] = ${i}(image, ivec2(${n}, ${t})).g;\n    `,r.a.cartesian(r.a.symmetricRange(t),r.a.symmetricRange(t)).map((e,t)=>l(t,e[0],e[1])).join("\n")}\n\n        // sort v[0..med]\n        ${(e=>r.a.range(a+1).map(e).join("\n"))(e=>`\n        m = ${e};\n        ${(e=>r.a.range(o-(e+1)).map(t=>t+e+1).map(e=>`\n        m += int(v[${e}] >= v[m]) * (${e} - m);\n    `).join("\n"))(e)}\n        swpv = v[${e}];\n        v[${e}] = v[m];\n        v[m] = swpv;\n    `)}\n\n        // return the median\n        color = vec4(v[${a}], v[${a}], v[${a}], 1.0f);\n    }\n    `;var l;return Object(n.a)(c).withArguments("image")}},function(e,t){e.exports="#ifndef _COLORS_GLSL\n#define _COLORS_GLSL\n#define PIXELCOMPONENT_RED   @PIXELCOMPONENT_RED@\n#define PIXELCOMPONENT_GREEN @PIXELCOMPONENT_GREEN@\n#define PIXELCOMPONENT_BLUE  @PIXELCOMPONENT_BLUE@\n#define PIXELCOMPONENT_ALPHA @PIXELCOMPONENT_ALPHA@\n#endif"},function(e,t){e.exports="#ifndef _FIXEDPOINT_GLSL\n#define _FIXEDPOINT_GLSL\n#define fixed_t int\n#define fixed2_t ivec2\nconst int FIX_BITS = int(@FIX_BITS@);\nconst float FIX_RESOLUTION = float(@FIX_RESOLUTION@);\n#define itofix(x) fixed_t((x) << FIX_BITS)\n#define fixtoi(f) int((x) >> FIX_BITS)\n#define ftofix(x) fixed_t((x) * FIX_RESOLUTION + 0.5f)\n#define fixtof(f) (float(f) / FIX_RESOLUTION)\n#define ivec2tofix(x) fixed2_t((x) << FIX_BITS)\n#define fixtoivec2(f) ivec2((f) >> FIX_BITS)\n#define vec2tofix(v) fixed2_t((v) * FIX_RESOLUTION + vec2(0.5f))\n#define fixtovec2(f) (vec2(f) / FIX_RESOLUTION)\n#endif"},function(e,t){e.exports="#ifndef _GLOBAL_GLSL\n#define _GLOBAL_GLSL\n#define threadLocation() ivec2(texCoord * texSize)\n#define outputSize() ivec2(texSize)\n#define DEBUG(scalar) do { color = vec4(float(scalar), 0.0f, 0.0f, 1.0f); return; } while(false)\n#define threadPixel(img) textureLod((img), texCoord, 0.0f)\n#define pixelAt(img, pos) texelFetch((img), (pos), 0)\n#define pixelAtShortOffset(img, offset) textureLodOffset((img), texCoord, 0.0f, (offset))\n#define pixelAtLongOffset(img, offset) textureLod((img), texCoord + vec2(offset) / texSize, 0.0f)\n#define subpixelAt(img, pos) textureLod((img), ((pos) + vec2(0.5f)) / texSize, 0.0f)\n#endif"},function(e,t){e.exports='#ifndef _KEYPOINTS_GLSL\n#define _KEYPOINTS_GLSL\n@include "pyramids.glsl"\n@include "orientation.glsl"\n@include "fixed-point.glsl"\nstruct Keypoint\n{\nvec2 position;\nfloat orientation;\nfloat lod;\nfloat score;\nint flags;\n};\nstruct KeypointAddress\n{\nint base;\nint offset;\n};\nconst int MAX_DESCRIPTOR_SIZE = int(@MAX_DESCRIPTOR_SIZE@);\nconst int MIN_KEYPOINT_SIZE = int(@MIN_KEYPOINT_SIZE@);\nconst int KPF_NONE = int(@KPF_NONE@);\nconst int KPF_ORIENTED = int(@KPF_ORIENTED@);\nconst int KPF_DISCARD = int(@KPF_DISCARD@);\n#define readKeypointData(encodedKeypoints, encoderLength, rasterIndex) texelFetch((encodedKeypoints), ivec2((rasterIndex) % (encoderLength), (rasterIndex) / (encoderLength)), 0)\n#define sizeofEncodedKeypoint(descriptorSize, extraSize) (MIN_KEYPOINT_SIZE + (descriptorSize) + (extraSize))\n#define findKeypointIndex(address, descriptorSize, extraSize) ((address).base / ((sizeofEncodedKeypoint((descriptorSize), (extraSize))) / 4))\nKeypointAddress findKeypointAddress(ivec2 thread, int encoderLength, int descriptorSize, int extraSize)\n{\nint threadRaster = thread.y * encoderLength + thread.x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nint keypointIndex = int(threadRaster / pixelsPerKeypoint);\nKeypointAddress address = KeypointAddress(\nkeypointIndex * pixelsPerKeypoint,\nthreadRaster % pixelsPerKeypoint\n);\nreturn address;\n}\nKeypoint decodeKeypoint(sampler2D encodedKeypoints, int encoderLength, KeypointAddress address)\n{\nconst vec4 ones = vec4(1.0f);\nKeypoint keypoint;\nint positionAddress = address.base;\nint propertiesAddress = address.base + 1;\nvec4 rawEncodedPosition = readKeypointData(encodedKeypoints, encoderLength, positionAddress);\nivec4 encodedPosition = ivec4(rawEncodedPosition * 255.0f);\nkeypoint.position = fixtovec2(fixed2_t(\nencodedPosition.r | (encodedPosition.g << 8),\nencodedPosition.b | (encodedPosition.a << 8)\n));\nvec4 encodedProperties = readKeypointData(encodedKeypoints, encoderLength, propertiesAddress);\nkeypoint.orientation = decodeOrientation(encodedProperties.g);\nkeypoint.lod = decodeLod(encodedProperties.r);\nkeypoint.score = encodedProperties.b;\nkeypoint.flags = int(encodedProperties.a * 255.0f);\nbool isNull = all(greaterThanEqual(rawEncodedPosition, ones));\nkeypoint.score = keypoint.score * float(!isNull) - float(isNull);\nkeypoint.score -= float(keypoint.score == 0.0f) * float(all(equal(keypoint.position, vec2(0.0f))));\nreturn keypoint;\n}\nvec4 encodeKeypointPosition(vec2 position)\n{\nconst vec2 zeros = vec2(0.0f);\nfixed2_t pos = vec2tofix(max(position, zeros));\nfixed2_t lo = pos & 255;\nfixed2_t hi = pos >> 8;\nreturn vec4(float(lo.x), float(hi.x), float(lo.y), float(hi.y)) / 255.0f;\n}\n#define encodeNullKeypoint() (vec4(1.0f))\n#define isBadKeypoint(keypoint) ((keypoint).score < 0.0f)\n#define encodeKeypointPositionAtInfinity() (vec4(254.0f / 255.0f, vec3(1.0f)))\nbool isKeypointAtInfinity(Keypoint keypoint)\n{\nconst vec2 V2_MAX_TEXTURE_LENGTH = vec2(float(@MAX_TEXTURE_LENGTH@));\nreturn any(greaterThan(keypoint.position, V2_MAX_TEXTURE_LENGTH));\n}\n#define encodeKeypointFlags(flags) (float(flags) / 255.0f)\n#endif'},function(e,t){e.exports="#ifndef _MATH_GLSL\n#define _MATH_GLSL\n#define TWO_PI          6.28318530718f\n#define PI              3.14159265359f\n#define PI_OVER_2       1.57079632679f\n#define PI_OVER_4       0.78539816339f\n#define INV_PI          0.3183098861837907f\n#define USE_FAST_ATAN\n#ifdef USE_FAST_ATAN\nfloat fastAtan(float x)\n{\nfloat w = 1.0f - abs(x);\nreturn (w >= 0.0f) ? ((PI_OVER_4 + 0.273 * w) * x) :\n(sign(x) * PI_OVER_2 - (PI_OVER_4 + 0.273 * (1.0f - abs(1.0f / x))) / x);\n}\n#else\n#define fastAtan(x) atan(x)\n#endif\n#ifdef USE_FAST_ATAN\nfloat fastAtan2(float y, float x)\n{\nreturn (x == 0.0f) ? PI_OVER_2 * sign(y) : fastAtan(y / x) + float(x < 0.0f) * PI * sign(y);\n}\n#else\n#define fastAtan2(y, x) atan((y), (x))\n#endif\n#endif"},function(e,t){e.exports='#ifndef _ORIENTATION_GLSL\n#define _ORIENTATION_GLSL\n@include "math.glsl"\n#define encodeOrientation(angle) ((angle) * INV_PI + 1.0f) * 0.5f\n#define decodeOrientation(value) ((value) * 2.0f - 1.0f) * PI\n#endif'},function(e,t){e.exports="#ifndef _PYRAMIDS_GLSL\n#define _PYRAMIDS_GLSL\n#define pyrPixel(pyr, lod) textureLod((pyr), texCoord, (lod))\n#define pyrPixelAtOffset(pyr, lod, pot, offset) textureLod((pyr), texCoord + ((pot) * vec2(offset)) / texSize, (lod))\n#define pyrPixelAt(pyr, pos, lod) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / texSize, (lod))\n#define pyrPixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), ((pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtExOffset(pyr, pos, lod, pot, offset, pyrBaseSize) textureLod((pyr), (((pos) + vec2(0.5f)) + ((pot) * vec2(offset))) / vec2(pyrBaseSize), (lod))\nconst int PYRAMID_MAX_OCTAVES = int(@PYRAMID_MAX_OCTAVES@);\nconst int PYRAMID_MAX_LEVELS = int(@PYRAMID_MAX_LEVELS@);\nconst float F_PYRAMID_MAX_LEVELS = float(@PYRAMID_MAX_LEVELS@);\nconst float LOG2_PYRAMID_MAX_SCALE = float(@LOG2_PYRAMID_MAX_SCALE@);\nfloat encodeLod(float lod)\n{\nreturn (LOG2_PYRAMID_MAX_SCALE + lod) / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS);\n}\nfloat decodeLod(float encodedLod)\n{\nfloat lod = encodedLod * (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS) - LOG2_PYRAMID_MAX_SCALE;\nreturn lod * float(encodedLod < 1.0f);\n}\n#define isSameEncodedLod(alpha1, alpha2) (abs((alpha1) - (alpha2)) < encodedLodEps)\nconst float encodedLodEps = 0.2f / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS);\n#endif"},function(e,t){e.exports="#ifndef _QUICKSELECT_GLSL\n#define _QUICKSELECT_GLSL\n#if defined(QUICKSELECT_UNSIGNED) && !defined(QUICKSELECT_SIGNED)\n#define QS_TYPE uint\n#define QS_TYPE4 uvec4\n#elif !defined(QUICKSELECT_UNSIGNED) && defined(QUICKSELECT_SIGNED)\n#define QS_TYPE int\n#define QS_TYPE4 ivec4\n#else\n#error Must define either QUICKSELECT_SIGNED or QUICKSELECT_UNSIGNED before including quickselect\n#endif\n#if defined(QUICKSELECT_ASCENDING) && !defined(QUICKSELECT_DESCENDING)\n#define QS_ORD(element,pivot) ((element) < (pivot))\n#elif defined(QUICKSELECT_DESCENDING) && !defined(QUICKSELECT_ASCENDING)\n#define QS_ORD(element,pivot) ((element) > (pivot))\n#else\n#error Must define either QUICKSELECT_ASCENDING or QUICKSELECT_DESCENDING before including quickselect\n#endif\n#ifdef QUICKSELECT_ARRAY\n#define QS_ARRAY QUICKSELECT_ARRAY\n#else\n#error Must define QUICKSELECT_ARRAY before including quickselect\n#endif\nint qspart(int l, int r, int p)\n{\n#define QS_SWAP(a,b) t = QS_ARRAY[(a)]; QS_ARRAY[(a)] = QS_ARRAY[(b)]; QS_ARRAY[(b)] = t\nhighp QS_TYPE e, t, mask, pivot = QS_ARRAY[p];\nhighp QS_TYPE4 tmp;\nint q, cond;\nQS_SWAP(p, r);\nq = l;\nfor(int i = l; i < r; i++) {\ne = QS_ARRAY[i];\nt = QS_ARRAY[q];\ncond = int(QS_ORD(e, pivot));\nmask = QS_TYPE(-cond);\ntmp = QS_TYPE4(mask & t, (~mask) & e, mask & e, (~mask) & t);\nQS_ARRAY[i] = tmp.x | tmp.y;\nQS_ARRAY[q] = tmp.z | tmp.w;\nq += cond;\n}\nQS_SWAP(q, r);\nreturn q;\n}\nhighp QS_TYPE quickselect(int l, int r, int k)\n{\nint p = -1337;\nivec2 idx = ivec2(l, r);\nwhile(idx.s < idx.t && p != k) {\np = qspart(idx.s, idx.t, (idx.s + idx.t) / 2);\nidx = int(k < p) * ivec2(idx.s, p-1) + int(k >= p) * ivec2(p+1, idx.t);\n}\nreturn (p == k) ? QS_ARRAY[k] : QS_ARRAY[idx.s];\n}\n#endif"},function(e,t){e.exports="#ifndef _SOBEL_GLSL\n#define _SOBEL_GLSL\nvec4 encodeSobel(vec2 df)\n{\n#ifdef SOBEL_USE_LOG\nconst vec2 zero = vec2(0.0f);\nvec2 dmax = -max(df, zero);\nvec2 dmin = min(df, zero);\nreturn exp2(vec4(dmax, dmin));\n#else\nuint data = packHalf2x16(df);\nuvec4 bytes = uvec4(data, data >> 8, data >> 16, data >> 24) & 255u;\nreturn vec4(bytes) / 255.0f;\n#endif\n}\nvec2 decodeSobel(vec4 encodedSobel)\n{\n#ifdef SOBEL_USE_LOG\nvec4 lg = log2(encodedSobel);\nreturn vec2(lg.b - lg.r, lg.a - lg.g);\n#else\nuvec4 bytes = uvec4(encodedSobel * 255.0f);\nuint data = bytes.r | (bytes.g << 8) | (bytes.b << 16) | (bytes.a << 24);\nreturn unpackHalf2x16(data);\n#endif\n}\n#endif"},function(e,t,i){e.exports=i(58).Speedy},function(e,t){var i,n,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(i===setTimeout)return setTimeout(e,0);if((i===s||!i)&&setTimeout)return i=setTimeout,setTimeout(e,0);try{return i(e,0)}catch(t){try{return i.call(null,e,0)}catch(t){return i.call(this,e,0)}}}!function(){try{i="function"==typeof setTimeout?setTimeout:s}catch(e){i=s}try{n="function"==typeof clearTimeout?clearTimeout:o}catch(e){n=o}}();var c,l=[],d=!1,f=-1;function h(){d&&c&&(d=!1,c.length?l=c.concat(l):f=-1,l.length&&p())}function p(){if(!d){var e=a(h);d=!0;for(var t=l.length;t;){for(c=l,l=[];++f<t;)c&&c[f].run();f=-1,t=l.length}c=null,d=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===o||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function u(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var i=1;i<arguments.length;i++)t[i-1]=arguments[i];l.push(new u(e,t)),1!==l.length||d||a(p)},u.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,i){var n={"./colors.glsl":9,"./fixed-point.glsl":10,"./global.glsl":11,"./keypoints.glsl":12,"./math.glsl":13,"./orientation.glsl":14,"./pyramids.glsl":15,"./quickselect.glsl":16,"./sobel.glsl":17};function r(e){var t=s(e);return i(t)}function s(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=s,e.exports=r,r.id=20},function(e,t,i){var n={"./colors/rgb2grey.glsl":22,"./encoders/encode-keypoint-long-offsets.glsl":23,"./encoders/encode-keypoint-offsets.glsl":24,"./encoders/encode-keypoints.glsl":25,"./encoders/resize-encoded-keypoints.glsl":26,"./encoders/upload-keypoints.glsl":27,"./enhancements/nightvision.glsl":28,"./enhancements/normalize-image.glsl":29,"./filters/convolution":3,"./filters/convolution.js":3,"./filters/fast-median.glsl":30,"./filters/median":8,"./filters/median.js":8,"./filters/multiscale-sobel.glsl":31,"./include/colors.glsl":9,"./include/fixed-point.glsl":10,"./include/global.glsl":11,"./include/keypoints.glsl":12,"./include/math.glsl":13,"./include/orientation.glsl":14,"./include/pyramids.glsl":15,"./include/quickselect.glsl":16,"./include/sobel.glsl":17,"./keypoints/brisk.glsl":32,"./keypoints/fast-score12.glsl":33,"./keypoints/fast-score16.glsl":34,"./keypoints/fast-score8.glsl":35,"./keypoints/fast5.glsl":36,"./keypoints/fast7.glsl":37,"./keypoints/fast9lg.glsl":38,"./keypoints/harris-cutoff.glsl":39,"./keypoints/multiscale-fast.glsl":40,"./keypoints/multiscale-harris.glsl":41,"./keypoints/multiscale-suppression.glsl":42,"./keypoints/nonmax-suppression.glsl":43,"./keypoints/orb-descriptor.glsl":44,"./keypoints/orientation-via-centroid.glsl":45,"./keypoints/samescale-suppression.glsl":46,"./keypoints/sort-by-score.glsl":47,"./pyramids/downsample2.glsl":48,"./pyramids/upsample2.glsl":49,"./trackers/lk-discard.glsl":50,"./trackers/lk.glsl":51,"./utils/copy-components.glsl":52,"./utils/fill-components.glsl":53,"./utils/fill.glsl":54,"./utils/flip-y.glsl":55,"./utils/identity.glsl":56,"./utils/scan-minmax2d.glsl":57};function r(e){var t=s(e);return i(t)}function s(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=s,e.exports=r,r.id=21},function(e,t){e.exports="const vec4 grey = vec4(0.299f, 0.587f, 0.114f, 0.0f);\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat g = dot(pixel, grey);\ncolor = vec4(g, g, g, 1.0f);\n}"},function(e,t){e.exports="uniform sampler2D offsetsImage;\nuniform ivec2 imageSize;\n#ifndef MAX_ITERATIONS\n#error Must define MAX_ITERATIONS\n#endif\n#define decodeSkipOffset(pixel) int((pixel).b * 255.0f) | (int((pixel).a * 255.0f) << 8)\n#define encodeSkipOffset(offset) vec2((offset) & 255, (offset) >> 8) / 255.0f\nvoid main()\n{\nvec4 pixel = threadPixel(offsetsImage);\nivec2 thread = threadLocation();\nvec2 prefix = pixel.rg;\nint rasterIndex = thread.y * imageSize.x + thread.x;\nint offset = decodeSkipOffset(pixel);\nint totalOffset = offset;\nivec2 pos = thread;\n#if 0\nwhile(offset < MAX_ITERATIONS && pos.y < imageSize.y && pixel.r == 0.0f) {\nrasterIndex += offset;\npos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = pixelAt(offsetsImage, pos);\noffset = decodeSkipOffset(pixel);\ntotalOffset += offset;\n}\n#else\nint allow = 1;\nfor(int i = 0; i < MAX_ITERATIONS; i++) {\nallow *= int(pos.y < imageSize.y) * int(pixel.r == 0.0f);\nrasterIndex += allow * offset;\npos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = pixelAt(offsetsImage, pos);\noffset = decodeSkipOffset(pixel);\ntotalOffset += allow * offset;\n}\n#endif\ntotalOffset = min(totalOffset, 65535);\ncolor = vec4(prefix, encodeSkipOffset(totalOffset));\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform ivec2 imageSize;\n#if !defined(MAX_ITERATIONS)\n#error Must define MAX_ITERATIONS\n#elif MAX_ITERATIONS > 255\n#error MAX_ITERATIONS must be less than 256\n#endif\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 pos = threadLocation();\nvec2 prefix = pixel.ra;\nint offset = 0;\n#if 0\nwhile(offset < MAX_ITERATIONS && pos.y < imageSize.y && pixelAt(image, pos).r == 0.0f) {\n++offset;\npos.x = (pos.x + 1) % imageSize.x;\npos.y += int(pos.x == 0);\n}\n#else\nint allow = 1;\nfor(int i = 0; i < MAX_ITERATIONS; i++) {\nallow *= int(pos.y < imageSize.y) * int(pixel.r == 0.0f);\noffset += allow;\npos.x = (pos.x + 1) % imageSize.x;\npos.y += int(pos.x == 0);\npixel = pixelAt(image, pos);\n}\n#endif\ncolor = vec4(prefix, float(offset) / 255.0f, 0.0f);\n}"},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D offsetsImage;\nuniform sampler2D encodedKeypoints;\nuniform ivec2 imageSize;\nuniform int passId;\nuniform int numPasses;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#define decodeSkipOffset(pixel) int((pixel).b * 255.0f) | (int((pixel).a * 255.0f) << 8)\nbool findQthKeypoint(int q, int p, inout ivec2 position, out vec4 pixel)\n{\nint notFirstPass = int(passId > 0);\nposition *= notFirstPass;\np |= -(1 - notFirstPass);\np -= notFirstPass;\nint rasterIndex = position.y * imageSize.x + position.x;\nwhile(position.y < imageSize.y && p != q) {\nposition = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = texelFetch(offsetsImage, position, 0);\np += int(pixel.r > 0.0f);\nrasterIndex += max(1, decodeSkipOffset(pixel));\n}\nreturn (p == q);\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = vec4(0.0f);\nif(address.offset > 1)\nreturn;\ncolor = threadPixel(encodedKeypoints);\nint numPixels = encoderLength * encoderLength;\nint maxKeypoints = numPixels / pixelsPerKeypoint;\nint maxKeypointsPerPass = maxKeypoints / numPasses + int(maxKeypoints % numPasses != 0);\nint targetPassId = q / maxKeypointsPerPass;\nif(passId != targetPassId)\nreturn;\n#if 1\nint lastIndexFromPrevPass = passId * maxKeypointsPerPass - 1;\nKeypointAddress lastAddressFromPrevPass = KeypointAddress(max(0, lastIndexFromPrevPass) * pixelsPerKeypoint, 0);\nKeypoint lastKeypointFromPrevPass = decodeKeypoint(encodedKeypoints, encoderLength, lastAddressFromPrevPass);\nivec2 position = ivec2(lastKeypointFromPrevPass.position);\n#else\nint lastIndexFromPrevPass = -1; ivec2 position = ivec2(0);\n#endif\nvec4 pixel;\ncolor = encodeNullKeypoint();\nif(q >= maxKeypoints || !findQthKeypoint(q, lastIndexFromPrevPass, position, pixel))\nreturn;\ncolor = (address.offset == 1) ? vec4(\npixel.g,\n0.0f,\npixel.r,\nencodeKeypointFlags(KPF_NONE)\n) : encodeKeypointPosition(\nvec2(position)\n);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D inputTexture;\nuniform int inputDescriptorSize;\nuniform int inputExtraSize;\nuniform int inputEncoderLength;\nuniform int outputDescriptorSize;\nuniform int outputExtraSize;\nuniform int outputEncoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(inputTexture);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(\nthread,\noutputEncoderLength,\noutputDescriptorSize,\noutputExtraSize\n);\nint myIndex = findKeypointIndex(\nmyAddress,\noutputDescriptorSize,\noutputExtraSize\n);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(inputDescriptorSize, inputExtraSize) / 4;\nKeypointAddress otherAddress = KeypointAddress(\nmyIndex * pixelsPerKeypoint,\nmyAddress.offset\n);\nint head = MIN_KEYPOINT_SIZE / 4;\nint rasterIndex = otherAddress.base + otherAddress.offset;\ncolor = (myAddress.offset >= head) ? vec4(0.0f) :\nreadKeypointData(inputTexture, inputEncoderLength, rasterIndex);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform int keypointCount;\nuniform int encoderLength;\nuniform int descriptorSize;\nuniform int extraSize;\n#ifndef KEYPOINT_BUFFER_LENGTH\n#error Must specify KEYPOINT_BUFFER_LENGTH\n#endif\nlayout(std140) uniform KeypointBuffer\n{\nvec4 keypointBuffer[KEYPOINT_BUFFER_LENGTH];\n};\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = vec4(1.0f);\nif(q >= keypointCount)\nreturn;\nvec4 data = keypointBuffer[q];\nswitch(address.offset) {\ncase 0: {\nfixed2_t pos = vec2tofix(data.xy);\nfixed2_t lo = pos & 255;\nfixed2_t hi = pos >> 8;\ncolor = vec4(float(lo.x), float(hi.x), float(lo.y), float(hi.y)) / 255.0f;\nbreak;\n}\ncase 1: {\nfloat score = data.w;\nfloat scale = encodeLod(data.z);\nfloat rotation = encodeOrientation(0.0f);\ncolor = vec4(scale, rotation, score, 0.0f);\nbreak;\n}\ndefault: {\ncolor = vec4(0.0f);\nbreak;\n}\n}\n}'},function(e,t){e.exports="uniform sampler2D image;\nuniform sampler2D illuminationMap;\nuniform float gain;\nuniform float offset;\nuniform float decay;\nconst mat3 rgb2yuv = mat3(\n0.299f, -0.14713f, 0.615f,\n0.587f, -0.28886f, -0.51499f,\n0.114f, 0.436f, -0.10001f\n);\nconst mat3 yuv2rgb = mat3(\n1.0f, 1.0f, 1.0f,\n0.0f, -0.39465f, 2.03211f,\n1.13983f, -0.58060f, 0.0f\n);\nconst float eps = 0.0001f;\nconst float sqrt2 = 1.4142135623730951f;\nconst float magic = 20.0f;\nconst vec2 center = vec2(0.5f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nvec4 imapPixel = threadPixel(illuminationMap);\nfloat lambda = -sqrt2 * log(max(1.0f - decay, eps));\nfloat dist = length(texCoord - center);\nfloat vgain = gain * exp(-lambda * dist);\nfloat normalizedGain = 2.0f * vgain;\nfloat normalizedOffset = 2.0f * offset - 1.0f;\n#ifdef GREYSCALE\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (pixel.g - imapPixel.g)));\nluma = clamp(luma + normalizedOffset, 0.0f, 1.0f);\ncolor = vec4(luma, luma, luma, 1.0f);\n#else\nvec3 yuvPixel = rgb2yuv * pixel.rgb;\nvec3 yuvImapPixel = rgb2yuv * imapPixel.rgb;\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (yuvPixel.r - yuvImapPixel.r)));\nluma += normalizedOffset;\nvec3 rgbCorrectedPixel = yuv2rgb * vec3(luma, yuvPixel.gb);\nrgbCorrectedPixel = clamp(rgbCorrectedPixel, 0.0f, 1.0f);\ncolor = vec4(rgbCorrectedPixel, 1.0f);\n#endif\n}"},function(e,t){e.exports="#ifdef GREYSCALE\nuniform sampler2D minmax2d;\n#else\nuniform sampler2D minmax2dRGB[3];\n#endif\nuniform float minValue;\nuniform float maxValue;\nconst float eps = 1.0f / 255.0f;\nvoid main()\n{\nvec2 minmax = clamp(vec2(minValue, maxValue), 0.0f, 255.0f) / 255.0f;\nvec4 newMin = vec4(minmax.x);\nvec4 newRange = vec4(minmax.y - minmax.x);\nvec4 alpha = vec4(1.0f, newMin.x, newRange.x, 1.0f);\n#ifdef GREYSCALE\nvec4 pixel = threadPixel(minmax2d);\nmat4 channel = mat4(pixel, pixel, pixel, alpha);\n#else\nmat4 channel = mat4(\nthreadPixel(minmax2dRGB[0]),\nthreadPixel(minmax2dRGB[1]),\nthreadPixel(minmax2dRGB[2]),\nalpha\n);\n#endif\nvec4 oldMin = vec4(channel[0].g, channel[1].g, channel[2].g, channel[3].g);\nvec4 oldRange = max(vec4(channel[0].b, channel[1].b, channel[2].b, channel[3].b), eps);\nvec4 oldIntensity = vec4(channel[0].a, channel[1].a, channel[2].a, channel[3].a);\nvec4 newIntensity = (oldIntensity - oldMin) * newRange / oldRange + newMin;\ncolor = newIntensity;\n}"},function(e,t){e.exports="uniform sampler2D image;\n#define SORT(i, j) t = p[i] + p[j]; p[i] = min(p[i], p[j]); p[j] = t - p[i];\nvoid main()\n{\nfloat median, t;\n#if WINDOW_SIZE == 3\nfloat p[9];\np[0] = pixelAtShortOffset(image, ivec2(-1,-1)).g;\np[1] = pixelAtShortOffset(image, ivec2(0,-1)).g;\np[2] = pixelAtShortOffset(image, ivec2(1,-1)).g;\np[3] = pixelAtShortOffset(image, ivec2(-1,0)).g;\np[4] = pixelAtShortOffset(image, ivec2(0,0)).g;\np[5] = pixelAtShortOffset(image, ivec2(1,0)).g;\np[6] = pixelAtShortOffset(image, ivec2(-1,1)).g;\np[7] = pixelAtShortOffset(image, ivec2(0,1)).g;\np[8] = pixelAtShortOffset(image, ivec2(1,1)).g;\nSORT(1,2);\nSORT(4,5);\nSORT(7,8);\nSORT(0,1);\nSORT(3,4);\nSORT(6,7);\nSORT(1,2);\nSORT(4,5);\nSORT(7,8);\nSORT(0,3);\nSORT(5,8);\nSORT(4,7);\nSORT(3,6);\nSORT(1,4);\nSORT(2,5);\nSORT(4,7);\nSORT(4,2);\nSORT(6,4);\nSORT(4,2);\nmedian = p[4];\n#elif WINDOW_SIZE == 5\nfloat p[25];\np[0] = pixelAtShortOffset(image, ivec2(-2,-2)).g;\np[1] = pixelAtShortOffset(image, ivec2(-1,-2)).g;\np[2] = pixelAtShortOffset(image, ivec2(0,-2)).g;\np[3] = pixelAtShortOffset(image, ivec2(1,-2)).g;\np[4] = pixelAtShortOffset(image, ivec2(2,-2)).g;\np[5] = pixelAtShortOffset(image, ivec2(-2,-1)).g;\np[6] = pixelAtShortOffset(image, ivec2(-1,-1)).g;\np[7] = pixelAtShortOffset(image, ivec2(0,-1)).g;\np[8] = pixelAtShortOffset(image, ivec2(1,-1)).g;\np[9] = pixelAtShortOffset(image, ivec2(2,-1)).g;\np[10] = pixelAtShortOffset(image, ivec2(-2,0)).g;\np[11] = pixelAtShortOffset(image, ivec2(-1,0)).g;\np[12] = pixelAtShortOffset(image, ivec2(0,0)).g;\np[13] = pixelAtShortOffset(image, ivec2(1,0)).g;\np[14] = pixelAtShortOffset(image, ivec2(2,0)).g;\np[15] = pixelAtShortOffset(image, ivec2(-2,1)).g;\np[16] = pixelAtShortOffset(image, ivec2(-1,1)).g;\np[17] = pixelAtShortOffset(image, ivec2(0,1)).g;\np[18] = pixelAtShortOffset(image, ivec2(1,1)).g;\np[19] = pixelAtShortOffset(image, ivec2(2,1)).g;\np[20] = pixelAtShortOffset(image, ivec2(-2,2)).g;\np[21] = pixelAtShortOffset(image, ivec2(-1,2)).g;\np[22] = pixelAtShortOffset(image, ivec2(0,2)).g;\np[23] = pixelAtShortOffset(image, ivec2(1,2)).g;\np[24] = pixelAtShortOffset(image, ivec2(2,2)).g;\nSORT(0,1);\nSORT(3,4);\nSORT(2,4);\nSORT(2,3);\nSORT(6,7);\nSORT(5,7);\nSORT(5,6);\nSORT(9,10);\nSORT(8,10);\nSORT(8,9);\nSORT(12,13);\nSORT(11,13);\nSORT(11,12);\nSORT(15,16);\nSORT(14,16);\nSORT(14,15);\nSORT(18,19);\nSORT(17,19);\nSORT(17,18);\nSORT(21,22);\nSORT(20,22);\nSORT(20,21);\nSORT(23,24);\nSORT(2,5);\nSORT(3,6);\nSORT(0,6);\nSORT(0,3);\nSORT(4,7);\nSORT(1,7);\nSORT(1,4);\nSORT(11,14);\nSORT(8,14);\nSORT(8,11);\nSORT(12,15);\nSORT(9,15);\nSORT(9,12);\nSORT(13,16);\nSORT(10,16);\nSORT(10,13);\nSORT(20,23);\nSORT(17,23);\nSORT(17,20);\nSORT(21,24);\nSORT(18,24);\nSORT(18,21);\nSORT(19,22);\nSORT(8,17);\nSORT(9,18);\nSORT(0,18);\nSORT(0,9);\nSORT(10,19);\nSORT(1,19);\nSORT(1,10);\nSORT(11,20);\nSORT(2,20);\nSORT(2,11);\nSORT(12,21);\nSORT(3,21);\nSORT(3,12);\nSORT(13,22);\nSORT(4,22);\nSORT(4,13);\nSORT(14,23);\nSORT(5,23);\nSORT(5,14);\nSORT(15,24);\nSORT(6,24);\nSORT(6,15);\nSORT(7,16);\nSORT(7,19);\nSORT(13,21);\nSORT(15,23);\nSORT(7,13);\nSORT(7,15);\nSORT(1,9);\nSORT(3,11);\nSORT(5,17);\nSORT(11,17);\nSORT(9,17);\nSORT(4,10);\nSORT(6,12);\nSORT(7,14);\nSORT(4,6);\nSORT(4,7);\nSORT(12,14);\nSORT(10,14);\nSORT(6,7);\nSORT(10,12);\nSORT(6,10);\nSORT(6,17);\nSORT(12,17);\nSORT(7,17);\nSORT(7,10);\nSORT(12,18);\nSORT(7,12);\nSORT(10,18);\nSORT(12,20);\nSORT(10,20);\nSORT(10,12);\nmedian = p[12];\n#else\n#error Unsupported window size\n#endif\ncolor = vec4(median, median, median, 1.0f);\n}"},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform float lod;\nconst mat3 horizontalKernel = mat3(\n-1.0f, 0.0f, 1.0f,\n-2.0f, 0.0f, 2.0f,\n-1.0f, 0.0f, 1.0f\n);\nconst mat3 verticalKernel = mat3(\n1.0f, 2.0f, 1.0f,\n0.0f, 0.0f, 0.0f,\n-1.0f,-2.0f,-1.0f\n);\nconst vec3 ones = vec3(1.0f, 1.0f, 1.0f);\nvoid main()\n{\nfloat pot = exp2(lod);\nmat3 neighbors = mat3(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 1)).g\n);\nmat3 sobelX = matrixCompMult(horizontalKernel, neighbors);\nmat3 sobelY = matrixCompMult(verticalKernel, neighbors);\nvec2 df = vec2(\ndot(sobelX[0] + sobelX[1] + sobelX[2], ones),\ndot(sobelY[0] + sobelY[1] + sobelY[2], ones)\n);\ncolor = encodeSobel(df);\n}'},function(e,t){e.exports="uniform sampler2D image, layerA, layerB;\nuniform float scaleA, scaleB, lgM, h;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat score = pixel.r;\nivec2 zero = ivec2(0, 0);\nivec2 sizeA = textureSize(layerA, 0);\nivec2 sizeB = textureSize(layerB, 0);\nvec2 mid = (texCoord * texSize) + vec2(0.5f, 0.5f);\nivec2 pa = clamp(ivec2(ceil(mid * scaleA - 1.0f)), zero, sizeA - 2);\nivec2 pb = clamp(ivec2(ceil(mid * scaleB - 1.0f)), zero, sizeB - 2);\nvec4 a00 = pixelAt(layerA, pa);\nvec4 a10 = pixelAt(layerA, pa + ivec2(1, 0));\nvec4 a01 = pixelAt(layerA, pa + ivec2(0, 1));\nvec4 a11 = pixelAt(layerA, pa + ivec2(1, 1));\nvec4 b00 = pixelAt(layerB, pb);\nvec4 b10 = pixelAt(layerB, pb + ivec2(1, 0));\nvec4 b01 = pixelAt(layerB, pb + ivec2(0, 1));\nvec4 b11 = pixelAt(layerB, pb + ivec2(1, 1));\nfloat maxScore = max(\nmax(max(a00.r, a10.r), max(a01.r, a11.r)),\nmax(max(b00.r, b10.r), max(b01.r, b11.r))\n);\ncolor = vec4(0.0f, pixel.gba);\nif(score < maxScore || score == 0.0f)\nreturn;\nvec2 ea = fract(mid * scaleA);\nvec2 eb = fract(mid * scaleB);\nfloat isa = a00.b * (1.0f - ea.x) * (1.0f - ea.y) +\na10.b * ea.x * (1.0f - ea.y) +\na01.b * (1.0f - ea.x) * ea.y +\na11.b * ea.x * ea.y;\nfloat isb = b00.b * (1.0f - eb.x) * (1.0f - eb.y) +\nb10.b * eb.x * (1.0f - eb.y) +\nb01.b * (1.0f - eb.x) * eb.y +\nb11.b * eb.x * eb.y;\ncolor = (isa > score && isa > isb) ? vec4(isa, pixel.gb, a00.a) : pixel;\ncolor = (isb > score && isb > isa) ? vec4(isb, pixel.gb, b00.a) : pixel;\nfloat y1 = isa, y2 = isb, y3 = score;\nfloat x1 = lgM - (lgM + h) * a00.a;\nfloat x2 = lgM - (lgM + h) * b00.a;\nfloat x3 = lgM - (lgM + h) * pixel.a;\nfloat dn = (x1 - x2) * (x1 - x3) * (x2 - x3);\nif(abs(dn) < 0.00001f)\nreturn;\nfloat a = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / dn;\nif(a >= 0.0f)\nreturn;\nfloat b = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / dn;\nfloat c = (x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / dn;\nfloat xv = -b / (2.0f * a);\nfloat yv = c - (b * b) / (4.0f * a);\nif(xv < min(x1, min(x2, x3)) || xv > max(x1, max(x2, x3)))\nreturn;\nfloat interpolatedScale = (lgM - xv) / (lgM + h);\nfloat interpolatedScore = clamp(yv, 0.0f, 1.0f);\ncolor = vec4(interpolatedScore, pixel.gb, interpolatedScale);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nscores += vec2(max(c_t - p8, 0.0f), max(p8 - ct, 0.0f));\nscores += vec2(max(c_t - p9, 0.0f), max(p9 - ct, 0.0f));\nscores += vec2(max(c_t - p10, 0.0f), max(p10 - ct, 0.0f));\nscores += vec2(max(c_t - p11, 0.0f), max(p11 - ct, 0.0f));\nfloat score = max(scores.x, scores.y) / 12.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nmat4 mp = mat4(\npixelAtShortOffset(image, ivec2(0, 3)).g,\npixelAtShortOffset(image, ivec2(1, 3)).g,\npixelAtShortOffset(image, ivec2(2, 2)).g,\npixelAtShortOffset(image, ivec2(3, 1)).g,\npixelAtShortOffset(image, ivec2(3, 0)).g,\npixelAtShortOffset(image, ivec2(3, -1)).g,\npixelAtShortOffset(image, ivec2(2, -2)).g,\npixelAtShortOffset(image, ivec2(1, -3)).g,\npixelAtShortOffset(image, ivec2(0, -3)).g,\npixelAtShortOffset(image, ivec2(-1, -3)).g,\npixelAtShortOffset(image, ivec2(-2, -2)).g,\npixelAtShortOffset(image, ivec2(-3, -1)).g,\npixelAtShortOffset(image, ivec2(-3, 0)).g,\npixelAtShortOffset(image, ivec2(-3, 1)).g,\npixelAtShortOffset(image, ivec2(-2, 2)).g,\npixelAtShortOffset(image, ivec2(-1, 3)).g\n);\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nfloat score = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nfloat score = max(scores.x, scores.y) / 8.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.gba);\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nbool possibleCorner =\n((c_t > p1 || c_t > p5) && (c_t > p3 || c_t > p7)) ||\n((ct < p1  || ct < p5)  && (ct < p3  || ct < p7))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 5 && dark < 5) {\nif(bc > 0 && bc < 5) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 5) bc += 1; else break;\nif(c_t > p2 && bc < 5) bc += 1; else break;\nif(c_t > p3 && bc < 5) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 5) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 5) dc += 1; else break;\nif(ct < p2 && dc < 5) dc += 1; else break;\nif(ct < p3 && dc < 5) dc += 1; else break;\n} while(false);\nif(bc >= 5 || dc >= 5)\ncolor = vec4(1.0f, pixel.gba);\n}\nelse {\ncolor = vec4(1.0f, pixel.gba);\n}\n}\n}\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.gba);\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nbool possibleCorner =\n((c_t > p0 || c_t > p6) && (c_t > p3 || c_t > p9)) ||\n((ct < p0  || ct < p6)  && (ct < p3  || ct < p9))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p8) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p8) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p9) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p9) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p10) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p10) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p11) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p11) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 7 && dark < 7) {\nif(bc > 0 && bc < 7) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 7) bc += 1; else break;\nif(c_t > p2 && bc < 7) bc += 1; else break;\nif(c_t > p3 && bc < 7) bc += 1; else break;\nif(c_t > p4 && bc < 7) bc += 1; else break;\nif(c_t > p5 && bc < 7) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 7) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 7) dc += 1; else break;\nif(ct < p2 && dc < 7) dc += 1; else break;\nif(ct < p3 && dc < 7) dc += 1; else break;\nif(ct < p4 && dc < 7) dc += 1; else break;\nif(ct < p5 && dc < 7) dc += 1; else break;\n} while(false);\nif(bc >= 7 || dc >= 7)\ncolor = vec4(1.0f, pixel.gba);\n}\nelse {\ncolor = vec4(1.0f, pixel.gba);\n}\n}\n}\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\ncolor = vec4(0.0f, pixel.gba);\nif(any(lessThan(ivec4(thread, size - thread), margin)))\nreturn;\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 3)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(3, 0)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(0, -3)).g;\nfloat p12 = pixelAtShortOffset(image, ivec2(-3, 0)).g;\nif(!(\n((c_t > p0 || c_t > p8) && (c_t > p4 || c_t > p12)) ||\n((ct < p0  || ct < p8)  && (ct < p4  || ct < p12))\n))\nreturn;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 3)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 2)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(3, 1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(3, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(2, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(1, -3)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-1, -3)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, -2)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-3, -1)).g;\nfloat p13 = pixelAtShortOffset(image, ivec2(-3, 1)).g;\nfloat p14 = pixelAtShortOffset(image, ivec2(-2, 2)).g;\nfloat p15 = pixelAtShortOffset(image, ivec2(-1, 3)).g;\nbool A=(p0>ct),B=(p1>ct),C=(p2>ct),D=(p3>ct),E=(p4>ct),F=(p5>ct),G=(p6>ct),H=(p7>ct),I=(p8>ct),J=(p9>ct),K=(p10>ct),L=(p11>ct),M=(p12>ct),N=(p13>ct),O=(p14>ct),P=(p15>ct),a=(p0<c_t),b=(p1<c_t),c=(p2<c_t),d=(p3<c_t),e=(p4<c_t),f=(p5<c_t),g=(p6<c_t),h=(p7<c_t),i=(p8<c_t),j=(p9<c_t),k=(p10<c_t),l=(p11<c_t),m=(p12<c_t),n=(p13<c_t),o=(p14<c_t),p=(p15<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\ncolor = vec4(float(isCorner), pixel.gba);\n}"},function(e,t){e.exports="uniform sampler2D corners;\nuniform sampler2D maxScore;\nuniform float quality;\nvoid main()\n{\nvec4 pixel = threadPixel(corners);\nfloat maxVal = threadPixel(maxScore).r;\nfloat score = pixel.r;\nfloat threshold = maxVal * clamp(quality, 0.0f, 1.0f);\nscore *= step(threshold, score);\ncolor = vec4(score, pixel.gba);\n}"},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform float threshold;\nuniform int numberOfOctaves;\nuniform float lodStep;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(pyramid);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nvec2 best = vec2(0.0f, pixel.a);\n#ifdef USE_HARRIS_SCORE\nvec2 dfmm[PYRAMID_MAX_OCTAVES], dfm0[PYRAMID_MAX_OCTAVES], dfm1[PYRAMID_MAX_OCTAVES],\ndf0m[PYRAMID_MAX_OCTAVES], df00[PYRAMID_MAX_OCTAVES], df01[PYRAMID_MAX_OCTAVES],\ndf1m[PYRAMID_MAX_OCTAVES], df10[PYRAMID_MAX_OCTAVES], df11[PYRAMID_MAX_OCTAVES];\nfloat pyrpix = 0.0f;\nfor(int l = 0; l < numberOfOctaves; l++) {\nfloat lod = float(l) * lodStep;\nfloat pot = exp2(lod);\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,-1)).g;\ndfmm[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,0)).g;\ndfm0[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,1)).g;\ndfm1[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,-1)).g;\ndf0m[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,0)).g;\ndf00[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,1)).g;\ndf01[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,-1)).g;\ndf1m[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,0)).g;\ndf10[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,1)).g;\ndf11[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\n}\n#endif\ncolor = vec4(0.0f, pixel.g, 0.0f, pixel.a);\nfloat lod = 0.0f, pot = 1.0f;\nfor(int octave = 0; octave < numberOfOctaves; octave++) {\npixel = pyrPixel(pyramid, lod);\nct = pixel.g + t;\nc_t = pixel.g - t;\nvec4 p4k = vec4(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 0)).g\n);\nmat4 mp = mat4(\np4k.x,\np4k.y,\np4k.z,\np4k.w,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 3)).g\n);\nbool A=(mp[0][0]>ct),B=(mp[1][0]>ct),C=(mp[2][0]>ct),D=(mp[3][0]>ct),E=(mp[0][1]>ct),F=(mp[1][1]>ct),G=(mp[2][1]>ct),H=(mp[3][1]>ct),I=(mp[0][2]>ct),J=(mp[1][2]>ct),K=(mp[2][2]>ct),L=(mp[3][2]>ct),M=(mp[0][3]>ct),N=(mp[1][3]>ct),O=(mp[2][3]>ct),P=(mp[3][3]>ct),a=(mp[0][0]<c_t),b=(mp[1][0]<c_t),c=(mp[2][0]<c_t),d=(mp[3][0]<c_t),e=(mp[0][1]<c_t),f=(mp[1][1]<c_t),g=(mp[2][1]<c_t),h=(mp[3][1]<c_t),i=(mp[0][2]<c_t),j=(mp[1][2]<c_t),k=(mp[2][2]<c_t),l=(mp[3][2]<c_t),m=(mp[0][3]<c_t),n=(mp[1][3]<c_t),o=(mp[2][3]<c_t),p=(mp[3][3]<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\nfloat score = 0.0f;\n#ifdef USE_HARRIS_SCORE\nvec2 df0 = dfmm[octave], df1 = dfm0[octave], df2 = dfm1[octave],\ndf3 = df0m[octave], df4 = df00[octave], df5 = df01[octave],\ndf6 = df1m[octave], df7 = df10[octave], df8 = df11[octave];\nvec3 hm = vec3(0.0f);\nhm += vec3(df0.x * df0.x, df0.x * df0.y, df0.y * df0.y);\nhm += vec3(df1.x * df1.x, df1.x * df1.y, df1.y * df1.y);\nhm += vec3(df2.x * df2.x, df2.x * df2.y, df2.y * df2.y);\nhm += vec3(df3.x * df3.x, df3.x * df3.y, df3.y * df3.y);\nhm += vec3(df4.x * df4.x, df4.x * df4.y, df4.y * df4.y);\nhm += vec3(df5.x * df5.x, df5.x * df5.y, df5.y * df5.y);\nhm += vec3(df6.x * df6.x, df6.x * df6.y, df6.y * df6.y);\nhm += vec3(df7.x * df7.x, df7.x * df7.y, df7.y * df7.y);\nhm += vec3(df8.x * df8.x, df8.x * df8.y, df8.y * df8.y);\nfloat response = 0.5f * (hm.x + hm.z - sqrt((hm.x - hm.z) * (hm.x - hm.z) + 4.0f * hm.y * hm.y));\nconst float WINDOW_AREA = 9.0f;\nconst float EIGENVALUE_NORMALIZER = 9.0f / WINDOW_AREA;\nscore = response * EIGENVALUE_NORMALIZER;\nscore = 1.0f - exp2(-score);\n#else\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nscore = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\n#endif\nscore *= float(isCorner);\nivec2 remainder = thread % int(pot);\nscore *= float(remainder.x + remainder.y == 0);\nfloat scale = encodeLod(lod);\nbest *= float(score <= best.x);\nbest += float(score > best.x) * vec2(score, scale);\nlod += lodStep;\npot = exp2(lod);\n}\ncolor.rba = best.xxy;\n}'},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform int windowSize;\nuniform int numberOfOctaves;\nuniform float lodStep;\nuniform sampler2D sobelDerivatives[@PYRAMID_MAX_OCTAVES@];\nvec4 pickSobelDerivatives(int index, ivec2 offset)\n{\n#define MAX_OCTAVES @PYRAMID_MAX_OCTAVES@\n#if MAX_OCTAVES < 7 || MAX_OCTAVES > 16 || MAX_OCTAVES % 2 == 0\n#error MAX_OCTAVES cannot be @PYRAMID_MAX_OCTAVES@\n#endif\nswitch(index) {\ncase 0:  return textureLod(sobelDerivatives[0], texCoord + vec2(offset) / texSize, 0.0f);\ncase 1:  return textureLod(sobelDerivatives[1], texCoord + vec2(offset) / texSize, 0.0f);\ncase 2:  return textureLod(sobelDerivatives[2], texCoord + vec2(offset) / texSize, 0.0f);\ncase 3:  return textureLod(sobelDerivatives[3], texCoord + vec2(offset) / texSize, 0.0f);\ncase 4:  return textureLod(sobelDerivatives[4], texCoord + vec2(offset) / texSize, 0.0f);\ncase 5:  return textureLod(sobelDerivatives[5], texCoord + vec2(offset) / texSize, 0.0f);\ncase 6:  return textureLod(sobelDerivatives[6], texCoord + vec2(offset) / texSize, 0.0f);\n#if MAX_OCTAVES > 15\ncase 15: return textureLod(sobelDerivatives[15], texCoord + vec2(offset) / texSize, 0.0f);\n#elif MAX_OCTAVES > 13\ncase 14: return textureLod(sobelDerivatives[14], texCoord + vec2(offset) / texSize, 0.0f);\ncase 13: return textureLod(sobelDerivatives[13], texCoord + vec2(offset) / texSize, 0.0f);\n#elif MAX_OCTAVES > 11\ncase 12: return textureLod(sobelDerivatives[12], texCoord + vec2(offset) / texSize, 0.0f);\ncase 11: return textureLod(sobelDerivatives[11], texCoord + vec2(offset) / texSize, 0.0f);\n#elif MAX_OCTAVES > 9\ncase 10: return textureLod(sobelDerivatives[10], texCoord + vec2(offset) / texSize, 0.0f);\ncase 9:  return textureLod(sobelDerivatives[9], texCoord + vec2(offset) / texSize, 0.0f);\n#elif MAX_OCTAVES > 7\ncase 8:  return textureLod(sobelDerivatives[8], texCoord + vec2(offset) / texSize, 0.0f);\ncase 7:  return textureLod(sobelDerivatives[7], texCoord + vec2(offset) / texSize, 0.0f);\n#endif\ndefault: return vec4(0.0f);\n}\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(pyramid);\nvec2 best = vec2(0.0f, pixel.a);\nint r = (windowSize - 1) / 2;\nfloat windowArea = float(windowSize * windowSize);\nfor(int octave = 0; octave < numberOfOctaves; octave++) {\nvec3 m = vec3(0.0f);\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nvec2 df = decodeSobel(pickSobelDerivatives(octave, ivec2(i-r, j-r)));\nm += vec3(df.x * df.x, df.x * df.y, df.y * df.y);\n}\n}\nfloat response = 0.5f * (m.x + m.z - sqrt((m.x - m.z) * (m.x - m.z) + 4.0f * m.y * m.y));\nfloat normalizer = 9.0f / windowArea;\nfloat score = response * normalizer;\nfloat lod = lodStep * float(octave);\nfloat scale = encodeLod(lod);\nbest *= float(score <= best.x);\nbest += float(score > best.x) * vec2(score, scale);\n}\nfloat encodedScore = 1.0f - exp2(-best.x);\ncolor = vec4(encodedScore, pixel.g, best.xy);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nuniform float lodStep;\n#define ENABLE_INNER_RING\n#define ENABLE_MIDDLE_RING\n#define ENABLE_OUTER_RING\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat lod = decodeLod(pixel.a);\ncolor = pixel;\nif(pixel.r == 0.0f)\nreturn;\n#ifdef ENABLE_INNER_RING\nvec4 p0 = pixelAtShortOffset(image, ivec2(0, 1));\nvec4 p1 = pixelAtShortOffset(image, ivec2(1, 1));\nvec4 p2 = pixelAtShortOffset(image, ivec2(1, 0));\nvec4 p3 = pixelAtShortOffset(image, ivec2(1, -1));\nvec4 p4 = pixelAtShortOffset(image, ivec2(0, -1));\nvec4 p5 = pixelAtShortOffset(image, ivec2(-1, -1));\nvec4 p6 = pixelAtShortOffset(image, ivec2(-1, 0));\nvec4 p7 = pixelAtShortOffset(image, ivec2(-1, 1));\n#else\nvec4 p0, p1, p2, p3, p4, p5, p6, p7;\np0 = p1 = p2 = p3 = p4 = p5 = p6 = p7 = vec4(0.0f);\n#endif\n#ifdef ENABLE_MIDDLE_RING\nvec4 q0 = pixelAtShortOffset(image, ivec2(0, 2));\nvec4 q1 = pixelAtShortOffset(image, ivec2(1, 2));\nvec4 q2 = pixelAtShortOffset(image, ivec2(2, 2));\nvec4 q3 = pixelAtShortOffset(image, ivec2(2, 1));\nvec4 q4 = pixelAtShortOffset(image, ivec2(2, 0));\nvec4 q5 = pixelAtShortOffset(image, ivec2(2, -1));\nvec4 q6 = pixelAtShortOffset(image, ivec2(2, -2));\nvec4 q7 = pixelAtShortOffset(image, ivec2(1, -2));\nvec4 q8 = pixelAtShortOffset(image, ivec2(0, -2));\nvec4 q9 = pixelAtShortOffset(image, ivec2(-1, -2));\nvec4 q10 = pixelAtShortOffset(image, ivec2(-2, -2));\nvec4 q11 = pixelAtShortOffset(image, ivec2(-2, -1));\nvec4 q12 = pixelAtShortOffset(image, ivec2(-2, 0));\nvec4 q13 = pixelAtShortOffset(image, ivec2(-2, 1));\nvec4 q14 = pixelAtShortOffset(image, ivec2(-2, 2));\nvec4 q15 = pixelAtShortOffset(image, ivec2(-1, 2));\n#else\nvec4 q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15;\nq0 = q1 = q2 = q3 = q4 = q5 = q6 = q7 = q8 = q9 = q10 =\nq11 = q12 = q13 = q14 = q15 = vec4(0.0f);\n#endif\n#ifdef ENABLE_OUTER_RING\nvec4 r0 = pixelAtShortOffset(image, ivec2(0, 3));\nvec4 r1 = pixelAtShortOffset(image, ivec2(1, 3));\nvec4 r2 = pixelAtShortOffset(image, ivec2(3, 1));\nvec4 r3 = pixelAtShortOffset(image, ivec2(3, 0));\nvec4 r4 = pixelAtShortOffset(image, ivec2(3, -1));\nvec4 r5 = pixelAtShortOffset(image, ivec2(1, -3));\nvec4 r6 = pixelAtShortOffset(image, ivec2(0, -3));\nvec4 r7 = pixelAtShortOffset(image, ivec2(-1, -3));\nvec4 r8 = pixelAtShortOffset(image, ivec2(-3, -1));\nvec4 r9 = pixelAtShortOffset(image, ivec2(-3, 0));\nvec4 r10 = pixelAtShortOffset(image, ivec2(-3, 1));\nvec4 r11 = pixelAtShortOffset(image, ivec2(-1, 3));\nvec4 r12 = pixelAtShortOffset(image, ivec2(0, 4));\nvec4 r13 = pixelAtShortOffset(image, ivec2(4, 0));\nvec4 r14 = pixelAtShortOffset(image, ivec2(0, -4));\nvec4 r15 = pixelAtShortOffset(image, ivec2(-4, 0));\n#else\nvec4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;\nr0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = r8 = r9 = r10 =\nr11 = r12 = r13 = r14 = r15 = vec4(0.0f);\n#endif\nfloat lodPlus = lod + lodStep;\nfloat lodMinus = lod - lodStep;\nfloat alphaPlus = encodeLod(lodPlus);\nfloat alphaMinus = encodeLod(lodMinus);\nmat3 innerScore = mat3(\np0.r * float(isSameEncodedLod(p0.a, alphaPlus) || isSameEncodedLod(p0.a, alphaMinus)),\np1.r * float(isSameEncodedLod(p1.a, alphaPlus) || isSameEncodedLod(p1.a, alphaMinus)),\np2.r * float(isSameEncodedLod(p2.a, alphaPlus) || isSameEncodedLod(p2.a, alphaMinus)),\np3.r * float(isSameEncodedLod(p3.a, alphaPlus) || isSameEncodedLod(p3.a, alphaMinus)),\np4.r * float(isSameEncodedLod(p4.a, alphaPlus) || isSameEncodedLod(p4.a, alphaMinus)),\np5.r * float(isSameEncodedLod(p5.a, alphaPlus) || isSameEncodedLod(p5.a, alphaMinus)),\np6.r * float(isSameEncodedLod(p6.a, alphaPlus) || isSameEncodedLod(p6.a, alphaMinus)),\np7.r * float(isSameEncodedLod(p7.a, alphaPlus) || isSameEncodedLod(p7.a, alphaMinus)),\n0.0f\n);\nmat4 middleScore = mat4(\nq0.r * float(isSameEncodedLod(q0.a, alphaPlus) || isSameEncodedLod(q0.a, alphaMinus)),\nq1.r * float(isSameEncodedLod(q1.a, alphaPlus) || isSameEncodedLod(q1.a, alphaMinus)),\nq2.r * float(isSameEncodedLod(q2.a, alphaPlus) || isSameEncodedLod(q2.a, alphaMinus)),\nq3.r * float(isSameEncodedLod(q3.a, alphaPlus) || isSameEncodedLod(q3.a, alphaMinus)),\nq4.r * float(isSameEncodedLod(q4.a, alphaPlus) || isSameEncodedLod(q4.a, alphaMinus)),\nq5.r * float(isSameEncodedLod(q5.a, alphaPlus) || isSameEncodedLod(q5.a, alphaMinus)),\nq6.r * float(isSameEncodedLod(q6.a, alphaPlus) || isSameEncodedLod(q6.a, alphaMinus)),\nq7.r * float(isSameEncodedLod(q7.a, alphaPlus) || isSameEncodedLod(q7.a, alphaMinus)),\nq8.r * float(isSameEncodedLod(q8.a, alphaPlus) || isSameEncodedLod(q8.a, alphaMinus)),\nq9.r * float(isSameEncodedLod(q9.a, alphaPlus) || isSameEncodedLod(q9.a, alphaMinus)),\nq10.r * float(isSameEncodedLod(q10.a, alphaPlus) || isSameEncodedLod(q10.a, alphaMinus)),\nq11.r * float(isSameEncodedLod(q11.a, alphaPlus) || isSameEncodedLod(q11.a, alphaMinus)),\nq12.r * float(isSameEncodedLod(q12.a, alphaPlus) || isSameEncodedLod(q12.a, alphaMinus)),\nq13.r * float(isSameEncodedLod(q13.a, alphaPlus) || isSameEncodedLod(q13.a, alphaMinus)),\nq14.r * float(isSameEncodedLod(q14.a, alphaPlus) || isSameEncodedLod(q14.a, alphaMinus)),\nq15.r * float(isSameEncodedLod(q15.a, alphaPlus) || isSameEncodedLod(q15.a, alphaMinus))\n);\nmat4 outerScore = mat4(\nr0.r * float(isSameEncodedLod(r0.a, alphaPlus) || isSameEncodedLod(r0.a, alphaMinus)),\nr1.r * float(isSameEncodedLod(r1.a, alphaPlus) || isSameEncodedLod(r1.a, alphaMinus)),\nr2.r * float(isSameEncodedLod(r2.a, alphaPlus) || isSameEncodedLod(r2.a, alphaMinus)),\nr3.r * float(isSameEncodedLod(r3.a, alphaPlus) || isSameEncodedLod(r3.a, alphaMinus)),\nr4.r * float(isSameEncodedLod(r4.a, alphaPlus) || isSameEncodedLod(r4.a, alphaMinus)),\nr5.r * float(isSameEncodedLod(r5.a, alphaPlus) || isSameEncodedLod(r5.a, alphaMinus)),\nr6.r * float(isSameEncodedLod(r6.a, alphaPlus) || isSameEncodedLod(r6.a, alphaMinus)),\nr7.r * float(isSameEncodedLod(r7.a, alphaPlus) || isSameEncodedLod(r7.a, alphaMinus)),\nr8.r * float(isSameEncodedLod(r8.a, alphaPlus) || isSameEncodedLod(r8.a, alphaMinus)),\nr9.r * float(isSameEncodedLod(r9.a, alphaPlus) || isSameEncodedLod(r9.a, alphaMinus)),\nr10.r * float(isSameEncodedLod(r10.a, alphaPlus) || isSameEncodedLod(r10.a, alphaMinus)),\nr11.r * float(isSameEncodedLod(r11.a, alphaPlus) || isSameEncodedLod(r11.a, alphaMinus)),\nr12.r * float(isSameEncodedLod(r12.a, alphaPlus) || isSameEncodedLod(r12.a, alphaMinus)),\nr13.r * float(isSameEncodedLod(r13.a, alphaPlus) || isSameEncodedLod(r13.a, alphaMinus)),\nr14.r * float(isSameEncodedLod(r14.a, alphaPlus) || isSameEncodedLod(r14.a, alphaMinus)),\nr15.r * float(isSameEncodedLod(r15.a, alphaPlus) || isSameEncodedLod(r15.a, alphaMinus))\n);\nvec3 maxInnerScore3 = max(innerScore[0], max(innerScore[1], innerScore[2]));\nvec4 maxMiddleScore4 = max(max(middleScore[0], middleScore[1]), max(middleScore[2], middleScore[3]));\nvec4 maxOuterScore4 = max(max(outerScore[0], outerScore[1]), max(outerScore[2], outerScore[3]));\nfloat maxInnerScore = max(maxInnerScore3.x, max(maxInnerScore3.y, maxInnerScore3.z));\nfloat maxMiddleScore = max(max(maxMiddleScore4.x, maxMiddleScore4.y), max(maxMiddleScore4.z, maxMiddleScore4.w));\nfloat maxOuterScore = max(max(maxOuterScore4.x, maxOuterScore4.y), max(maxOuterScore4.z, maxOuterScore4.w));\nfloat maxScore = max(maxInnerScore, max(maxMiddleScore, maxOuterScore));\nfloat myScore = step(maxScore, pixel.r) * pixel.r;\ncolor = vec4(myScore, pixel.gba);\n}'},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).r;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).r;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).r;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).r;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).r;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).r;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).r;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).r;\nfloat m = max(\nmax(max(p0, p1), max(p2, p3)),\nmax(max(p4, p5), max(p6, p7))\n);\nvec4 pixel = threadPixel(image);\nfloat score = step(m, pixel.r) * pixel.r;\ncolor = vec4(score, pixel.gba);\n}"},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedCorners;\nuniform int encoderLength;\nuniform sampler2D pyramid;\nuniform int extraSize;\nconst int descriptorSize = 32;\nconst ivec4 pat31[256] = ivec4[256](\nivec4(8,-3,9,5),\nivec4(4,2,7,-12),\nivec4(-11,9,-8,2),\nivec4(7,-12,12,-13),\nivec4(2,-13,2,12),\nivec4(1,-7,1,6),\nivec4(-2,-10,-2,-4),\nivec4(-13,-13,-11,-8),\nivec4(-13,-3,-12,-9),\nivec4(10,4,11,9),\nivec4(-13,-8,-8,-9),\nivec4(-11,7,-9,12),\nivec4(7,7,12,6),\nivec4(-4,-5,-3,0),\nivec4(-13,2,-12,-3),\nivec4(-9,0,-7,5),\nivec4(12,-6,12,-1),\nivec4(-3,6,-2,12),\nivec4(-6,-13,-4,-8),\nivec4(11,-13,12,-8),\nivec4(4,7,5,1),\nivec4(5,-3,10,-3),\nivec4(3,-7,6,12),\nivec4(-8,-7,-6,-2),\nivec4(-2,11,-1,-10),\nivec4(-13,12,-8,10),\nivec4(-7,3,-5,-3),\nivec4(-4,2,-3,7),\nivec4(-10,-12,-6,11),\nivec4(5,-12,6,-7),\nivec4(5,-6,7,-1),\nivec4(1,0,4,-5),\nivec4(9,11,11,-13),\nivec4(4,7,4,12),\nivec4(2,-1,4,4),\nivec4(-4,-12,-2,7),\nivec4(-8,-5,-7,-10),\nivec4(4,11,9,12),\nivec4(0,-8,1,-13),\nivec4(-13,-2,-8,2),\nivec4(-3,-2,-2,3),\nivec4(-6,9,-4,-9),\nivec4(8,12,10,7),\nivec4(0,9,1,3),\nivec4(7,-5,11,-10),\nivec4(-13,-6,-11,0),\nivec4(10,7,12,1),\nivec4(-6,-3,-6,12),\nivec4(10,-9,12,-4),\nivec4(-13,8,-8,-12),\nivec4(-13,0,-8,-4),\nivec4(3,3,7,8),\nivec4(5,7,10,-7),\nivec4(-1,7,1,-12),\nivec4(3,-10,5,6),\nivec4(2,-4,3,-10),\nivec4(-13,0,-13,5),\nivec4(-13,-7,-12,12),\nivec4(-13,3,-11,8),\nivec4(-7,12,-4,7),\nivec4(6,-10,12,8),\nivec4(-9,-1,-7,-6),\nivec4(-2,-5,0,12),\nivec4(-12,5,-7,5),\nivec4(3,-10,8,-13),\nivec4(-7,-7,-4,5),\nivec4(-3,-2,-1,-7),\nivec4(2,9,5,-11),\nivec4(-11,-13,-5,-13),\nivec4(-1,6,0,-1),\nivec4(5,-3,5,2),\nivec4(-4,-13,-4,12),\nivec4(-9,-6,-9,6),\nivec4(-12,-10,-8,-4),\nivec4(10,2,12,-3),\nivec4(7,12,12,12),\nivec4(-7,-13,-6,5),\nivec4(-4,9,-3,4),\nivec4(7,-1,12,2),\nivec4(-7,6,-5,1),\nivec4(-13,11,-12,5),\nivec4(-3,7,-2,-6),\nivec4(7,-8,12,-7),\nivec4(-13,-7,-11,-12),\nivec4(1,-3,12,12),\nivec4(2,-6,3,0),\nivec4(-4,3,-2,-13),\nivec4(-1,-13,1,9),\nivec4(7,1,8,-6),\nivec4(1,-1,3,12),\nivec4(9,1,12,6),\nivec4(-1,-9,-1,3),\nivec4(-13,-13,-10,5),\nivec4(7,7,10,12),\nivec4(12,-5,12,9),\nivec4(6,3,7,11),\nivec4(5,-13,6,10),\nivec4(2,-12,2,3),\nivec4(3,8,4,-6),\nivec4(2,6,12,-13),\nivec4(9,-12,10,3),\nivec4(-8,4,-7,9),\nivec4(-11,12,-4,-6),\nivec4(1,12,2,-8),\nivec4(6,-9,7,-4),\nivec4(2,3,3,-2),\nivec4(6,3,11,0),\nivec4(3,-3,8,-8),\nivec4(7,8,9,3),\nivec4(-11,-5,-6,-4),\nivec4(-10,11,-5,10),\nivec4(-5,-8,-3,12),\nivec4(-10,5,-9,0),\nivec4(8,-1,12,-6),\nivec4(4,-6,6,-11),\nivec4(-10,12,-8,7),\nivec4(4,-2,6,7),\nivec4(-2,0,-2,12),\nivec4(-5,-8,-5,2),\nivec4(7,-6,10,12),\nivec4(-9,-13,-8,-8),\nivec4(-5,-13,-5,-2),\nivec4(8,-8,9,-13),\nivec4(-9,-11,-9,0),\nivec4(1,-8,1,-2),\nivec4(7,-4,9,1),\nivec4(-2,1,-1,-4),\nivec4(11,-6,12,-11),\nivec4(-12,-9,-6,4),\nivec4(3,7,7,12),\nivec4(5,5,10,8),\nivec4(0,-4,2,8),\nivec4(-9,12,-5,-13),\nivec4(0,7,2,12),\nivec4(-1,2,1,7),\nivec4(5,11,7,-9),\nivec4(3,5,6,-8),\nivec4(-13,-4,-8,9),\nivec4(-5,9,-3,-3),\nivec4(-4,-7,-3,-12),\nivec4(6,5,8,0),\nivec4(-7,6,-6,12),\nivec4(-13,6,-5,-2),\nivec4(1,-10,3,10),\nivec4(4,1,8,-4),\nivec4(-2,-2,2,-13),\nivec4(2,-12,12,12),\nivec4(-2,-13,0,-6),\nivec4(4,1,9,3),\nivec4(-6,-10,-3,-5),\nivec4(-3,-13,-1,1),\nivec4(7,5,12,-11),\nivec4(4,-2,5,-7),\nivec4(-13,9,-9,-5),\nivec4(7,1,8,6),\nivec4(7,-8,7,6),\nivec4(-7,-4,-7,1),\nivec4(-8,11,-7,-8),\nivec4(-13,6,-12,-8),\nivec4(2,4,3,9),\nivec4(10,-5,12,3),\nivec4(-6,-5,-6,7),\nivec4(8,-3,9,-8),\nivec4(2,-12,2,8),\nivec4(-11,-2,-10,3),\nivec4(-12,-13,-7,-9),\nivec4(-11,0,-10,-5),\nivec4(5,-3,11,8),\nivec4(-2,-13,-1,12),\nivec4(-1,-8,0,9),\nivec4(-13,-11,-12,-5),\nivec4(-10,-2,-10,11),\nivec4(-3,9,-2,-13),\nivec4(2,-3,3,2),\nivec4(-9,-13,-4,0),\nivec4(-4,6,-3,-10),\nivec4(-4,12,-2,-7),\nivec4(-6,-11,-4,9),\nivec4(6,-3,6,11),\nivec4(-13,11,-5,5),\nivec4(11,11,12,6),\nivec4(7,-5,12,-2),\nivec4(-1,12,0,7),\nivec4(-4,-8,-3,-2),\nivec4(-7,1,-6,7),\nivec4(-13,-12,-8,-13),\nivec4(-7,-2,-6,-8),\nivec4(-8,5,-6,-9),\nivec4(-5,-1,-4,5),\nivec4(-13,7,-8,10),\nivec4(1,5,5,-13),\nivec4(1,0,10,-13),\nivec4(9,12,10,-1),\nivec4(5,-8,10,-9),\nivec4(-1,11,1,-13),\nivec4(-9,-3,-6,2),\nivec4(-1,-10,1,12),\nivec4(-13,1,-8,-10),\nivec4(8,-11,10,-6),\nivec4(2,-13,3,-6),\nivec4(7,-13,12,-9),\nivec4(-10,-10,-5,-7),\nivec4(-10,-8,-8,-13),\nivec4(4,-6,8,5),\nivec4(3,12,8,-13),\nivec4(-4,2,-3,-3),\nivec4(5,-13,10,-12),\nivec4(4,-13,5,-1),\nivec4(-9,9,-4,3),\nivec4(0,3,3,-9),\nivec4(-12,1,-6,1),\nivec4(3,2,4,-8),\nivec4(-10,-10,-10,9),\nivec4(8,-13,12,12),\nivec4(-8,-12,-6,-5),\nivec4(2,2,3,7),\nivec4(10,6,11,-8),\nivec4(6,8,8,-12),\nivec4(-7,10,-6,5),\nivec4(-3,-9,-3,9),\nivec4(-1,-13,-1,5),\nivec4(-3,-7,-3,4),\nivec4(-8,-2,-8,3),\nivec4(4,2,12,12),\nivec4(2,-5,3,11),\nivec4(6,-9,11,-13),\nivec4(3,-1,7,12),\nivec4(11,-1,12,4),\nivec4(-3,0,-3,6),\nivec4(4,-11,4,12),\nivec4(2,-4,2,1),\nivec4(-10,-6,-8,1),\nivec4(-13,7,-11,1),\nivec4(-13,12,-11,-13),\nivec4(6,0,11,-13),\nivec4(0,-1,1,4),\nivec4(-13,3,-9,-2),\nivec4(-9,8,-6,-3),\nivec4(-13,-6,-8,-2),\nivec4(5,-9,8,10),\nivec4(2,7,3,-9),\nivec4(-1,-6,-1,-1),\nivec4(9,5,11,-2),\nivec4(11,-3,12,-8),\nivec4(3,0,3,5),\nivec4(-1,4,0,10),\nivec4(3,-6,4,5),\nivec4(-13,0,-10,5),\nivec4(5,8,12,11),\nivec4(8,9,9,-6),\nivec4(7,-4,8,-12),\nivec4(-10,4,-10,9),\nivec4(7,3,12,4),\nivec4(9,-7,10,-2),\nivec4(7,0,12,-2),\nivec4(-1,-6,0,-11)\n);\nvoid getPair(int index, float kcos, float ksin, out ivec2 p, out ivec2 q)\n{\nivec4 data = pat31[index];\nvec2 op = vec2(data.xy);\nvec2 oq = vec2(data.zw);\np = ivec2(round(op.x * kcos - op.y * ksin), round(op.x * ksin + op.y * kcos));\nq = ivec2(round(oq.x * kcos - oq.y * ksin), round(oq.x * ksin + oq.y * kcos));\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedCorners);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint descriptorCell = address.offset - sizeofEncodedKeypoint(0, extraSize) / 4;\ncolor = pixel;\nif(descriptorCell < 0)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedCorners, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nfloat pot = exp2(keypoint.lod);\nfloat kcos = cos(keypoint.orientation);\nfloat ksin = sin(keypoint.orientation);\nvec2 imageSize = vec2(textureSize(pyramid, 0));\nint patternStart = 32 * descriptorCell;\nuint test[4] = uint[4](0u, 0u, 0u, 0u);\nfor(int t = 0; t < 4; t++) {\nuint bits = 0u;\nivec2 p, q;\nvec4 a, b;\nint i = t * 8;\n@unroll\nfor(int j = 0; j < 8; j++) {\ngetPair(patternStart + i + j, kcos, ksin, p, q);\na = pyrPixelAtEx(pyramid, round(keypoint.position + pot * vec2(p)), keypoint.lod, imageSize);\nb = pyrPixelAtEx(pyramid, round(keypoint.position + pot * vec2(q)), keypoint.lod, imageSize);\nbits |= uint(a.g < b.g) << j;\n}\ntest[t] = bits;\n}\ncolor = vec4(float(test[0]), float(test[1]), float(test[2]), float(test[3])) / 255.0f;\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D pyramid;\nuniform sampler2D encodedKeypoints;\nuniform int patchRadius;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nconst int patchStart[8] = int[8](0, 0, 8, 28, 64, 132, 228, 356);\nconst int patchPointCount[8] = int[8](0, 8, 20, 36, 68, 96, 128, 168);\nconst ivec2 patchData[524] = ivec2[524](\nivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(-1,0),ivec2(1,0),ivec2(-1,1),ivec2(0,1),ivec2(1,1),\nivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(-1,2),ivec2(0,2),ivec2(1,2),\nivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(-1,3),ivec2(0,3),ivec2(1,3),\nivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),\nivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),\nivec2(-2,-6),ivec2(-1,-6),ivec2(0,-6),ivec2(1,-6),ivec2(2,-6),ivec2(-3,-5),ivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(3,-5),ivec2(-4,-4),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(4,-4),ivec2(-5,-3),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(5,-3),ivec2(-6,-2),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(6,-2),ivec2(-6,-1),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(6,-1),ivec2(-6,0),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(6,0),ivec2(-6,1),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(6,1),ivec2(-6,2),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(6,2),ivec2(-5,3),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(5,3),ivec2(-4,4),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(4,4),ivec2(-3,5),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),ivec2(3,5),ivec2(-2,6),ivec2(-1,6),ivec2(0,6),ivec2(1,6),ivec2(2,6),\nivec2(-2,-7),ivec2(-1,-7),ivec2(0,-7),ivec2(1,-7),ivec2(2,-7),ivec2(-4,-6),ivec2(-3,-6),ivec2(-2,-6),ivec2(-1,-6),ivec2(0,-6),ivec2(1,-6),ivec2(2,-6),ivec2(3,-6),ivec2(4,-6),ivec2(-5,-5),ivec2(-3,-5),ivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(3,-5),ivec2(5,-5),ivec2(-6,-4),ivec2(-4,-4),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(4,-4),ivec2(6,-4),ivec2(-6,-3),ivec2(-5,-3),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(5,-3),ivec2(6,-3),ivec2(-7,-2),ivec2(-6,-2),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(6,-2),ivec2(7,-2),ivec2(-7,-1),ivec2(-6,-1),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(6,-1),ivec2(7,-1),ivec2(-7,0),ivec2(-6,0),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(6,0),ivec2(7,0),ivec2(-7,1),ivec2(-6,1),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(6,1),ivec2(7,1),ivec2(-7,2),ivec2(-6,2),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(6,2),ivec2(7,2),ivec2(-6,3),ivec2(-5,3),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(5,3),ivec2(6,3),ivec2(-6,4),ivec2(-4,4),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(4,4),ivec2(6,4),ivec2(-5,5),ivec2(-3,5),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),ivec2(3,5),ivec2(5,5),ivec2(-4,6),ivec2(-3,6),ivec2(-2,6),ivec2(-1,6),ivec2(0,6),ivec2(1,6),ivec2(2,6),ivec2(3,6),ivec2(4,6),ivec2(-2,7),ivec2(-1,7),ivec2(0,7),ivec2(1,7),ivec2(2,7)\n);\nconst int MIN_PATCH_RADIUS = 3;\nconst int MAX_PATCH_RADIUS = 7;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\ncolor = pixel;\nif(address.offset != 1)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nfloat pot = exp2(keypoint.lod);\nvec2 m = vec2(0.0f);\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nint scaledRadius = int(ceil(float(patchRadius) / pot));\nint radius = clamp(scaledRadius, MIN_PATCH_RADIUS, MAX_PATCH_RADIUS);\nint start = patchStart[radius];\nint count = patchPointCount[radius];\nfor(int j = 0; j < count; j++) {\nvec2 offset = vec2(patchData[start + j]);\nvec2 position = keypoint.position + round(pot * offset);\nvec4 patchPixel = pyrPixelAtEx(pyramid, position, keypoint.lod, pyrBaseSize);\nm += offset * patchPixel.g;\n}\nfloat angle = fastAtan2(m.y, m.x);\ncolor.g = encodeOrientation(angle);\ncolor.a = encodeKeypointFlags(keypoint.flags | KPF_ORIENTED);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 thread = threadLocation();\nfloat lod = decodeLod(pixel.a);\nfloat pot = exp2(lod);\ncolor = pixel;\nif(pixel.r == 0.0f)\nreturn;\nvec4 p0 = pixelAtShortOffset(image, ivec2(0, 1));\nvec4 p1 = pixelAtShortOffset(image, ivec2(1, 1));\nvec4 p2 = pixelAtShortOffset(image, ivec2(1, 0));\nvec4 p3 = pixelAtShortOffset(image, ivec2(1, -1));\nvec4 p4 = pixelAtShortOffset(image, ivec2(0, -1));\nvec4 p5 = pixelAtShortOffset(image, ivec2(-1, -1));\nvec4 p6 = pixelAtShortOffset(image, ivec2(-1, 0));\nvec4 p7 = pixelAtShortOffset(image, ivec2(-1, 1));\nmat3 score = mat3(\np0.r * float(isSameEncodedLod(p0.a, pixel.a)),\np1.r * float(isSameEncodedLod(p1.a, pixel.a)),\np2.r * float(isSameEncodedLod(p2.a, pixel.a)),\np3.r * float(isSameEncodedLod(p3.a, pixel.a)),\np4.r * float(isSameEncodedLod(p4.a, pixel.a)),\np5.r * float(isSameEncodedLod(p5.a, pixel.a)),\np6.r * float(isSameEncodedLod(p6.a, pixel.a)),\np7.r * float(isSameEncodedLod(p7.a, pixel.a)),\n0.0f\n);\nvec3 maxScore3 = max(score[0], max(score[1], score[2]));\nfloat maxScore = max(maxScore3.x, max(maxScore3.y, maxScore3.z));\nfloat myScore = step(maxScore, pixel.r) * pixel.r;\ncolor = vec4(myScore, pixel.gba);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int estimatedKeypointCount;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#if !defined(MAX_KEYPOINTS)\n#error Must define MAX_KEYPOINTS\n#elif MAX_KEYPOINTS >= 65536\n#error MAX_KEYPOINTS is too large!\n#endif\nuint tuple[1 + MAX_KEYPOINTS];\nuint encodeTuple(Keypoint keypoint, int index)\n{\nuint mask = uint(-int(!isBadKeypoint(keypoint)));\nuint score = uint(clamp(keypoint.score, 0.0f, 1.0f) * 65535.0f);\nuint data = (uint(index) & 65535u) | (score << 16u);\nreturn data & mask;\n}\n#define decodeTupleIndex(tuple) int((tuple) & 16777215u)\n#define QUICKSELECT_UNSIGNED\n#define QUICKSELECT_DESCENDING\n#define QUICKSELECT_ARRAY tuple\n@include "quickselect.glsl"\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\ncolor = pixel;\nif(myIndex >= estimatedKeypointCount)\nreturn;\nKeypoint keypoint;\nKeypointAddress address = KeypointAddress(0, 0);\nint actualKeypointCount = estimatedKeypointCount;\nfor(int i = 0; i < estimatedKeypointCount; i++) {\nkeypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\ntuple[min(i, MAX_KEYPOINTS)] = encodeTuple(keypoint, i);\nactualKeypointCount = isBadKeypoint(keypoint) ? min(actualKeypointCount, i) : actualKeypointCount;\naddress.base += pixelsPerKeypoint;\n}\nint desiredTuple = quickselect(0, min(MAX_KEYPOINTS, actualKeypointCount - 1), myIndex);\nint desiredIndex = decodeTupleIndex(desiredTuple);\nKeypointAddress desiredAddress = KeypointAddress(desiredIndex * pixelsPerKeypoint, myAddress.offset);\nint desiredRasterIndex = desiredAddress.base + desiredAddress.offset;\nvec4 desiredPixel = readKeypointData(encodedKeypoints, encoderLength, desiredRasterIndex);\ncolor = myIndex < actualKeypointCount ? desiredPixel : encodeNullKeypoint();\n}'},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 pos = min(thread * 2, textureSize(image, 0) - ivec2(1));\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = pixelAt(image, thread / 2);\ncolor = (((thread.x + thread.y) & 1) == 0) ? pixel : vec4(0.0f, 0.0f, 0.0f, pixel.a);\n}"},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D pyramid;\nuniform sampler2D encodedKeypoints;\nuniform int windowSize;\nuniform float discardThreshold;\nuniform int firstKeypointIndex, lastKeypointIndex;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#ifndef MAX_WINDOW_SIZE\n#error Must define MAX_WINDOW_SIZE\n#endif\nconst int MAX_WINDOW_SIZE_PLUS = MAX_WINDOW_SIZE + 2;\nconst int MAX_WINDOW_SIZE_PLUS_SQUARED = MAX_WINDOW_SIZE_PLUS * MAX_WINDOW_SIZE_PLUS;\nconst int MAX_WINDOW_RADIUS_PLUS = (MAX_WINDOW_SIZE_PLUS - 1) / 2;\nconst float DISCARD_SCALE = 0.00024318695068359375f;\nfloat pixelBuffer[MAX_WINDOW_SIZE_PLUS_SQUARED];\n#define pixelIndex(i, j) (((j) + MAX_WINDOW_RADIUS_PLUS) * MAX_WINDOW_SIZE_PLUS + ((i) + MAX_WINDOW_RADIUS_PLUS))\n#define windowRadius() ((windowSize - 1) / 2)\nvoid readWindow(vec2 center, float lod)\n{\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nfloat pot = exp2(lod);\nint r = windowRadius();\n#define readPixelAt(ox, oy) pixelBuffer[pixelIndex((ox), (oy))] = pyrSubpixelAtExOffset(pyramid, center, lod, pot, ivec2((ox), (oy)), pyrBaseSize).g\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nreadPixelAt(i-r, j-r);\n}\n}\nint r1 = r+1;\nfor(int k = 0; k < windowSize; k++) {\nreadPixelAt(-r1, k-r);\nreadPixelAt( r1, k-r);\nreadPixelAt(k-r,-r1);\nreadPixelAt(k-r, r1);\n}\nreadPixelAt(-r1,-r1);\nreadPixelAt( r1,-r1);\nreadPixelAt(-r1, r1);\nreadPixelAt( r1, r1);\n}\nvec2 computeDerivatives(ivec2 offset)\n{\nconst mat3 derivX = mat3(\n3, 0, -3,\n10, 0, -10,\n3, 0, -3\n);\nconst mat3 derivY = mat3(\n3, 10, 3,\n0, 0, 0,\n-3, -10, -3\n);\nmat3 window = mat3(\npixelBuffer[pixelIndex(offset.x-1, offset.y-1)],\npixelBuffer[pixelIndex(offset.x+0, offset.y-1)],\npixelBuffer[pixelIndex(offset.x+1, offset.y-1)],\npixelBuffer[pixelIndex(offset.x-1, offset.y+0)],\n0.0f,\npixelBuffer[pixelIndex(offset.x+1, offset.y+0)],\npixelBuffer[pixelIndex(offset.x-1, offset.y+1)],\npixelBuffer[pixelIndex(offset.x+0, offset.y+1)],\npixelBuffer[pixelIndex(offset.x+1, offset.y+1)]\n);\nmat3 fx = matrixCompMult(derivX, window);\nmat3 fy = matrixCompMult(derivY, window);\nconst vec3 ones = vec3(1.0f);\nreturn vec2(\ndot(fx[0], ones) + dot(fx[1], ones) + dot(fx[2], ones),\ndot(fy[0], ones) + dot(fy[1], ones) + dot(fy[2], ones)\n);\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint r = windowRadius();\ncolor = pixel;\nif(address.offset != 1)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nint idx = findKeypointIndex(address, descriptorSize, extraSize);\nif(idx < firstKeypointIndex || idx > lastKeypointIndex)\nreturn;\ncolor = vec4(pixel.rgb, encodeKeypointFlags(keypoint.flags | KPF_DISCARD));\nif(isKeypointAtInfinity(keypoint))\nreturn;\nreadWindow(keypoint.position, keypoint.lod);\nvec2 derivatives = vec2(0.0f);\nmat2 harris = mat2(0.0f, 0.0f, 0.0f, 0.0f);\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nderivatives = computeDerivatives(ivec2(i-r, j-r));\nharris += mat2(\nderivatives.x * derivatives.x, derivatives.x * derivatives.y,\nderivatives.x * derivatives.y, derivatives.y * derivatives.y\n) * DISCARD_SCALE;\n}\n}\nfloat delta = harris[0][0] - harris[1][1];\nfloat eigenvalue = 0.5f * ((harris[0][0] + harris[1][1]) - sqrt(delta * delta - 4.0f * harris[0][1] * harris[0][1]));\nint windowArea = windowSize * windowSize;\nfloat cornerness = eigenvalue / float(windowArea);\nint flags = keypoint.flags;\nflags |= int(cornerness < discardThreshold) * KPF_DISCARD;\ncolor = vec4(pixel.rgb, encodeKeypointFlags(flags));\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D nextPyramid;\nuniform sampler2D prevPyramid;\nuniform sampler2D prevKeypoints;\nuniform int windowSize;\nuniform int depth;\nuniform int firstKeypointIndex, lastKeypointIndex;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#ifndef NUM_ITERATIONS\n#define NUM_ITERATIONS 5\n#endif\n#ifndef MAX_WINDOW_SIZE\n#error Must define MAX_WINDOW_SIZE\n#endif\n#ifndef DISCARD_MARGIN\n#define DISCARD_MARGIN 20\n#endif\n#define NEXT_IMAGE 1\n#define PREV_IMAGE 0\nconst int MAX_WINDOW_SIZE_PLUS = MAX_WINDOW_SIZE + 2;\nconst int MAX_WINDOW_SIZE_PLUS_SQUARED = MAX_WINDOW_SIZE_PLUS * MAX_WINDOW_SIZE_PLUS;\nconst int DBL_MAX_WINDOW_SIZE_PLUS_SQUARED = 2 * MAX_WINDOW_SIZE_PLUS_SQUARED;\nconst int MAX_WINDOW_RADIUS_PLUS = (MAX_WINDOW_SIZE_PLUS - 1) / 2;\n#define windowRadius() ((windowSize - 1) / 2)\nfloat pixelBuffer[DBL_MAX_WINDOW_SIZE_PLUS_SQUARED];\n#define prevPixel(index) pixelBuffer[(index)]\n#define nextPixel(index) pixelBuffer[MAX_WINDOW_SIZE_PLUS_SQUARED + (index)]\n#define pixelIndex(i, j) (((j) + MAX_WINDOW_RADIUS_PLUS) * MAX_WINDOW_SIZE_PLUS + ((i) + MAX_WINDOW_RADIUS_PLUS))\nvoid readWindow(vec2 center, float lod)\n{\nivec2 pyrBaseSize = textureSize(prevPyramid, 0);\nfloat pot = exp2(lod);\nint r = windowRadius();\nivec2 offset; int idx;\n#define readPixelsAt(ox, oy) offset = ivec2((ox), (oy)); idx = pixelIndex(offset.x, offset.y); nextPixel(idx) = pyrSubpixelAtExOffset(nextPyramid, center, lod, pot, offset, pyrBaseSize).g; prevPixel(idx) = pyrSubpixelAtExOffset(prevPyramid, center, lod, pot, offset, pyrBaseSize).g\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nreadPixelsAt(i-r, j-r);\n}\n}\nint r1 = r+1;\nfor(int k = 0; k < windowSize; k++) {\nreadPixelsAt(-r1, k-r);\nreadPixelsAt( r1, k-r);\nreadPixelsAt(k-r,-r1);\nreadPixelsAt(k-r, r1);\n}\nreadPixelsAt(-r1,-r1);\nreadPixelsAt( r1,-r1);\nreadPixelsAt(-r1, r1);\nreadPixelsAt( r1, r1);\n}\nvec2 computeDerivatives(int imageCode, ivec2 offset)\n{\nconst mat3 derivX = mat3(\n3, 0, -3,\n10, 0, -10,\n3, 0, -3\n);\nconst mat3 derivY = mat3(\n3, 10, 3,\n0, 0, 0,\n-3, -10, -3\n);\nint indexOffset = imageCode * MAX_WINDOW_SIZE_PLUS_SQUARED;\nmat3 window = mat3(\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+0)],\n0.0f,\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+0)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+1)]\n);\nmat3 fx = matrixCompMult(derivX, window);\nmat3 fy = matrixCompMult(derivY, window);\nconst vec3 ones = vec3(1.0f);\nreturn vec2(\ndot(fx[0], ones) + dot(fx[1], ones) + dot(fx[2], ones),\ndot(fy[0], ones) + dot(fy[1], ones) + dot(fy[2], ones)\n);\n}\nfloat readBufferedPixel(int imageCode, ivec2 offset)\n{\nivec2 limit = ivec2(windowRadius());\noffset = clamp(offset, -limit, limit);\nint indexOffset = imageCode * MAX_WINDOW_SIZE_PLUS_SQUARED;\nreturn pixelBuffer[indexOffset + pixelIndex(offset.x, offset.y)];\n}\nvoid main()\n{\nvec4 pixel = threadPixel(prevKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint r = windowRadius();\ncolor = pixel;\nif(address.offset > 0)\nreturn;\nKeypoint keypoint = decodeKeypoint(prevKeypoints, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nint idx = findKeypointIndex(address, descriptorSize, extraSize);\nif(idx < firstKeypointIndex || idx > lastKeypointIndex)\nreturn;\nvec2 pyrGuess = vec2(0.0f);\nfor(int d = 0; d < depth; d++) {\nfloat lod = float(depth - 1 - d);\nreadWindow(keypoint.position, lod);\nhighp mat2 invHarris = mat2(0.0f, 0.0f, 0.0f, 0.0f);\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nvec2 derivatives = computeDerivatives(PREV_IMAGE, ivec2(i-r, j-r));\ninvHarris += mat2(\nderivatives.y * derivatives.y, -derivatives.x * derivatives.y,\n-derivatives.x * derivatives.y, derivatives.x * derivatives.x\n);\n}\n}\nconst float minDet = 0.00001f;\nhighp float det = invHarris[0][0] * invHarris[1][1] - invHarris[0][1] * invHarris[1][0];\nhighp vec2 localGuess = vec2(0.0f);\nfor(int k = 0; k < NUM_ITERATIONS; k++) {\nhighp vec2 spaceTime = vec2(0.0f);\nfor(int _y = 0; _y < windowSize; _y++) {\nfor(int _x = 0; _x < windowSize; _x++) {\nint x = _x - r; int y = _y - r;\nvec2 spatialDerivative = computeDerivatives(PREV_IMAGE, ivec2(x, y));\nfloat timeDerivative = readBufferedPixel(NEXT_IMAGE,\nivec2(round(vec2(x, y) + pyrGuess + localGuess))\n) - readBufferedPixel(PREV_IMAGE, ivec2(x, y));\nspaceTime += spatialDerivative * timeDerivative;\n}\n}\nhighp vec2 localOpticalFlow = float(abs(det) >= minDet) * (invHarris * spaceTime / det);\nlocalGuess += localOpticalFlow;\n}\npyrGuess = 2.0f * (pyrGuess + localGuess);\n}\nvec2 opticalFlow = pyrGuess;\nvec2 nextPosition = keypoint.position + opticalFlow;\nvec2 imageSize = vec2(textureSize(nextPyramid, 0));\nfloat margin = float(DISCARD_MARGIN);\nbool isKeypointWithinBoundaries = (\nnextPosition.x >= margin &&\nnextPosition.y >= margin &&\nnextPosition.x <= imageSize.x - margin &&\nnextPosition.y <= imageSize.y - margin\n);\ncolor = isKeypointWithinBoundaries ? encodeKeypointPosition(nextPosition) : encodeKeypointPositionAtInfinity();\n}'},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D dest, src;\nuniform int destComponents;\nuniform int srcComponentId;\nvoid main()\n{\nvec4 destPixel = threadPixel(dest);\nvec4 srcPixel = threadPixel(src);\nbvec4 flags = bvec4(\n(destComponents & PIXELCOMPONENT_RED) != 0,\n(destComponents & PIXELCOMPONENT_GREEN) != 0,\n(destComponents & PIXELCOMPONENT_BLUE) != 0,\n(destComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(destPixel, vec4(srcPixel[srcComponentId]), flags);\n}'},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D image;\nuniform int pixelComponents;\nuniform float value;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nbvec4 flags = bvec4(\n(pixelComponents & PIXELCOMPONENT_RED) != 0,\n(pixelComponents & PIXELCOMPONENT_GREEN) != 0,\n(pixelComponents & PIXELCOMPONENT_BLUE) != 0,\n(pixelComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(pixel, vec4(value), flags);\n}'},function(e,t){e.exports="uniform float value;\nvoid main()\n{\ncolor = vec4(value);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main() {\nivec2 pos = threadLocation();\npos.y = int(texSize.y) - 1 - pos.y;\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\ncolor = threadPixel(image);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 last = outputSize() - ivec2(1);\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = texelFetch(image, thread, 0);\nvec4 p1 = texelFetch(image, min(next1, last), 0);\nvec4 p2 = texelFetch(image, min(next2, last), 0);\nvec4 p3 = texelFetch(image, min(next3, last), 0);\nvec4 pmax = max(max(p0, p1), max(p2, p3));\nvec4 pmin = min(min(p0, p1), min(p2, p3));\ncolor = vec4(pmax.r, pmin.g, pmax.r - pmin.g, p0.a);\n}"},function(e,t,i){"use strict";i.r(t),i.d(t,"Speedy",(function(){return Ti}));var n=i(1),r=i(6),s=i(0);const o=navigator.userAgent.includes("Firefox");class a{static getError(e){const t=e.getError(),i=["NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL"].find(i=>e[i]==t)||"Unknown";return new s.e(i)}static createShader(e,t,i){const n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),n}static createProgram(e,t,i){const n=e.createProgram(),r=a.createShader(e,e.VERTEX_SHADER,t),o=a.createShader(e,e.FRAGMENT_SHADER,i);if(e.attachShader(n,r),e.attachShader(n,o),e.linkProgram(n),e.validateProgram(n),!e.getProgramParameter(n,e.LINK_STATUS)&&!e.isContextLost()){const t=[e.getShaderInfoLog(o),e.getShaderInfoLog(r),e.getProgramInfoLog(n)];e.deleteProgram(n),e.deleteShader(o),e.deleteShader(r);const a=e=>Math.max(0,2-Math.floor(Math.log10(e))),c=e=>Array(a(e)).fill(" ").join("")+e+". ",l=i.split("\n").map((e,t)=>c(1+t)+e).join("\n");throw new s.e("Can't create shader.\n\n---------- ERROR ----------\n"+t.join("\n")+"\n\n---------- SOURCE CODE ----------\n"+l)}return n}static createTexture(e,t,i){if(t<=0||i<=0)throw new s.f("Invalid dimensions given to createTexture()");const n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.MIRRORED_REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.MIRRORED_REPEAT),e.texImage2D(e.TEXTURE_2D,0,e.RGBA8,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_2D,null),n}static destroyTexture(e,t){return e.deleteTexture(t),null}static uploadToTexture(e,t,i,n,r,s=0){return e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,s,e.RGBA8,i,n,0,e.RGBA,e.UNSIGNED_BYTE,r),e.bindTexture(e.TEXTURE_2D,null),t}static copyToTexture(e,t,i,n,r,s,o,a=0){return e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,i),e.bindFramebuffer(e.FRAMEBUFFER,t),e.copyTexSubImage2D(e.TEXTURE_2D,a,0,0,n,r,s,o),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindTexture(e.TEXTURE_2D,null),i}static generateMipmap(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null)}static bindTextures(e,t,i){const n=Object.keys(t);if(!e.isContextLost()){if(n.length>e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new s.e(`Can't bind ${n.length} textures to a program: max is ${e.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);for(let r=0;r<n.length;r++)e.activeTexture(e.TEXTURE0+r),e.bindTexture(e.TEXTURE_2D,t[n[r]]),e.uniform1i(i[n[r]],r)}}static createFramebuffer(e,t){const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const n=e.checkFramebufferStatus(e.FRAMEBUFFER);if(n!=e.FRAMEBUFFER_COMPLETE){const t=["FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"].filter(t=>e[t]===n)[0]||"unknown error";throw new s.e(`Can't create framebuffer: ${t} (${n})`)}return e.bindFramebuffer(e.FRAMEBUFFER,null),i}static destroyFramebuffer(e,t){return e.deleteFramebuffer(t),null}static clientWaitAsync(e,t,i=0){return this._checkStatus=this._checkStatus||(this._checkStatus=function e(t,i,r,s,c){const l=t.clientWaitSync(i,r,0);l==t.TIMEOUT_EXPIRED?n.a.setZeroTimeout(()=>e.call(this,t,i,r,s,c)):l==t.WAIT_FAILED?o&&t.getError()==t.NO_ERROR?n.a.setZeroTimeout(()=>e.call(this,t,i,r,s,c)):c(a.getError(t)):s()}),new r.a((n,r)=>{this._checkStatus(e,t,i,n,r)})}static getBufferSubDataAsync(e,t,i,n,r,o=0,c=0){const l=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0),d=performance.now();return e.flush(),a.clientWaitAsync(e,l).then(()=>(e.bindBuffer(i,t),e.getBufferSubData(i,n,r,o,c),e.bindBuffer(i,null),performance.now()-d)).catch(e=>{throw new s.g("Can't getBufferSubDataAsync(): error in clientWaitAsync()",e)}).finally(()=>{e.deleteSync(l)})}static readPixelsViaPBO(e,t,i,n,r,o,c=null){const l=e.createBuffer();if(!(t.byteLength>=r*o*4))throw new s.f("Can't read pixels: invalid buffer size");return e.bindBuffer(e.PIXEL_PACK_BUFFER,l),e.bufferData(e.PIXEL_PACK_BUFFER,t.byteLength,e.STREAM_READ),c?(e.bindFramebuffer(e.FRAMEBUFFER,c),e.readPixels(i,n,r,o,e.RGBA,e.UNSIGNED_BYTE,0),e.bindFramebuffer(e.FRAMEBUFFER,null)):e.readPixels(i,n,r,o,e.RGBA,e.UNSIGNED_BYTE,0),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),a.getBufferSubDataAsync(e,l,e.PIXEL_PACK_BUFFER,0,t,0,0).then(e=>e).catch(e=>{throw new s.g("Can't read pixels",e)}).finally(()=>{e.deleteBuffer(l)})}}var c=i(4);class l{constructor(e,t,i){this._gl=e,this._width=Math.max(1,0|t),this._height=Math.max(1,0|i),this._glTexture=a.createTexture(this._gl,this._width,this._height),this._hasMipmaps=!1}release(){if(null===this._glTexture)throw new s.g("The SpeedyTexture has already been released");return this._glTexture=a.destroyTexture(this._gl,this._glTexture),this._width=this._height=0,this._hasMipmaps=!1,null}upload(e){return this._hasMipmaps=!1,a.uploadToTexture(this._gl,this._glTexture,this._width,this._height,e,0),this}generatePyramid(e,t=!0){if(this._hasMipmaps)return this;if(n.a.assert(e.gl===this._gl),a.generateMipmap(this._gl,this._glTexture),this._hasMipmaps=!0,t){let t=this,i=null;for(let n=1;n<c.j;n++)i=e.programs.pyramids(n-1),t=i.reduce(t),i.exportTo(this,n)}return this}discardPyramid(){this._hasMipmaps=!1}get glTexture(){return this._glTexture}get width(){return this._width}get height(){return this._height}get gl(){return this._gl}}const d=Object.freeze({position:0,texCoord:1}),f=Object.freeze({sampler2D:"uniform1i",float:"uniform1f",int:"uniform1i",uint:"uniform1ui",bool:"uniform1i",vec2:"uniform2f",vec3:"uniform3f",vec4:"uniform4f",ivec2:"uniform2i",ivec3:"uniform3i",ivec4:"uniform4i",uvec2:"uniform2ui",uvec3:"uniform3ui",uvec4:"uniform4ui",bvec2:"uniform2i",bvec3:"uniform3i",bvec4:"uniform4i"}),h=new WeakMap;class p extends Function{constructor(e,t,i={}){return super("...args","return this._self._call(...args)"),this._self=this.bind(this),this._self._init(e,t,i),this._self}_init(e,t,i){if(this._gl=e,this._program=a.createProgram(e,t.vertexSource,t.fragmentSource),this._geometry=this._createGeometry(e),this._argnames=t.arguments,this._argIsArray=new Array(this._argnames.length).fill(!1),this._options=Object.freeze({output:[e.drawingBufferWidth,e.drawingBufferHeight],renderToTexture:!0,recycleTexture:!0,pingpong:!1,...i}),this._width=Math.max(1,0|this._options.output[0]),this._height=Math.max(1,0|this._options.output[1]),this._dirtySize=!0,this._uniform=new Map,this._ubo=null,this._texture=this._options.renderToTexture?new Array(this._options.pingpong?2:1).fill(null):[],this._fbo=this._options.renderToTexture?new Array(this._options.pingpong?2:1).fill(null):[],this._textureIndex=0,this._pixelBuffer=new Array(1).fill(null),this._pixelBufferSize=[0,0],this._pboConsumerQueue=new Array(1).fill(0).map((e,t)=>t),this._pboProducerQueue=[],this._options.pingpong&&!this._options.renderToTexture)throw new s.g("Pingpong rendering can only be used when rendering to textures");if(e.isContextLost())throw new s.g("Can't initialize SpeedyProgram: lost context");const n=e.canvas;this._width>n.width&&(n.width=this._width),this._height>n.height&&(n.height=this._height),e.bindAttribLocation(this._program,d.position,t.attributes.position),e.bindAttribLocation(this._program,d.texCoord,t.attributes.texCoord);for(let t=0;t<this._texture.length;t++)this._texture[t]=new l(e,this._width,this._height),this._fbo[t]=a.createFramebuffer(e,this._texture[t].glTexture);e.useProgram(this._program);for(const i of t.uniforms){const n=t.uniformType(i),r=e.getUniformLocation(this._program,i);this._uniform.set(i,new m(n,r))}for(let e=0;e<this._argnames.length;e++){const t=this._argnames[e];if(!this._uniform.has(t)&&(this._argIsArray[e]=this._uniform.has(t+"[0]"),!this._argIsArray[e]))throw new s.g(`Expected uniform "${t}", as declared in the argument list`)}}_call(...e){const t=this._gl,i=this._options,n=this._argnames;if(e.length!=n.length)throw new s.f("Can't run shader: incorrect number of arguments");if(t.isContextLost())return this._texture[this._textureIndex];if(t.useProgram(this._program),this._dirtySize){const e=this._uniform.get("texSize");t.uniform2f(e.location,this._width,this._height),this._dirtySize=!1}for(let t=0,i=0;t<e.length;t++){const r=n[t];if(this._argIsArray[t]){const n=e[t];if(this._uniform.has(`${r}[${n.length}]`))throw new s.f(`Can't run shader: too few elements in the "${r}" array`);for(let e=0,t=void 0;void 0!==(t=this._uniform.get(`${r}[${e}]`));e++)i=this._setUniform(t,n[e],i)}else{const n=this._uniform.get(r);i=this._setUniform(n,e[t],i)}}null!==this._ubo&&this._ubo.update();const r=i.renderToTexture?this._fbo[this._textureIndex]:null;if(t.bindFramebuffer(t.FRAMEBUFFER,r),t.viewport(0,0,this._width,this._height),t.drawArrays(t.TRIANGLE_STRIP,0,4),t.bindFramebuffer(t.FRAMEBUFFER,null),null!==r){const e=this._texture[this._textureIndex];e.discardPyramid();let n=e;return i.recycleTexture||(n=new l(t,this._width,this._height),a.copyToTexture(t,r,n.glTexture,0,0,this._width,this._height)),this._pingpong(),n}return null}resize(e,t){const i=this._gl,n=this._width,r=this._height;if(i.isContextLost())return;if(e=Math.max(1,0|e),t=Math.max(1,0|t),e===this._width&&t===this._height)return;this._width=e,this._height=t,this._dirtySize=!0,this._reallocatePixelBuffers(e,t);const s=this._texture.length,o=s>0?new Uint8Array(e*t*4):null;for(let c=0;c<s;c++){const s=new l(i,e,t);s.upload(o),a.copyToTexture(i,this._fbo[c],s.glTexture,0,0,Math.min(e,n),Math.min(t,r)),i.bindFramebuffer(i.FRAMEBUFFER,this._fbo[c]),i.framebufferTexture2D(i.FRAMEBUFFER,i.COLOR_ATTACHMENT0,i.TEXTURE_2D,s.glTexture,0),i.bindFramebuffer(i.FRAMEBUFFER,null),this._texture[c].release(),this._texture[c]=s}}clear(e=0,t=0,i=0,n=0){const r=this._gl,s=this._texture[this._textureIndex];if(r.isContextLost())return s;for(let s=0;s<this._fbo.length;s++)r.bindFramebuffer(r.FRAMEBUFFER,this._fbo[s]),r.viewport(0,0,this._width,this._height),r.clearColor(e,t,i,n),r.clear(r.COLOR_BUFFER_BIT),r.bindFramebuffer(r.FRAMEBUFFER,null);return this._pingpong(),s}readPixelsSync(e=0,t=0,i=this._width,n=this._height){const r=this._gl;if(!this._options.renderToTexture)throw new s.g("Can't read pixels from a SpeedyProgram that doesn't render to an internal texture");return r.isContextLost()||(i=Math.max(0,Math.min(i,this._width)),n=Math.max(0,Math.min(n,this._height)),e=Math.max(0,Math.min(e,i-1)),t=Math.max(0,Math.min(t,n-1)),null==this._pixelBuffer[0]&&this._reallocatePixelBuffers(this._width,this._height),r.bindFramebuffer(r.FRAMEBUFFER,this._fbo[this._textureIndex]),r.readPixels(e,t,i,n,r.RGBA,r.UNSIGNED_BYTE,this._pixelBuffer[0]),r.bindFramebuffer(r.FRAMEBUFFER,null)),this._pixelBuffer[0]}readPixelsAsync(e=!0,t=0,i=0,n=this._width,o=this._height){const c=this._gl;if(!this._options.renderToTexture)throw new s.g("Can't read pixels from a SpeedyProgram that doesn't render to an internal texture");if(c.isContextLost())return r.a.resolve(this._pixelBuffer[0]);if(n=Math.max(0,Math.min(n,this._width)),o=Math.max(0,Math.min(o,this._height)),t=Math.max(0,Math.min(t,n-1)),i=Math.max(0,Math.min(i,o-1)),null==this._pixelBuffer[0]&&this._reallocatePixelBuffers(this._width,this._height),!e)return a.readPixelsViaPBO(c,this._pixelBuffer[0],t,i,n,o,this._fbo[this._textureIndex]).then(()=>this._pixelBuffer[0]);if(this._pboProducerQueue.length>0){const e=this._pboProducerQueue.shift();a.readPixelsViaPBO(c,this._pixelBuffer[e],t,i,n,o,this._fbo[this._textureIndex]).then(()=>{this._pboConsumerQueue.push(e)})}else this._waitForQueueNotEmpty(this._pboProducerQueue).then(()=>{const e=this._pboProducerQueue.shift();a.readPixelsViaPBO(c,this._pixelBuffer[e],t,i,n,o,this._fbo[this._textureIndex]).then(()=>{this._pboConsumerQueue.push(e)})}).turbocharge();if(this._pboConsumerQueue.length>0){const e=this._pboConsumerQueue.shift();return new r.a(t=>{t(this._pixelBuffer[e]),this._pboProducerQueue.push(e)})}return new r.a(e=>{this._waitForQueueNotEmpty(this._pboConsumerQueue).then(()=>{const t=this._pboConsumerQueue.shift();e(this._pixelBuffer[t]),this._pboProducerQueue.push(t)}).turbocharge()})}setUBO(e,t){null===this._ubo&&(this._ubo=new _(this._gl,this._program)),this._ubo.set(e,t)}exportTo(e,t=0){const i=this._gl,r=this._fbo[this._textureIndex],o=1<<(t|=0),c=Math.max(1,Math.floor(e.width/o)),l=Math.max(1,Math.floor(e.height/o));if(n.a.assert(this._width===c&&this._height===l),this._options.pingpong)throw new s.h("Can't copy the output of a pingpong-enabled SpeedyProgram");a.copyToTexture(i,r,e.glTexture,0,0,this._width,this._height,t)}get width(){return this._width}get height(){return this._height}_pingpong(){this._options.pingpong&&(this._textureIndex=1-this._textureIndex)}_setUniform(e,t,i){const n=this._gl;if("sampler2D"==e.type){if(i>n.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new s.h(`Can't bind ${i} textures to a program: max is ${n.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);if(t===this._texture[this._textureIndex])throw new s.h("Can't run shader: cannot use its output texture as an input to itself");if(null==t)throw new s.f("Can't run shader: cannot use null as an input texture");n.activeTexture(n.TEXTURE0+i),n.bindTexture(n.TEXTURE_2D,t.glTexture),n.uniform1i(e.location,i),i++}else if("number"==typeof t||"boolean"==typeof t)n[e.setter](e.location,t);else{if(!Array.isArray(t)||t.length!==e.length)throw new s.f(`Can't run shader: unrecognized argument "${t}"`);n[e.setter](e.location,...t)}return i}_createGeometry(e){if(h.has(e))return h.get(e);const t=e.createVertexArray(),i=[e.createBuffer(),e.createBuffer()];e.bindVertexArray(t),e.bindBuffer(e.ARRAY_BUFFER,i[0]),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(d.position),e.vertexAttribPointer(d.position,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,i[1]),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(d.texCoord),e.vertexAttribPointer(d.texCoord,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,null);const n=new u(t,i[0],i[1]);return h.set(e,n),n}_reallocatePixelBuffers(e,t){if(!(e*t<=this._pixelBufferSize[0]*this._pixelBufferSize[1])){this._pixelBufferSize[0]=e,this._pixelBufferSize[1]=t;for(let i=0;i<1;i++){const n=this._pixelBuffer[i];this._pixelBuffer[i]=new Uint8Array(e*t*4),this._pixelBuffer[i].fill(255,0,4),n&&(n.length>this._pixelBuffer[i].length?this._pixelBuffer[i].set(n.slice(0,this._pixelBuffer[i].length)):this._pixelBuffer[i].set(n))}}}_waitForQueueNotEmpty(e){return new r.a(t=>{!function i(){e.length>0?t():setTimeout(i,0)}()})}}function u(e,t,i){return this.vao=e,this.vbo=Object.freeze({position:t,texCoord:i}),Object.freeze(this)}function m(e,t){if(this.type=String(e),!Object.prototype.hasOwnProperty.call(f,this.type))throw new s.h("Unsupported uniform type: "+this.type);return this.location=t,this.setter=f[this.type],this.length=0|this.setter.match(/^uniform(\d)/)[1],Object.freeze(this)}function _(e,t){this._gl=e,this._program=t,this._nextIndex=0,this._ubo=Object.create(null)}_.prototype.set=function(e,t){const i=this._gl;void 0===this._ubo[e]&&(this._ubo[e]={buffer:i.createBuffer(),blockBindingIndex:this._nextIndex++,blockIndex:null,data:null});const n=this._ubo[e];if(null===n.blockIndex){const t=i.getUniformBlockIndex(this._program,e);i.uniformBlockBinding(this._program,t,n.blockBindingIndex),n.blockIndex=t}n.data=t},_.prototype.update=function(){const e=this._gl;for(const t in this._ubo){const i=this._ubo[t];e.bindBuffer(e.UNIFORM_BUFFER,i.buffer),e.bufferData(e.UNIFORM_BUFFER,i.data.byteLength,e.DYNAMIC_DRAW),e.bufferData(e.UNIFORM_BUFFER,i.data,e.DYNAMIC_DRAW),e.bindBufferBase(e.UNIFORM_BUFFER,i.blockBindingIndex,i.buffer),e.bindBuffer(e.UNIFORM_BUFFER,null)}};class x{constructor(e,t,i){this._gpu=e,this._width=t,this._height=i}declare(e,t,i={}){return Object.defineProperty(this,e,{get:(()=>{const n="__k_"+e;return function(){return this[n]||(this[n]=this._createProgram(t,i))}.bind(this)})()}),this}compose(e,...t){return Object.defineProperty(this,e,{get:(()=>{const i="__c_"+e;return function(){return this[i]||(this[i]=2==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[1](t[0](e,...i),...i)}))():3==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[2](t[1](t[0](e,...i),...i),...i)}))():4==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[3](t[2](t[1](t[0](e,...i),...i),...i),...i)}))():(()=>(t=t.map(e=>this[e]),function(e,...i){return t.reduce((e,t)=>t(e,...i),e)}))())}.bind(this)})()}),this}get program(){return this._helpers||(this.helpers={hasTextureSize:(e,t)=>({output:[Math.max(1,0|e),Math.max(1,0|t)]}),displaysGraphics:()=>({renderToTexture:!1}),doesNotRecycleTextures:()=>({recycleTexture:!1}),usesPingpongRendering:()=>({pingpong:!0})})}_createProgram(e,t={}){return new p(this._gpu.gl,e,{output:[this._width,this._height],...t})}}var v=i(2),g=i(5);const y=Object(v.b)("utils/identity.glsl").withArguments("image"),S=Object(v.b)("utils/flip-y.glsl").withArguments("image"),b=Object(v.b)("utils/fill.glsl").withArguments("value"),w=Object(v.b)("utils/fill-components.glsl").withArguments("image","pixelComponents","value"),O=Object(v.b)("utils/copy-components.glsl").withArguments("dest","src","destComponents","srcComponentId"),A=Object(v.b)("utils/scan-minmax2d.glsl").withArguments("image","iterationNumber");class E extends x{constructor(e,t,i){super(e,t,i),this.declare("identity",y).declare("output",S,{...this.program.displaysGraphics()}).declare("clone",y,{...this.program.doesNotRecycleTextures()}).declare("flipY",S).declare("fill",b).declare("fillComponents",w).declare("_copyComponents",O).declare("_scanMinMax2D",A,{...this.program.usesPingpongRendering()})}scanMax(e,t){const i=this._scanMinMax(e,t);return this.copyComponents(e,i,t,g.d.RED)}scanMin(e,t){const i=this._scanMinMax(e,t);return this.copyComponents(e,i,t,g.d.GREEN)}copyComponents(e,t,i,n){if(!g.a.hasOwnProperty(n))throw new s.f("Invalid srcComponent: "+n);const r=g.a[n];return this._copyComponents(e,t,i,r)}_scanMinMax(e,t){const i=0|Math.ceil(Math.log2(Math.max(this._width,this._height)));let n=this.copyComponents(e,e,g.d.ALL,t);for(let e=0;e<i;e++)n=this._scanMinMax2D(n,e);return n}}const T=Object(v.b)("colors/rgb2grey.glsl").withArguments("image");class I extends x{constructor(e,t,i){super(e,t,i),this.declare("rgb2grey",T)}}var M=i(3),L=i(8);const R=Object(v.b)("filters/fast-median.glsl").withArguments("image").withDefines({WINDOW_SIZE:3}),P=Object(v.b)("filters/fast-median.glsl").withArguments("image").withDefines({WINDOW_SIZE:5}),k=e=>Math.max(1,e/6);class C extends x{constructor(e,t,i){super(e,t,i),this.compose("gauss3","_gauss3x","_gauss3y").compose("gauss5","_gauss5x","_gauss5y").compose("gauss7","_gauss7x","_gauss7y").compose("gauss9","_gauss9x","_gauss9y").compose("gauss11","_gauss11x","_gauss11y").compose("box3","_box3x","_box3y").compose("box5","_box5x","_box5y").compose("box7","_box7x","_box7y").compose("box9","_box9x","_box9y").compose("box11","_box11x","_box11y").declare("median3",R).declare("median5",P).declare("median7",Object(L.median)(7)).compose("dog16_1","_dog16_1x","_dog16_1y").declare("texConv2D3",Object(M.texConv2D)(3),{...this.program.usesPingpongRendering()}).declare("texConv2D5",Object(M.texConv2D)(5),{...this.program.usesPingpongRendering()}).declare("texConv2D7",Object(M.texConv2D)(7),{...this.program.usesPingpongRendering()}).compose("texConvXY3","texConvX3","texConvY3").declare("texConvX3",Object(M.texConvX)(3)).declare("texConvY3",Object(M.texConvY)(3)).compose("texConvXY5","texConvX5","texConvY5").declare("texConvX5",Object(M.texConvX)(5)).declare("texConvY5",Object(M.texConvY)(5)).compose("texConvXY7","texConvX7","texConvY7").declare("texConvX7",Object(M.texConvX)(7)).declare("texConvY7",Object(M.texConvY)(7)).compose("texConvXY9","texConvX9","texConvY9").declare("texConvX9",Object(M.texConvX)(9)).declare("texConvY9",Object(M.texConvY)(9)).compose("texConvXY11","texConvX11","texConvY11").declare("texConvX11",Object(M.texConvX)(11)).declare("texConvY11",Object(M.texConvY)(11)).declare("createKernel3x3",Object(M.createKernel2D)(3),{...this.program.hasTextureSize(3,3),...this.program.doesNotRecycleTextures()}).declare("createKernel5x5",Object(M.createKernel2D)(5),{...this.program.hasTextureSize(5,5),...this.program.doesNotRecycleTextures()}).declare("createKernel7x7",Object(M.createKernel2D)(7),{...this.program.hasTextureSize(7,7),...this.program.doesNotRecycleTextures()}).declare("createKernel3x1",Object(M.createKernel1D)(3),{...this.program.hasTextureSize(3,1),...this.program.doesNotRecycleTextures()}).declare("createKernel5x1",Object(M.createKernel1D)(5),{...this.program.hasTextureSize(5,1),...this.program.doesNotRecycleTextures()}).declare("createKernel7x1",Object(M.createKernel1D)(7),{...this.program.hasTextureSize(7,1),...this.program.doesNotRecycleTextures()}).declare("createKernel9x1",Object(M.createKernel1D)(9),{...this.program.hasTextureSize(9,1),...this.program.doesNotRecycleTextures()}).declare("createKernel11x1",Object(M.createKernel1D)(11),{...this.program.hasTextureSize(11,1),...this.program.doesNotRecycleTextures()}).declare("_gauss3x",Object(M.convX)([.25,.5,.25])).declare("_gauss3y",Object(M.convY)([.25,.5,.25])).declare("_gauss5x",Object(M.convX)([.05,.25,.4,.25,.05])).declare("_gauss5y",Object(M.convY)([.05,.25,.4,.25,.05])).declare("_gauss7x",Object(M.convX)(n.a.gaussianKernel(k(7),7))).declare("_gauss7y",Object(M.convY)(n.a.gaussianKernel(k(7),7))).declare("_gauss9x",Object(M.convX)(n.a.gaussianKernel(k(9),9))).declare("_gauss9y",Object(M.convY)(n.a.gaussianKernel(k(9),9))).declare("_gauss11x",Object(M.convX)(n.a.gaussianKernel(k(11),11))).declare("_gauss11y",Object(M.convY)(n.a.gaussianKernel(k(11),11))).declare("_box3x",Object(M.convX)([1,1,1],1/3)).declare("_box3y",Object(M.convY)([1,1,1],1/3)).declare("_box5x",Object(M.convX)([1,1,1,1,1],.2)).declare("_box5y",Object(M.convY)([1,1,1,1,1],.2)).declare("_box7x",Object(M.convX)([1,1,1,1,1,1,1],1/7)).declare("_box7y",Object(M.convY)([1,1,1,1,1,1,1],1/7)).declare("_box9x",Object(M.convX)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box9y",Object(M.convY)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box11x",Object(M.convX)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_box11y",Object(M.convY)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_dog16_1x",Object(M.convX)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725])).declare("_dog16_1y",Object(M.convY)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725]))}}const D=Object(v.b)("keypoints/fast9lg.glsl").withArguments("image","threshold"),z=Object(v.b)("keypoints/fast7.glsl").withArguments("image","threshold"),N=Object(v.b)("keypoints/fast5.glsl").withArguments("image","threshold"),K=Object(v.b)("keypoints/fast-score16.glsl").withArguments("image","threshold"),F=Object(v.b)("keypoints/fast-score12.glsl").withArguments("image","threshold"),j=Object(v.b)("keypoints/fast-score8.glsl").withArguments("image","threshold"),B=Object(v.b)("keypoints/multiscale-fast.glsl").withArguments("pyramid","threshold","numberOfOctaves","lodStep"),U=Object(v.b)("keypoints/multiscale-fast.glsl").withArguments("pyramid","threshold","numberOfOctaves","lodStep").withDefines({USE_HARRIS_SCORE:1}),X=Object(v.b)("keypoints/multiscale-harris.glsl").withArguments("pyramid","windowSize","numberOfOctaves","lodStep","sobelDerivatives"),$=Object(v.b)("keypoints/harris-cutoff.glsl").withArguments("corners","maxScore","quality"),q=Object(v.b)("keypoints/brisk.glsl").withArguments("image","layerA","layerB","scaleA","scaleB","lgM","h"),G=Object(v.b)("keypoints/orb-descriptor.glsl").withArguments("pyramid","encodedCorners","extraSize","encoderLength"),Y=Object(v.b)("keypoints/nonmax-suppression.glsl").withArguments("image"),W=Object(v.b)("keypoints/multiscale-suppression.glsl").withArguments("image","lodStep"),Q=Object(v.b)("keypoints/samescale-suppression.glsl").withArguments("image"),H=Object(v.b)("filters/multiscale-sobel.glsl").withArguments("pyramid","lod"),V=Object(v.b)("keypoints/orientation-via-centroid.glsl").withArguments("pyramid","encodedKeypoints","patchRadius","descriptorSize","extraSize","encoderLength");class Z extends x{constructor(e,t,i){super(e,t,i),this.compose("fast9","_fast9","_fastScore16").declare("_fast9",D).declare("_fastScore16",K).compose("fast7","_fast7","_fastScore12").declare("_fast7",z).declare("_fastScore12",F).compose("fast5","_fast5","_fastScore8").declare("_fast5",N).declare("_fastScore8",j).declare("multiscaleFast",B).declare("multiscaleFastWithHarris",U).declare("brisk",q).declare("multiscaleHarris",X).declare("harrisCutoff",$).declare("_orb",G).declare("nonmaxSuppression",Y).declare("multiscaleSuppression",W).declare("samescaleSuppression",Q).declare("multiscaleSobel",H,{...this.program.doesNotRecycleTextures()}).declare("_orientationViaCentroid",V)}orb(e,t,i,r,s){return n.a.assert(32===i),this._orb.resize(s,s),this._orb(e,t,r,s)}orientationViaCentroid(e,t,i,n,r,s){return this._orientationViaCentroid.resize(s,s),this._orientationViaCentroid(e,t,i,n,r,s)}}class J extends class{constructor(){}get data(){return null}get size(){return 0}}{constructor(e){super(),this._data=e,this._size=e.length}get data(){return this._data}get size(){return this._size}}const ee=new Uint8Array([]);class te{constructor(e,t,i=0,n=0,r=0,s=0,o=null,a=null){this._x=+e,this._y=+t,this._lod=+i,this._rotation=+n,this._score=+r,this._scale=Math.pow(2,+i),this._flags=0|s,this._extraBytes=o||ee,this._descriptorBytes=a||ee}toString(){return`(${this._x},${this._y})`}get x(){return this._x}get y(){return this._y}get lod(){return this._lod}get scale(){return this._scale}get rotation(){return this._rotation}get score(){return this._score}get flags(){return this._flags}}class ie extends te{constructor(e,t){super(e._x,e._y,e._lod,e._rotation,e._score,e._flags,e._extraBytes,e._descriptorBytes),this._descriptor=t(this._descriptorBytes)}get descriptor(){return this._descriptor}}const ne=c.i/4,re=[32,32],se=Object(v.b)("encoders/encode-keypoint-offsets.glsl").withArguments("image","imageSize").withDefines({MAX_ITERATIONS:re[0]}),oe=Object(v.b)("encoders/encode-keypoint-long-offsets.glsl").withArguments("offsetsImage","imageSize").withDefines({MAX_ITERATIONS:re[1]}),ae=Object(v.b)("encoders/encode-keypoints.glsl").withArguments("offsetsImage","encodedKeypoints","imageSize","passId","numPasses","descriptorSize","extraSize","encoderLength"),ce=Object(v.b)("encoders/resize-encoded-keypoints.glsl").withArguments("inputTexture","inputDescriptorSize","inputExtraSize","inputEncoderLength","outputDescriptorSize","outputExtraSize","outputEncoderLength"),le=Object(v.b)("utils/identity.glsl").withArguments("image"),de=Object(v.b)("encoders/upload-keypoints.glsl").withArguments("keypointCount","encoderLength","descriptorSize","extraSize").withDefines({KEYPOINT_BUFFER_LENGTH:1024});class fe extends x{constructor(e,t,i){super(e,t,i),this.declare("_encodeKeypointSkipOffsets",se).declare("_encodeKeypointLongSkipOffsets",oe,{...this.program.usesPingpongRendering()}).declare("_encodeKeypoints",ae,{...this.program.hasTextureSize(16,16),...this.program.usesPingpongRendering()}).declare("_resizeEncodedKeypoints",ce,{...this.program.hasTextureSize(16,16)}).declare("_downloadKeypoints",le,{...this.program.hasTextureSize(16,16)}).declare("_uploadKeypoints",de,{...this.program.hasTextureSize(16,16)}),this._encoderLength=16,this._keypointCapacity=256/c.i|0,this._uploadBuffer=null}get encoderLength(){return this._encoderLength}optimize(e,t,i){const n=Math.ceil(e),r=this._minimumEncoderLength(n,t,i),s=this._encoderLength;return this._encoderLength=r,this._keypointCapacity=n,r-s!=0}reserveSpace(e,t,i){return this._minimumEncoderLength(e,t,i)>this._encoderLength&&this.optimize(e,t,i)}encodeKeypoints(e,t,i){const n=this._encoderLength,r=[this._width,this._height];let s=this._encodeKeypointSkipOffsets(e,r);for(let e=0;e<2;e++)s=this._encodeKeypointLongSkipOffsets(s,r);const o=ne,a=Math.max(16,Math.ceil(Math.sqrt(this._keypointCapacity*o)));this._encodeKeypoints.resize(a,a);let c=this._encodeKeypoints.clear(0,0,0,0);for(let e=0;e<8;e++)c=this._encodeKeypoints(s,c,r,e,8,0,0,a);return this._resizeEncodedKeypoints.resize(n,n),this._resizeEncodedKeypoints(c,0,0,a,t,i,n)}decodeKeypoints(e,t,i){const n=(c.i+t+i)/4;let r,s,o,a,l,d,f,h,p,u;const m=[],_=this._encoderLength,x=_*_*n*4,v=Math.min(e.length,x);for(let _=0;_<v&&(r=e[_+1]<<8|e[_],s=e[_+3]<<8|e[_+2],!(r>=65535&&s>=65535));_+=4*n)r+s==0&&0==e[_+6]||(r/=c.b,s/=c.b,d=e[_+7],p=e[_+4]<255,o=p?-c.f+(c.f+c.j)*e[_+4]/255:0,u=d&0!=c.e,a=u?(2*e[_+5]/255-1)*Math.PI:0,l=e[_+6]/255,f=i>0?new Uint8Array(e.slice(8+_,8+_+i)):null,h=t>0?new Uint8Array(e.slice(8+_+i,8+_+i+t)):null,t>0&&h.length<t||i>0&&f.length<i||m.push(new te(r,s,o,a,l,d,f,h)));return m}downloadEncodedKeypoints(e,t=!0){return this._downloadKeypoints.resize(this._encoderLength,this._encoderLength),this._downloadKeypoints(e),this._downloadKeypoints.readPixelsAsync(t).catch(e=>new s.g("Can't download encoded keypoint texture",e))}uploadKeypoints(e,t,i){const r=e.length;if(r>1024)throw new s.h(`Can't upload ${r} keypoints: maximum is currently 1024`);if(null===this._uploadBuffer){const e=4*Float32Array.BYTES_PER_ELEMENT,t=new ArrayBuffer(1024*e);n.a.assert(t.byteLength<=16384),this._uploadBuffer=new Float32Array(t)}for(let t=0;t<r;t++){const i=e[t],n=4*t;this._uploadBuffer[n]=+i.x||0,this._uploadBuffer[n+1]=+i.y||0,this._uploadBuffer[n+2]=+i.lod||0,this._uploadBuffer[n+3]=+i.score||0}return this.reserveSpace(r,t,i),this._uploadKeypoints.resize(this._encoderLength,this._encoderLength),this._uploadKeypoints.setUBO("KeypointBuffer",this._uploadBuffer),this._uploadKeypoints(r,this._encoderLength,t,i)}_minimumEncoderLength(e,t,i){const n=Math.max(0,Math.min(Math.ceil(e),8192)),r=Math.ceil((c.i+t+i)/4),s=Math.ceil(Math.sqrt(n*r));return Math.max(16,Math.min(s,300))}}const he=Object(v.b)("pyramids/upsample2.glsl").withArguments("image"),pe=Object(v.b)("pyramids/downsample2.glsl").withArguments("image");class ue extends x{constructor(e,t,i){super(e,t,i),this.declare("_smoothX",Object(M.convX)([.05,.25,.4,.25,.05])).declare("_smoothY",Object(M.convY)([.05,.25,.4,.25,.05])).declare("_smoothX2",Object(M.convX)([.1,.5,.8,.5,.1]),this.program.hasTextureSize(2*this._width,2*this._height)).declare("_smoothY2",Object(M.convY)([.1,.5,.8,.5,.1],.5),this.program.hasTextureSize(2*this._width,2*this._height)).declare("_upsample2",he,this.program.hasTextureSize(2*this._width,2*this._height)).declare("_downsample2",pe,this.program.hasTextureSize(Math.max(1,Math.floor(this._width/2)),Math.max(1,Math.floor(this._height/2)))),this._lastOperation=null}reduce(e){const t=this._smoothY(this._smoothX(e)),i=this._downsample2(t);return this._lastOperation=this._downsample2,i}expand(e){const t=this._upsample2(e),i=this._smoothY2(this._smoothX2(t));return this._lastOperation=this._smoothY2,i}exportTo(e,t){if(null===this._lastOperation)throw new s.g("Can't export pyramid level before generating it");this._lastOperation.exportTo(e,t)}}const me=Object(v.b)("enhancements/normalize-image.glsl").withArguments("minmax2d","minValue","maxValue").withDefines({GREYSCALE:1}),_e=Object(v.b)("enhancements/normalize-image.glsl").withArguments("minmax2dRGB","minValue","maxValue"),xe=Object(v.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset","decay"),ve=Object(v.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset","decay").withDefines({GREYSCALE:1});class ge extends x{constructor(e,t,i){super(e,t,i),this.declare("_normalizeGreyscaleImage",me).declare("_normalizeColoredImage",_e).declare("_nightvision",xe).declare("_nightvisionGreyscale",ve).compose("_illuminationMapLo","_illuminationMapLoX","_illuminationMapLoY").declare("_illuminationMapLoX",Object(M.convX)(n.a.gaussianKernel(80,31))).declare("_illuminationMapLoY",Object(M.convY)(n.a.gaussianKernel(80,31))).compose("_illuminationMap","_illuminationMapX","_illuminationMapY").declare("_illuminationMapX",Object(M.convX)(n.a.gaussianKernel(80,63))).declare("_illuminationMapY",Object(M.convY)(n.a.gaussianKernel(80,63))).compose("_illuminationMapHi","_illuminationMapHiX","_illuminationMapHiY").declare("_illuminationMapHiX",Object(M.convX)(n.a.gaussianKernel(80,255))).declare("_illuminationMapHiY",Object(M.convY)(n.a.gaussianKernel(80,255)))}normalizeGreyscaleImage(e,t=0,i=255){const n=this._gpu.programs.utils._scanMinMax(e,g.d.GREEN);return this._normalizeGreyscaleImage(n,Math.min(t,i),Math.max(t,i))}normalizeColoredImage(e,t=0,i=255){const n=this._gpu,r=new Array(3);r[0]=n.programs.utils.clone(n.programs.utils._scanMinMax(e,g.d.RED)),r[1]=n.programs.utils.clone(n.programs.utils._scanMinMax(e,g.d.GREEN)),r[2]=n.programs.utils._scanMinMax(e,g.d.BLUE);const s=this._normalizeColoredImage(r,Math.min(t,i),Math.max(t,i));return r[1].release(),r[0].release(),s}nightvision(e,t=.5,i=.5,n=0,r="medium",o=!1){let a=null;if("medium"==r)a=this._illuminationMap(e);else if("high"==r)a=this._illuminationMapHi(e);else{if("low"!=r)throw new s.f(`Invalid quality level for nightvision: "${r}"`);a=this._illuminationMapLo(e)}return(o?this._nightvisionGreyscale:this._nightvision)(e,a,t,i,n)}}const ye=Object(v.b)("trackers/lk.glsl").withArguments("nextPyramid","prevPyramid","prevKeypoints","windowSize","depth","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:21}),Se=Object(v.b)("trackers/lk-discard.glsl").withArguments("pyramid","encodedKeypoints","windowSize","discardThreshold","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:21}),be=Object(v.b)("trackers/lk.glsl").withArguments("nextPyramid","prevPyramid","prevKeypoints","windowSize","depth","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:15}),we=Object(v.b)("trackers/lk-discard.glsl").withArguments("pyramid","encodedKeypoints","windowSize","discardThreshold","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:15}),Oe=Object(v.b)("trackers/lk.glsl").withArguments("nextPyramid","prevPyramid","prevKeypoints","windowSize","depth","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:11}),Ae=Object(v.b)("trackers/lk-discard.glsl").withArguments("pyramid","encodedKeypoints","windowSize","discardThreshold","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:11}),Ee=Object(v.b)("trackers/lk.glsl").withArguments("nextPyramid","prevPyramid","prevKeypoints","windowSize","depth","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:7}),Te=Object(v.b)("trackers/lk-discard.glsl").withArguments("pyramid","encodedKeypoints","windowSize","discardThreshold","firstKeypointIndex","lastKeypointIndex","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:7});class Ie extends x{constructor(e,t,i){super(e,t,i),this.declare("_lk",ye).declare("_lkSmall",be).declare("_lkSmaller",Oe).declare("_lkSmallest",Ee).declare("_lkDiscard",Se).declare("_lkDiscardSmall",we).declare("_lkDiscardSmaller",Ae).declare("_lkDiscardSmallest",Te)}lk(e,t,i,n,r,s,o,a,l){const d=c.j;r=Math.max(1,Math.min(0|r,d)),n+=(n+1)%2;let f="_lk",h="_lkDiscard";(n=Math.max(5,Math.min(n,21)))<=7?(f="_lkSmallest",h="_lkDiscardSmallest"):n<=11?(f="_lkSmaller",h="_lkDiscardSmaller"):n<=15&&(f="_lkSmall",h="_lkDiscardSmall"),this[f].resize(l,l),this[h].resize(l,l);const p=l*l/((c.i+o+a)/4),u=Math.ceil(Math.max(1,p)/100);let m=i;for(let i=0;i<u;i++){const c=100*i,d=c+100-1;m=this[f](e,t,m,n,r,c,d,o,a,l),m=this[h](e,m,n,s,c,d,o,a,l)}return m}}class Me{constructor(e,t,i){this._gpu=e,this._width=t,this._height=i,this._utils=null,this._colors=null,this._filters=null,this._keypoints=null,this._encoders=null,this._descriptors=null,this._enhancements=null,this._trackers=null,this._pyramids=new Array(c.j).fill(null)}get width(){return this._width}get height(){return this._height}get utils(){return this._utils||(this._utils=new E(this._gpu,this._width,this._height))}get colors(){return this._colors||(this._colors=new I(this._gpu,this._width,this._height))}get filters(){return this._filters||(this._filters=new C(this._gpu,this._width,this._height))}get keypoints(){return this._keypoints||(this._keypoints=new Z(this._gpu,this._width,this._height))}get encoders(){return this._encoders||(this._encoders=new fe(this._gpu,this._width,this._height))}get trackers(){return this._trackers||(this._trackers=new Ie(this._gpu,this._width,this._height))}get enhancements(){return this._enhancements||(this._enhancements=new ge(this._gpu,this._width,this._height))}pyramids(e=0){const t=0|e,i=1<<t;if(t<0||t>=c.j)throw new s.f(`Invalid pyramid level: ${t} (outside of range [0,${c.j-1}])`);return this._pyramids[t]||(this._pyramids[t]=new ue(this._gpu,Math.max(1,Math.floor(this._width/i)),Math.max(1,Math.floor(this._height/i))))}}class Le{constructor(e,t){this._gl=null,this._canvas=null,this._width=0,this._height=0,this._programs=null,this._inputTexture=null,this._inputTextureIndex=0,this._omitGLContextWarning=!1,function(){if("undefined"==typeof WebGL2RenderingContext)throw new s.h("WebGL2 is required by this application, but it's not available in your browser. Please use a different browser.")}(),this._width=Math.max(1,0|e),this._height=Math.max(1,0|t),(this._width>c.h||this._height>c.h)&&(n.a.warning(`Maximum texture size exceeded (using ${this._width} x ${this._height}).`),this._width=Math.min(this._width,c.h),this._height=Math.min(this._height,c.h)),this._setupWebGL()}get gl(){return this._gl}get canvas(){return this._canvas}get programs(){return this._programs}upload(e,t=-1,i=-1){const r=this._gl;if(r.isContextLost())return n.a.warning("Can't upload texture without a WebGL context"),this._inputTexture=null;if(t<0&&(t=r.canvas.width),i<0&&(i=r.canvas.height),0==t||0==i)throw new s.f("Can't upload an image of area 0");if(null===this._inputTexture)r.canvas.width=Math.max(r.canvas.width,t),r.canvas.height=Math.max(r.canvas.height,i),this._inputTexture=Array(4).fill(null).map(e=>new l(r,r.canvas.width,r.canvas.height));else if(t>r.canvas.width||i>r.canvas.height)return n.a.log(`Resizing input texture to ${t} x ${i}`),this._inputTexture.forEach(e=>e.release()),this._inputTexture=null,this.upload(e,t,i);if("HTMLVideoElement"==e.constructor.name&&e.readyState<2){if(null!=this._inputTexture[this._inputTextureIndex])return this._inputTexture[this._inputTextureIndex];n.a.warning("Trying to process a video that isn't ready yet")}this._inputTextureIndex=(1+this._inputTextureIndex)%4;const o=this._inputTexture[this._inputTextureIndex];return o.upload(e),o}loseAndRestoreWebGLContext(e=1){const t=this._gl;if(t.isContextLost())return Promise.reject("Context already lost");const i=t.getExtension("WEBGL_lose_context");if(i)return i.loseContext(),new Promise(t=>{isFinite(e)?setTimeout(()=>{i.restoreContext(),setTimeout(()=>t(),0)},1e3*Math.max(e,0)):t()});throw new s.h("WEBGL_lose_context is unavailable")}loseWebGLContext(){return this._omitGLContextWarning=!0,this.loseAndRestoreWebGLContext(1/0)}_setupWebGL(){const e=this._width,t=this._height;this._programs=null,this._inputTexture=null,this._inputTextureIndex=0,this._omitGLContextWarning=!1,void 0!==this._canvas&&delete this._canvas,this._canvas=function(e,t){if("function"==typeof importScripts&&"undefined"!=typeof WorkerGlobalScope){if("function"!=typeof OffscreenCanvas)throw new s.h("OffscreenCanvas is not available in your browser. Please upgrade.");return new OffscreenCanvas(e,t)}return n.a.createCanvas(e,t)}(e,t),this._canvas.addEventListener("webglcontextlost",e=>{this._omitGLContextWarning||n.a.warning("Lost WebGL context"),e.preventDefault()},!1),this._canvas.addEventListener("webglcontextrestored",e=>{this._omitGLContextWarning||n.a.warning("Restoring WebGL context..."),this._setupWebGL()},!1),this._gl=function(e){const t=e.getContext("webgl2",{premultipliedAlpha:!1,preserveDrawingBuffer:!1,alpha:!0,antialias:!1,depth:!1,stencil:!1});if(!t)throw new s.h("Can't create WebGL2 context. Try in a different browser.");return t}(this._canvas),this._programs=new Me(this,e,t)}}class Re{constructor(){throw new s.a("Namespaces can't be instantiated")}}var Pe=i(7);const ke=Object.freeze({FEATURE_DETECTOR_RESET_CAPACITY:1,...Pe.MatrixMath.MatrixType});class Ce{constructor(e=0,t=0){n.a.assert(e<=c.g),n.a.assert(e%4==0),n.a.assert(t%4==0),this._descriptorSize=e,this._extraSize=t}run(e,t){throw new s.a}download(e,t,i=0){throw new s.a}upload(e,t){return e.programs.encoders.uploadKeypoints(t,this.descriptorSize,this.extraSize)}get extraSize(){return this._extraSize}set extraSize(e){this._extraSize=Math.max(0,0|e),n.a.assert(this._extraSize%4==0)}get descriptorSize(){return this._descriptorSize}set descriptorSize(e){this._descriptorSize=Math.max(0,0|e),n.a.assert(this._descriptorSize%4==0)}}class De{constructor(){this._gain=.85,this._state=600,this._prevState=this._state}estimate(e){const t=Math.max(0,this._state+(this._state-this._prevState)),i=t+this._gain*(e-t);return this._gain=Math.min(.85,this._gain+.3),this._prevState=this._state,this._state=i,Math.round(this._state)}reset(){this._gain=0,this._state=this._prevState=600}get maxGrowth(){return 1.5}}class ze extends class{constructor(){this._subscribers=[]}subscribe(e){this._subscribers.indexOf(e)<0&&this._subscribers.push(e)}unsubscribe(e){this._subscribers=this._subscribers.filter(t=>t!==e)}_notify(e){for(const t of this._subscribers)t(e)}}{constructor(){super(),this._estimator=new De}download(e,t,i,n,r=0){r&0!=ze.RESET_DOWNLOADER_STATE&&this._estimator.reset();const o=0!=(r&ze.USE_BUFFERED_DOWNLOADS);return e.programs.encoders.downloadEncodedKeypoints(t,o).then(t=>{const r=e.programs.encoders.decodeKeypoints(t,i,n),s=this._countDiscardedKeypoints(r),o=this._estimator.estimate(r.length-s),a=Math.max(o,32),c=this._estimator.maxGrowth*a;return e.programs.encoders.optimize(c,i,n),this._notify(r),r}).catch(e=>{throw new s.g("Can't download keypoints",e)})}_countDiscardedKeypoints(e){let t,i=0;for(t=e.length-1;t>=0;t--)i+=0!=(e[t].flags&c.c)|0;return i}}ze.RESET_DOWNLOADER_STATE=1,ze.USE_BUFFERED_DOWNLOADS=2;const Ne=Object.freeze({gain:.9,offset:.5,decay:0,quality:"low"});class Ke extends Ce{constructor(){super(0,0),this._enhancements=null,this._downloader=new ze}run(e,t){const i=this._enhanceTexture(e,t);return this._detect(e,i)}download(e,t,i=0){return this._downloader.download(e,t,this.descriptorSize,this.extraSize,i)}setEnhancements(e){this._enhancements=!0===e?Ne:"object"==typeof e&&null!==e?Object.assign({},Ne,e):null}_detect(e,t){throw new s.a}_enhanceTexture(e,t){let i=t;const n=this._enhancements;return null!==n&&(i=e.programs.enhancements.nightvision(i,n.gain,n.offset,n.decay,n.quality,!0),i=e.programs.filters.gauss3(i)),i}}class Fe extends Ce{constructor(e,t=0,i=0){n.a.assert(e instanceof Ce),n.a.assert(t>=e.descriptorSize),n.a.assert(i>=e.extraSize),super(t,i),this._decoratedAlgorithm=e,this._decoratedAlgorithm.descriptorSize=this.descriptorSize,this._decoratedAlgorithm.extraSize=this.extraSize}run(e,t){return this._decoratedAlgorithm.run(e,t)}download(e,t,i=0){return n.a.assert(this.extraSize==this._decoratedAlgorithm.extraSize),n.a.assert(this.descriptorSize==this._decoratedAlgorithm.descriptorSize),this._decoratedAlgorithm.download(e,t,i)}get decoratedAlgorithm(){return this._decoratedAlgorithm}get extraSize(){return super.extraSize}set extraSize(e){super.extraSize=e,this._decoratedAlgorithm.extraSize=e}get descriptorSize(){return super.descriptorSize}set descriptorSize(e){super.descriptorSize=e,this._decoratedAlgorithm.descriptorSize=e}}class je extends Fe{constructor(e,t){n.a.assert(e instanceof Ce),n.a.assert(t>0),super(e,t,e.extraSize)}run(e,t){const i=this.decoratedAlgorithm.run(e,t);return this._describe(e,t,i)}download(e,t,i=0){return this.decoratedAlgorithm.download(e,t,i).then(e=>this._postProcess(e))}_describe(e,t,i){throw new s.a}_postProcess(e){throw new s.a}}class Be extends Ke{constructor(){super(),this._n=9,this._threshold=20}get n(){return this._n}set n(e){this._n=0|e,n.a.assert(9===this._n||7===this._n||5===this._n)}get threshold(){return this._threshold}set threshold(e){this._threshold=0|e,n.a.assert(this._threshold>=0&&this._threshold<=255)}_detect(e,t){const i=this._n,n=this._threshold/255,r=this.descriptorSize,o=this.extraSize;let a=null;if(9==i)a=e.programs.keypoints.fast9(t,n);else if(7==i)a=e.programs.keypoints.fast7(t,n);else{if(5!=i)throw new s.h;a=e.programs.keypoints.fast5(t,n)}return a=e.programs.keypoints.nonmaxSuppression(a),e.programs.encoders.encodeKeypoints(a,r,o)}}class Ue extends Ke{constructor(){super(),this._n=9,this._threshold=20,this._depth=4,this._scaleFactor=1.4142135623730951,this._useHarrisScore=!1}get n(){return this._n}set n(e){this._n=0|e,n.a.assert(9===this._n)}get threshold(){return this._threshold}set threshold(e){this._threshold=0|e,n.a.assert(this._threshold>=0&&this._threshold<=255)}get depth(){return this._depth}set depth(e){this._depth=0|e,n.a.assert(this._depth>=1&&this._depth<=c.j)}get scaleFactor(){return this._scaleFactor}set scaleFactor(e){this._scaleFactor=Math.min(Math.max(1,+e),2)}get useHarrisScore(){return this._useHarrisScore}set useHarrisScore(e){this._useHarrisScore=!!e}_detect(e,t){const i=this._threshold,n=this._depth,r=this._useHarrisScore,s=i/255,o=2*n-1,a=Math.log2(this._scaleFactor),c=this.descriptorSize,l=this.extraSize,d=t.generatePyramid(e);let f=null;return f=r?e.programs.keypoints.multiscaleFastWithHarris(d,s,o,a):e.programs.keypoints.multiscaleFast(d,s,o,a),f=e.programs.keypoints.samescaleSuppression(f),f=e.programs.keypoints.multiscaleSuppression(f,a),e.programs.encoders.encodeKeypoints(f,c,l)}}const Xe=2*c.j-1;class $e extends Ke{constructor(){super(),this._quality=.1}get quality(){return this._quality}set quality(e){this._quality=+e,n.a.assert(this._quality>=0&&this._quality<=1)}_detect(e,t){const i=this._quality,n=this.descriptorSize,r=this.extraSize,s=e.programs.keypoints.multiscaleSobel(t,0),o=new Array(Xe).fill(s),a=e.programs.keypoints.multiscaleHarris(t,3,1,1,o);s.release();const c=e.programs.utils.scanMax(a,g.d.RED),l=e.programs.keypoints.nonmaxSuppression(a),d=e.programs.keypoints.harrisCutoff(l,c,i);return e.programs.encoders.encodeKeypoints(d,n,r)}}class qe extends Ke{constructor(){super(),this._quality=.1,this._depth=4,this._scaleFactor=1.4142135623730951}get quality(){return this._quality}set quality(e){this._quality=+e,n.a.assert(this._quality>=0&&this._quality<=1)}get depth(){return this._depth}set depth(e){this._depth=0|e,n.a.assert(this._depth>=1&&this._depth<=c.j)}get scaleFactor(){return this._scaleFactor}set scaleFactor(e){this._scaleFactor=Math.min(Math.max(1,+e),2)}_detect(e,t){const i=this._quality,n=this._depth,r=this.descriptorSize,s=this.extraSize,o=2*n-1,a=Math.log2(this._scaleFactor),c=t.generatePyramid(e),l=Array(Xe);for(let t=0;t<o;t++)l[t]=e.programs.keypoints.multiscaleSobel(c,t*a);for(let e=o;e<l.length;e++)l[e]=l[e-1];const d=e.programs.keypoints.multiscaleHarris(c,3,o,a,l);for(let e=0;e<o;e++)l[e].release();const f=e.programs.utils.scanMax(d,g.d.RED),h=e.programs.keypoints.samescaleSuppression(d),p=e.programs.keypoints.multiscaleSuppression(h,a),u=e.programs.keypoints.harrisCutoff(p,f,i);return e.programs.encoders.encodeKeypoints(u,r,s)}}class Ge{constructor(e,...t){this._decorator=e,this._args=t}decorate(e){const t=this._args,i=new(0,this._decorator)(e,...t);return n.a.assert(i instanceof Fe),i}}class Ye{constructor(e){this._algorithm=e,this._decoratedAlgorithm=this._algorithm,this._sensitivity=0,this._max=void 0,this._capKeypoints=this._capKeypoints.bind(this),this._enhancements={denoise:!0,illumination:!1,nightvision:null}}link(e){return this._decoratedAlgorithm=e.decorate(this._decoratedAlgorithm),this}detect(e,t=0){const i=e._gpu,n="static"==e.options.usage,r=this._decoratedAlgorithm.descriptorSize,o=this._decoratedAlgorithm.extraSize;let a=0;if(e.isReleased())throw new s.g("Can't detect features: the SpeedyMedia has been released");if(n){const e=8192;i.programs.encoders.reserveSpace(e,r,o)}else a|=ze.USE_BUFFERED_DOWNLOADS;if(t&ke.FEATURE_DETECTOR_RESET_CAPACITY){a|=ze.RESET_DOWNLOADER_STATE;const e=2048;i.programs.encoders.reserveSpace(e,r,o),a&=~ze.USE_BUFFERED_DOWNLOADS}const c=i.upload(e.source),l=this._preprocessTexture(i,c,1==this._enhancements.denoise,e._colorFormat!=g.b.Greyscale);this._algorithm.setEnhancements(this._enhancements.nightvision||this._enhancements.illumination);const d=this._decoratedAlgorithm.run(i,l);return this._decoratedAlgorithm.download(i,d,a).then(this._capKeypoints)}get sensitivity(){return this._sensitivity}set sensitivity(e){this._sensitivity=Math.max(0,Math.min(+e,1)),this._onSensitivityChange(this._sensitivity)}get max(){return this._max}set max(e){this._max=void 0!==e?Math.max(0,0|e):void 0}enhance(e){if("object"!=typeof e)throw new s.f("enhancements must be an object");this._enhancements=Object.assign(this._enhancements,e)}_preprocessTexture(e,t,i=!0,n=!0){let r=t;return i&&(r=e.programs.filters.gauss5(r)),n&&(r=e.programs.colors.rgb2grey(r)),r}_onSensitivityChange(e){throw new s.a}_compareKeypoints(e,t){return+t.score-+e.score}_capKeypoints(e){return void 0===this._max?e:e.sort(this._compareKeypoints).slice(0,this._max)}}class We extends Ye{constructor(e=9){if(super(new Be),9!==e&&7!==e&&5!==e)throw new s.h("Can't create FAST feature detector with n = "+e);this._algorithm.n=e}get n(){return this._algorithm.n}get threshold(){return this._algorithm.threshold}set threshold(e){this._algorithm.threshold=e}_onSensitivityChange(e){this.threshold=Math.round(255*(1-Math.tanh(2.77*e)))}}class Qe extends Ye{constructor(e=9){if(super(new Ue),9!==e)throw new s.h("Can't create Multiscale FAST feature detector with n = "+e);this._algorithm.n=e}get n(){return this._algorithm.n}get threshold(){return this._algorithm.threshold}set threshold(e){this._algorithm.threshold=e}get depth(){return this._algorithm.depth}set depth(e){this._algorithm.depth=e}get scaleFactor(){return this._algorithm.scaleFactor}set scaleFactor(e){this._algorithm.scaleFactor=e}get useHarrisScore(){return this._algorithm.useHarrisScore}set useHarrisScore(e){this._algorithm.useHarrisScore=e}_onSensitivityChange(e){this.threshold=Math.round(255*(1-Math.tanh(2.77*e)))}}class He extends Ye{constructor(){super(new $e)}get quality(){return this._algorithm.quality}set quality(e){this._algorithm.quality=Math.max(0,Math.min(e,1))}_onSensitivityChange(e){this.quality=1-e}}class Ve extends Ye{constructor(){super(new qe)}get depth(){return this._algorithm.depth}set depth(e){this._algorithm.depth=e}get scaleFactor(){return this._algorithm.scaleFactor}set scaleFactor(e){this._algorithm.scaleFactor=e}get quality(){return this._algorithm.quality}set quality(e){this._algorithm.quality=Math.max(0,Math.min(e,1))}_onSensitivityChange(e){this.quality=1-e}}class Ze extends je{constructor(e){super(e,32)}_describe(e,t,i){const n=this.descriptorSize,r=this.extraSize,s=this._computeOrientation(e,t,i),o=e.programs.filters.gauss7(t).generatePyramid(e),a=e.programs.encoders.encoderLength;return e.programs.keypoints.orb(o,s,n,r,a)}_computeOrientation(e,t,i){const n=this.descriptorSize,r=this.extraSize,s=t.generatePyramid(e),o=e.programs.encoders.encoderLength;return e.programs.keypoints.orientationViaCentroid(s,i,7,n,r,o)}_postProcess(e){return e.map(e=>new ie(e,e=>new J(e)))}}class Je extends Re{static ORB(){return new Ge(Ze)}}class et extends Re{static FAST(e=9){return new We(e)}static MultiscaleFAST(e=9){return new Qe(e)}static Harris(){return new He}static MultiscaleHarris(){return new Ve}static ORB(){const e=Je.ORB(),t=(new Ve).link(e);return t.scaleFactor=1.19,t}static BRISK(){return new BRISKFeatureDetector}}class tt{constructor(){this._data=null,this._width=0,this._height=0}static load(e){const t=e.constructor.name;if("HTMLImageElement"==t)return(new it)._load(e);if("HTMLVideoElement"==t)return(new nt)._load(e);if("HTMLCanvasElement"==t)return(new rt)._load(e);if("ImageBitmap"==t)return(new st)._load(e);throw new s.f("Unsupported media type: "+e)}get data(){return this._data}get width(){return this._width}get height(){return this._height}isLoaded(){return null!==this._data}get type(){throw new s.a}clone(){throw new s.a}_load(){throw new s.a}_waitUntil(e,t,i=3e4){return new r.a((r,o)=>{n.a.log(`Waiting for ${t} to be triggered in ${e}...`);const a=setTimeout(()=>{o(new s.j(`${t} has not been triggered in ${e}: timeout (${i}ms)`))},i);e.addEventListener(t,()=>{clearTimeout(a),r(e)},!1)})}}class it extends tt{get type(){return g.c.Image}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=this._data.cloneNode(!0);return(new it)._load(e)}_load(e){return e.complete&&0!==e.naturalWidth?r.a.resolve().then(()=>(this._data=e,this._width=e.naturalWidth,this._height=e.naturalHeight,this)):this._waitUntil(e,"load").then(()=>(this._data=e,this._width=e.naturalWidth,this._height=e.naturalHeight,this))}}class nt extends tt{get type(){return g.c.Video}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=this._data.cloneNode(!0);return(new nt)._load(e)}_load(e){return e.readyState>=4?r.a.resolve().then(()=>(this._data=e,this._width=e.videoWidth,this._height=e.videoHeight,this)):this._waitUntil(e,"canplaythrough").then(()=>(this._data=e,this._width=e.videoWidth,this._height=e.videoHeight,this))}}class rt extends tt{get type(){return g.c.Canvas}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=n.a.createCanvas(this._width,this._height);return e.getContext("2d").draw(this._data,0,0),(new rt)._load(e)}_load(e){return r.a.resolve().then(()=>(this._data=e,this._width=e.width,this._height=e.height,this))}}class st extends tt{get type(){return g.c.Bitmap}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=new st;return createImageBitmap(this._data).then(t=>e._load(t))}_load(e){return r.a.resolve().then(()=>(this._data=e,this._width=e.width,this._height=e.height,this))}}const ot={};class at{constructor(){this._loadOptions=()=>({})}run(e,t,i){return e}release(){}_saveOptions(e,t={}){if("object"==typeof e){const i=Object.assign(t,e);this._loadOptions=()=>i}else{if("function"!=typeof e)throw new s.f("Expected an options object | function");this._loadOptions=()=>Object.assign(t,e())}}}ot.ConvertToGreyscale=class extends at{run(e,t,i){if(i._colorFormat==g.b.RGB)e=t.programs.colors.rgb2grey(e);else if(i._colorFormat!=g.b.Greyscale)throw new s.h("Can't convert image to greyscale: unknown color format");return i._colorFormat=g.b.Greyscale,e}},ot.Blur=class extends at{constructor(e={}){super(),this._saveOptions(e,{filter:"gaussian",size:5})}run(e,t,i){const{filter:n,size:r}=this._loadOptions();if("gaussian"!=n&&"box"!=n)throw new s.f(`Invalid filter: "${n}"`);if(3!=r&&5!=r&&7!=r)throw new s.f("Invalid kernel size: "+r);let o="gaussian"==n?"gauss":"box";return t.programs.filters[o+r](e)}},ot.Convolve=class extends at{constructor(e,t=1){let i=new Float32Array(e).map(e=>e/t);const n=i.length,r=0|Math.sqrt(n),o={3:["createKernel3x3","texConv2D3"],5:["createKernel5x5","texConv2D5"],7:["createKernel7x7","texConv2D7"]}[r]||null;if(super(),1==n)throw new s.f("Cannot convolve with a kernel containing a single element");if(r*r!=n||!o)throw new s.f(`Cannot convolve with a non-square kernel of ${n} elements`);const a=Math.min(...i),c=Math.max(...i),l=a,d=Math.abs(c-a)>1e-5?c-a:1;i=i.map(e=>(e-l)/d),this._method=o,this._scale=d,this._offset=l,this._kernel=i,this._kernelSize=r,this._texKernel=null,this._gl=null}run(e,t,i){if(t.gl.isContextLost())this._texKernel=null,this._gl=null;else if(null==this._texKernel||this._gl!==t.gl&&null!==this._gl){if(this._gl!==t.gl&&null!==this._gl&&!this._gl.isContextLost()){const e="Performance warning: need to recreate the texture kernel. Consider duplicating the pipeline when using convolutions for different media objects.";n.a.warning(e),this._texKernel.release()}this._texKernel=t.programs.filters[this._method[0]](this._kernel),this._gl=t.gl}return t.programs.filters[this._method[1]](e,this._texKernel,this._scale,this._offset)}release(){null!=this._texKernel&&(this._texKernel.release(),this._texKernel=this._gl=null),super.release()}},ot.Normalize=class extends at{constructor(e={}){super(),this._saveOptions(e,{min:void 0,max:void 0})}run(e,t,i){const{min:n,max:r}=this._loadOptions();if(i._colorFormat==g.b.RGB)return t.programs.enhancements.normalizeColoredImage(e,n,r);if(i._colorFormat==g.b.Greyscale)return t.programs.enhancements.normalizeGreyscaleImage(e,n,r);throw new s.h("Invalid color format")}},ot.Nightvision=class extends at{constructor(e={}){super(),this._saveOptions(e,{gain:void 0,offset:void 0,decay:void 0,quality:void 0})}run(e,t,i){const{gain:n,offset:r,decay:o,quality:a}=this._loadOptions();if(i._colorFormat==g.b.RGB)return t.programs.enhancements.nightvision(e,n,r,o,a,!1);if(i._colorFormat==g.b.Greyscale)return t.programs.enhancements.nightvision(e,n,r,o,a,!0);throw new s.h("Invalid color format")}};class ct{constructor(){this._operations=[]}get length(){return this._operations.length}release(){return new Promise((e,t)=>{for(let e=this._operations.length-1;e>=0;e--)this._operations[e].release();this._operations.length=0,e(this)})}_spawn(e){return this._operations.push(e),this}_run(e,t,i){for(let n=0;n<this._operations.length;n++)e=this._operations[n].run(e,t,i);return e}concat(e){if(e instanceof ct)return this._operations=this._operations.concat(e._operations),this;throw new s.f(`Invalid argument "${e}" given to SpeedyPipeline.concatenate()`)}convertTo(e=null){if("greyscale"==e||"grayscale"==e)return this._spawn(new ot.ConvertToGreyscale);throw new s.f(`Can't convert to unknown color space: "${e}"`)}blur(e={}){return this._spawn(new ot.Blur(e))}convolve(e,t=1){return this._spawn(new ot.Convolve(e,t))}normalize(e={}){return this._spawn(new ot.Normalize(e))}nightvision(e={}){return this._spawn(new ot.Nightvision(e))}}class lt{constructor(e,t={}){if(this._source=null,this._gpu=null,this._colorFormat=g.b.RGB,this._options=null,"SpeedyMedia"==e.constructor.name){const t=e;this._source=t._source,this._colorFormat=t._colorFormat,this._options=t._options,this._gpu=t._gpu}else n.a.assert(e.isLoaded()),this._source=e,this._source.type==g.c.Canvas&&void 0===t.usage&&n.a.warning('Loading a canvas without an explicit usage flag. I will set the usage to "static". This will result in suboptimal performance if the canvas is animated'),this._options=this._buildOptions(t,{usage:this._source.type==g.c.Video?"dynamic":"static"}),this._gpu=new Le(this._source.width,this._source.height)}static load(e,t={}){return tt.load(e).then(i=>{n.a.assert(0!==i.width&&0!==i.height);const r=new lt(i,t);return n.a.log(`Loaded SpeedyMedia with a ${e}.`),r})}static loadCameraStream(e=426,t=240,i={},r={}){return n.a.requestCameraStream(e,t,i).then(e=>lt.load(e,r))}get source(){return this._source.data}get width(){return this._source.width}get height(){return this._source.height}get type(){switch(this._source.type){case g.c.Image:return"image";case g.c.Video:return"video";case g.c.Canvas:return"canvas";case g.c.Bitmap:return"bitmap";default:return"unknown"}}get options(){return this._options}release(){return this.isReleased()||(n.a.log("Releasing SpeedyMedia object..."),this._gpu.loseWebGLContext(),this._gpu=null,this._source=null),r.a.resolve()}isReleased(){return null==this._gpu}clone(e={}){if(e={lightweight:!1,...e},this.isReleased())throw new s.g("Can't clone a SpeedyMedia that has been released");return e.lightweight?r.a.resolve(new lt(this,this._options)):this._source.clone().then(e=>new lt(e,this._options))}run(e){if(this.isReleased())throw new s.g("Can't run pipeline: SpeedyMedia has been released");return this.clone({lightweight:!0}).then(t=>{let i=t._gpu.upload(t._source.data);return i=e._run(i,t._gpu,t),t._gpu.programs.utils.output(i),createImageBitmap(t._gpu.canvas,0,0,t.width,t.height).then(e=>tt.load(e).then(e=>(t._source=e,t)))})}draw(e,t=0,i=0,n=this.width,r=this.height){if(this.isReleased())return;t=Math.max(+t,0),i=Math.max(+i,0),n=Math.max(+n,0),r=Math.max(+r,0),e.getContext("2d").drawImage(this._source.data,t,i,n,r)}toBitmap(){if(this.isReleased())throw new s.g("Can't convert SpeedyMedia to ImageBitmap: the media has been released");if(!this._source.isLoaded())throw new s.g("Can't convert SpeedyMedia to bitmap: the media hasn't been loaded");return createImageBitmap(this._source.data)}_buildOptions(e,t){return"dynamic"!=(e=Object.assign({},t,e)).usage&&"static"!=e.usage&&(n.a.warning(`Can't load media. Unrecognized usage option: "${e.usage}"`),e.usage=t.usage,n.a.assert("dynamic"==e.usage||"static"==e.usage)),Object.freeze(e)}}let dt=null;class ft{constructor(){if(this._fps=60,this._frames=0,this._updateInterval=500,this._lastUpdate=performance.now(),this._boundUpdate=this._update.bind(this),null!==dt)throw new s.g("Can't have multiple instances of FPSCounter");this._boundUpdate()}static get instance(){return null===dt&&(dt=new ft),dt}get fps(){return this._fps}_update(){const e=performance.now(),t=e-this._lastUpdate;t>=this._updateInterval&&(this._fps=Math.round(this._frames/(.001*t)),this._frames=0,this._lastUpdate=e),this._frames++,requestAnimationFrame(this._boundUpdate)}}class ht extends Ce{constructor(){super(0,0),this._prevImage=null,this._prevKeypoints=null,this._downloader=new ze}run(e,t){return this._track(e,t)}get prevImage(){return this._prevImage}set prevImage(e){this._prevImage=e}get prevKeypoints(){return this._prevKeypoints}set prevKeypoints(e){this._prevKeypoints=e}download(e,t,i=0){return i&0!=ze.USE_BUFFERED_DOWNLOADS&&n.a.warning("Feature trackers shouldn't use buffered downloads"),this._downloader.download(e,t,this.descriptorSize,this.extraSize,i)}_track(e,t){throw new s.a}}class pt{constructor(e,t){this._data=new Float32Array([e,t])}get x(){return this._data[0]}set x(e){this._data[0]=e}get y(){return this._data[1]}set y(e){this._data[1]=e}toString(){return`SpeedyVector2(${this._data[0].toFixed(5)}, ${this._data[1].toFixed(5)})`}at(e){return this._data[e]}dot(e){return this._data[0]*e._data[0]+this._data[1]*e._data[1]}distanceTo(e){const t=this._data[0]-e._data[0],i=this._data[1]-e._data[1];return Math.sqrt(t*t+i*i)}length(){return Math.sqrt(this._data[0]*this._data[0]+this._data[1]*this._data[1])}normalize(){const e=this.length();return 0==e?(this._data.fill(0),this):(this._data[0]/=e,this._data[1]/=e,this)}}class ut extends ht{constructor(){super(),this._windowSize=15,this._depth=5,this._discardThreshold=1e-4}get windowSize(){return this._windowSize}set windowSize(e){this._windowSize=0|e,n.a.assert(this._windowSize%2==1&&this._windowSize>=1)}get depth(){return this._depth}set depth(e){this._depth=0|e,n.a.assert(this._depth>=1)}get discardThreshold(){return this._discardThreshold}set discardThreshold(e){this._discardThreshold=Math.max(0,+e)}_track(e,t){const i=this.prevImage,n=this.prevKeypoints,r=this.descriptorSize,s=this.extraSize,o=this.windowSize,a=this.depth,c=this.discardThreshold,l=t.generatePyramid(e),d=i.generatePyramid(e),f=e.programs.encoders.encoderLength;return e.programs.trackers.lk(l,d,n,o,a,c,r,s,f)}}class mt extends class{constructor(e,t){this._trackingAlgorithm=e,this._decoratedAlgorithm=this._trackingAlgorithm,this._media=t,this._inputTexture=null,this._prevInputTexture=null}link(e){return this._decoratedAlgorithm=e.decorate(this._decoratedAlgorithm),this}track(e,t=null,i=null){const n=this._media._gpu,r=this._decoratedAlgorithm.descriptorSize,o=this._decoratedAlgorithm.extraSize;if(!Array.isArray(e)||null!=i&&!Array.isArray(i)||null!=t&&!Array.isArray(t))throw new s.f;const[a,l]=this._updatedImages(this._media,n,this._prevInputTexture);this._prevInputTexture=l,this._inputTexture=a,n.programs.encoders.optimize(e.length,r,o),this._trackingAlgorithm.prevImage=l,this._trackingAlgorithm.prevKeypoints=this._trackingAlgorithm.upload(n,e);const d=this._decoratedAlgorithm.run(n,a);return this._decoratedAlgorithm.download(n,d,0).then(n=>{const r=[];null!=i&&(i.length=n.length),null!=t&&(t.length=n.length);for(let s=0;s<n.length;s++){const o=0==(n[s].flags&c.c);o&&r.push(n[s]),null!=i&&(i[s]=o),null!=t&&(t[s]=o?new pt(n[s].x-e[s].x,n[s].y-e[s].y):new pt(0,0))}return r})}_updatedImages(e,t,i){if(e.isReleased())throw new s.g("The media has been released");const n=t.upload(e.source);if(null==n)throw new s.g("Tracking error: can't upload image to the GPU "+e.source);return[n,i||n]}}{constructor(e){super(new ut,e)}get windowSize(){return this._trackingAlgorithm.windowSize}set windowSize(e){if("number"!=typeof e||e<1||e%2==0)throw new s.f("Window size must be a positive odd number");this._trackingAlgorithm.windowSize=e}get depth(){return this._trackingAlgorithm.depth}set depth(e){if("number"!=typeof e||e<1)throw new s.f("Invalid depth: "+e);this._trackingAlgorithm.depth=e}get discardThreshold(){return this._trackingAlgorithm.discardThreshold}set discardThreshold(e){if("number"!=typeof e||e<0)throw new s.f("Invalid discardThreshold");this._trackingAlgorithm.discardThreshold=e}}class _t extends Re{static LK(e){return new mt(e)}}const xt=Pe.MatrixMath.MatrixType,vt=Pe.MatrixMath.DataType,gt=Object.freeze(Object.keys(vt).reduce((e,t)=>Object.assign(e,{[vt[t].name]:0|t}),{}));class yt{constructor(e,t=null,i=xt.F32,n=null){let r;e|=0,null==t||Array.isArray(t)||(i=gt[t.constructor.name]);const o=vt[i];if(void 0===o)throw new s.f("Unknown matrix type");if(e<=0)throw new s.f("Invalid matrix length");if(r=null==t?new o(e):Array.isArray(t)?new o(t):t,!(r.buffer instanceof ArrayBuffer))throw new s.f("Invalid matrix type");this._type=-4&i,this._byteOffset=r.byteOffset,this._length=r.length,this._data=r,this._dataType=o,this._pendingOperations=n?n._pendingOperations:0,this._pendingAccessesQueue=[],this._children=[],this._parent=n}get type(){return this._type}get data(){return this._data}ready(){return this._pendingOperations>0?new r.a(e=>{this._pendingAccessesQueue.push(()=>e(this))}):r.a.resolve(this)}lock(e=!0){let t=this;if(t._parent&&e)do{t=t._parent}while(t._parent);++t._pendingOperations;for(let e=t._children.length-1;e>=0;e--)t._children[e].lock(!1)}unlock(e=!0){let t=this;if(t._parent&&e)do{t=t._parent}while(t._parent);if(--t._pendingOperations<=0){const e=t._pendingAccessesQueue.slice(0);t._pendingOperations=0,t._pendingAccessesQueue.length=0;for(let i=0;i<e.length;i++){if(t._pendingOperations>0){for(let n=e.length-1;n>=i;n--)t._pendingAccessesQueue.unshift(e[n]);break}e[i].call(t)}}for(let e=t._children.length-1;e>=0;e--)t._children[e].unlock(!1)}replace(e,t=!0){let i=this;if(i._parent&&t)do{i=i._parent}while(i._parent);const n=this._dataType;i._data=new n(e,i._byteOffset,i._length);for(let t=i._children.length-1;t>=0;t--)i._children[t].replace(e,!1)}createSharedBuffer(e=0,t=this._length){return this.ready().then(()=>{const i=Math.min(e+t,this._length),n=this._data.subarray(e,i),r=new yt(t,n,this._type,this);return this._children.push(r),r})}}const St=Pe.MatrixMath.Opcode.NOP;class bt{static get instance(){return this._instance||(this._instance=new bt)}constructor(){this._msgId=0,this._callbackTable=new Map,this._worker=this._createWorker()}run(e,t,i){if(e.opcode===St)return r.a.resolve([t,i]);const n=this._msgId=this._msgId+1&(1<<30)-1,s=[t,...i].filter((e,t,i)=>i.indexOf(e)===t),o={id:n,header:e,outputBuffer:t,inputBuffers:i,transferables:s};return new r.a(e=>{this._callbackTable.set(n,(t,i)=>{e([t,i]),this._callbackTable.delete(n)}),this._worker.postMessage(o,s)},!0)}_createWorker(){const e="self.MatrixMath = "+Pe.MatrixMath.toString()+"\nself.onmessage = "+wt.toString(),t=new Blob([e],{type:"application/javascript"}),i=new Worker(URL.createObjectURL(t));return i.onmessage=e=>{const t=e.data;this._callbackTable.get(t.id)(t.outputBuffer,t.inputBuffers)},i.onerror=e=>{throw new s.g("Worker error: "+e.message)},i}}function wt(e){const{id:t,header:i,outputBuffer:n,inputBuffers:r,transferables:s}=e.data,o=self.MatrixMath.DataType[i.type],a=new o(n,i.byteOffset,i.length),c=r.map((e,t)=>new o(e,i.byteOffsetOfInputs[t],i.lengthOfInputs[t]));self.MatrixMath.Opcode2fun[i.opcode].call(self.MatrixMath,i,a,c);const l={id:t,outputBuffer:n,inputBuffers:r};self.postMessage(l,s)}const Ot=Pe.MatrixMath.Opcode,At=Pe.MatrixMath.Opcode2fun,Et=bt.instance;class Tt{constructor(e,t,i,n,r=[],o=null){const a=r.length,c=a>0,l=c&&r.map(e=>e.rows),d=c&&r.map(e=>e.columns),f=c&&new Array(a),h=c&&new Array(a),p=c&&new Array(a);this._header={opcode:e,type:n,rows:t,columns:i,stride:null,byteOffset:null,length:null,rowsOfInputs:l,columnsOfInputs:d,strideOfInputs:f,byteOffsetOfInputs:h,lengthOfInputs:p,custom:o},this._inputMatrices=r,this._inputBuffers=new Array(a),this._workloadOfInputs=r.reduce((e,t)=>e+this._workload(t),0);const u=At[e];if(void 0===u)throw new s.f(`Invalid matrix operation (0x${e.toString(16)})`);this._fun=u.bind(Pe.MatrixMath)}get rows(){return this._header.rows}get columns(){return this._header.columns}get type(){return this._header.type}update(e){if(this._inputMatrices.length!==e.length)throw new s.g;for(let t=e.length-1;t>=0;t--){const i=e[t],n=this._inputMatrices[t];if(i!==n){if(i.rows!==n.rows||i.columns!==n.columns||i.type!==n.type)throw new s.g("Can't change the input matrix shape / type");this._inputMatrices[t]=i}}return this}run(e){const{rows:t,columns:i,stride:n,type:r}=e,s=this._header;if(this._workloadOfInputs+this._workload(e)<=40)return this._runLocally(e);this._assertCompatibility(t,i,r);const o=e.buffer.data;s.stride=n,s.byteOffset=o.byteOffset,s.length=o.length;const a=this._inputMatrices,c=this._inputBuffers;for(let e=a.length-1;e>=0;e--){const t=a[e],i=t.buffer.data;s.strideOfInputs[e]=t.stride,s.byteOffsetOfInputs[e]=i.byteOffset,s.lengthOfInputs[e]=i.length,c[e]=i.buffer}return Et.run(s,o.buffer,c).then(([t,i])=>{e.buffer.replace(t);for(let e=a.length-1;e>=0;e--)a[e].buffer.replace(i[e])})}_runLocally(e){const{rows:t,columns:i,stride:n,type:s}=e,o=this._header;this._assertCompatibility(t,i,s);const a=e.buffer.data;o.stride=n,o.byteOffset=a.byteOffset,o.length=a.length;const c=this._inputMatrices,l=this._inputBuffers;for(let e=c.length-1;e>=0;e--){const t=c[e],i=t.buffer.data;o.strideOfInputs[e]=t.stride,o.byteOffsetOfInputs[e]=i.byteOffset,o.lengthOfInputs[e]=i.length,l[e]=i}return this._fun(o,a,l),r.a.resolve()}get inputMatrices(){return this._inputMatrices}_assertCompatibility(e,t,i=this._header.type){const{rows:n,columns:r,type:o}=this._header;if(e!==n||t!==r||i!==o)throw i!==o?new s.g(`Incompatible matrix type (0x${i.toString(16)} vs 0x${o.toString(16)})`):new s.g(`Invalid matrix size: ${n} x ${r} (expected ${e} x ${t})`)}_workload(e){return e.rows*e.columns}}class It extends Tt{constructor(e,t,i){super(Ot.NOP,e,t,i)}}class Mt extends Tt{constructor(e,t,i,n){super(Ot.FILL,e,t,i,[],{value:+n})}}class Lt extends Tt{constructor(e){super(Ot.COPY,e.rows,e.columns,e.type,[e])}}class Rt extends Tt{constructor(e){super(Ot.TRANSPOSE,e.columns,e.rows,e.type,[e])}}class Pt extends Tt{constructor(e,t){super(Ot.ADD,e.rows,e.columns,e.type,[e,t])}}class kt extends Tt{constructor(e,t){super(Ot.SUBTRACT,e.rows,e.columns,e.type,[e,t])}}class Ct extends Tt{constructor(e,t){super(Ot.MULTIPLY,e.rows,t.columns,e.type,[e,t])}}class Dt extends Tt{constructor(e,t){super(Ot.SCALE,e.rows,e.columns,e.type,[e],{scalar:+t})}}class zt extends Tt{constructor(e,t){super(Ot.COMPMULT,e.rows,e.columns,e.type,[e,t])}}class Nt extends Tt{constructor(e,t){super(Ot.MULTIPLYLT,e.columns,t.columns,e.type,[e,t])}}class Kt extends Tt{constructor(e,t){super(Ot.MULTIPLYRT,e.rows,t.rows,e.type,[e,t])}}class Ft extends Tt{constructor(e,t){super(Ot.MULTIPLYVEC,e.rows,1,e.type,[e,t])}}class jt extends Tt{constructor(e,t){const i={full:"full-qr",reduced:"reduced-qr"}[t];if(void 0===i)throw new s.f(`QR decomposition: unknown mode "${t}"`);const n="full-qr"==i?e.columns+e.rows:2*e.columns;super(Ot.QR,e.rows,n,e.type,[e],{mode:i})}}class Bt extends Tt{constructor(e,t){super(Ot.QR,e.rows,e.columns+1,e.type,[e,t],{mode:"reduced-Q'x"})}}class Ut extends Tt{constructor(e){super(Ot.BACKSUB,e.rows,1,e.type,[e])}}class Xt extends Tt{constructor(e,t){super(Ot.LSSOLVE,e.columns,1,e.type,[e,t])}}class $t{constructor(){this._queue=[],this._busy=!1}static get instance(){return this._instance||(this._instance=new $t)}enqueue(e,t){return new r.a(i=>{this._queue.push([e,t,i]),this._busy||(this._busy=!0,this._resolveAll())})}_resolveAll(){if(0==this._queue.length)return void(this._busy=!1);const[e,t,i]=this._queue.shift();t.lock(),e.inputMatrices.forEach(e=>e.lock()),e.run(t).then(()=>{e.inputMatrices.forEach(e=>e.unlock()),t.unlock(),i(),this._resolveAll()}).turbocharge()}}const qt=Pe.MatrixMath.MatrixType,Gt=Pe.MatrixMath.DataType,Yt=Pe.MatrixMath.DataTypeName,Wt=$t.instance;class Qt{constructor(e,t=e,i=null,n=qt.F32,r=e,o=null){const a=Gt[n],c=1+(3&n);if(e<=0||t<=0)throw new s.f("Invalid dimensions");if(r<e)throw new s.f("Invalid stride");if(null==a)throw new s.f("Invalid data type");if(Array.isArray(i)&&i.length!=e*t*c)throw new s.f(`Incorrect number of matrix elements (expected ${e*t*c}, found ${i.length})`);this._rows=0|e,this._columns=0|t,this._type=0|n,this._channels=c,this._stride=0|r,this._buffer=o||new yt(this._stride*this._columns*this._channels,i,this._type),this._nop=null}get rows(){return this._rows}get columns(){return this._columns}get channels(){return this._channels}get stride(){return this._stride}get type(){return this._type}get dtype(){return Yt[this._type]}read(e,t){const i=this._rows,n=this._columns,r=this._stride;if(void 0===e)return this.sync().then(()=>this._buffer.ready().turbocharge()).then(e=>{const s=e.data,o=i*n;(t=t||new Array(o)).length!=o&&(t.length=o);let a,c,l=0;for(c=0;c<n;c++)for(a=0;a<i;a++)t[l++]=s[c*r+a];return t}).turbocharge();if(e.length%2>0)throw new s.f("Can't read matrix entries: missing index");return this.sync().then(()=>this._buffer.ready().turbocharge()).then(s=>{const o=s.data,a=e.length>>1;let c,l;(t=t||new Array(a)).length!=a&&(t.length=a);for(let s=0;s<a;s++)c=0|e[s<<1],l=0|e[1+(s<<1)],t[s]=c>=0&&c<i&&l>=0&&l<n&&o[l*r+c]||void 0;return t}).turbocharge()}at(e,t){return this.read([e,t]).then(e=>e[0]).turbocharge()}print(e,t=console.log){return this.read().then(i=>{const n=this._rows,r=this._columns,s=new Array(n);let o,a;for(o=0;o<n;o++)for(s[o]=new Array(r),a=0;a<r;a++)s[o][a]=i[a*n+o];const c=void 0!==e?t=>t.toFixed(e):e=>e,l=s.map(e=>"    "+e.map(c).join(", ")).join(",\n"),d=`SpeedyMatrix(rows=${n}, cols=${r}, dtype="${this.dtype}", data=[\n${l}\n])`;t(d)})}block(e,t,i,n){const r=this._rows,o=this._columns;if(t<e||n<i)throw new s.f(`Can't create empty submatrix - invalid range [${e}:${t}, ${i}:${n}]`);if(e<0||t>=r||i<0||n>=o)throw new s.f(`Can't create submatrix - invalid range [${e}:${t}, ${i}:${n}] of ${r} x ${o} matrix`);const a=t-e+1,c=n-i+1,l=this._stride,d=i*l+e,f=(n-i)*l+a;return this._buffer.createSharedBuffer(d,f).then(e=>new Qt(a,c,void 0,this._type,l,e)).turbocharge()}diagonal(){const e=this._rows,t=this._stride,i=Math.min(e,this._columns),n=(i-1)*t+e;return this._buffer.createSharedBuffer(0,n).then(e=>new Qt(1,i,void 0,this._type,t+1,e)).turbocharge()}toString(){return`SpeedyMatrix(rows=${this.rows}, cols=${this.columns}, dtype="${this.dtype}")`}lock(){this._buffer.lock()}unlock(){this._buffer.unlock()}get buffer(){return this._buffer}sync(){return this._nop=this._nop||(this._nop=new It(this._rows,this._columns,this._type)),Wt.enqueue(this._nop,this)}}const Ht=$t.instance,Vt=(Pe.MatrixMath.MatrixType,Pe.MatrixMath.DataType),Zt=Pe.MatrixMath.DataTypeName,Jt=Object.freeze(Object.keys(Zt).reduce((e,t)=>Object.assign(e,{[Zt[t]]:t}),{}));class ei{constructor(e,t,i){if(this._rows=0|e,this._columns=0|t,this._type=0|i,this._readbuf=null,this._rows<=0||this._columns<=0)throw new s.f(`Invalid dimensions for a matrix expression: ${this._rows} x ${this._columns}`);if(void 0===Vt[this._type])throw new s.f("Invalid type for a matrix expression: 0x"+this._type.toString(16))}get rows(){return this._rows}get columns(){return this._columns}get type(){return this._type}get dtype(){return Pe.MatrixMath.DataTypeName[this._type]}_assertCompatibility(e,t,i=this._type){if(e!==this._rows||t!==this._columns||i!==this._type)throw i!==this._type?new s.g(`Incompatible matrix type (expected ${Pe.MatrixMath.DataTypeName[i]}, found ${this.dtype})`):new s.g(`Incompatible matrix shape (expected ${e} x ${t}, found ${this._rows} x ${this._columns})`)}_evaluate(){throw new s.a}get _matrix(){throw new s.a}_assign(e){throw new s.g("Can't assign matrix: not a l-value")}assign(e){throw new s.g("Can't assign matrix: not a l-value")}fill(e){throw new s.g("Can't fill matrix: not a l-value")}read(){return this._readbuf=this._readbuf||[],this._evaluate().then(e=>e._matrix.read(void 0,this._readbuf)).turbocharge()}print(e,t){return this._evaluate().then(i=>i._matrix.print(e,t)).turbocharge()}toString(){return this._matrix.toString()}block(e,t,i,n){return new ri(this,e,t,i,n)}row(e){return this.block(e,e,0,this._columns-1)}column(e){return this.block(0,this._rows-1,e,e)}rowSpan(e,t){return this.block(e,t,0,this._columns-1)}columnSpan(e,t){return this.block(0,this._rows-1,e,t)}diagonal(){return new si(this)}clone(){return new hi(this)}transpose(){return new pi(this)}plus(e){return new ui(this,e)}minus(e){return new mi(this,e)}times(e){return e instanceof ei?new _i(this,e):new yi(this,e)}compMult(e){return new Si(this,e)}qr(e="reduced"){return new bi(this,e)}lssolve(e){return new Ai(this,e)}solve(e,t="qr"){const i=this._rows,n=this._columns;if(i!==n)throw new s.f(`solve expects a square matrix, but received a ${i} x ${n} matrix`);if(e.rows!==i||1!==e.columns)throw new s.f(`solve expected a ${i} x 1 input vector, but received a ${e.rows} x ${e.columns} matrix`);switch(t){case"qr":return this.lssolve(e);default:throw new s.f(`Unknown method for solve: "${t}"`)}}_qrSolve(e){return new wi(this,e)}_backSubstitution(){return new Oi(this)}}class ti extends ei{constructor(e,t,i){super(e,t,i),this._tmpmatrix=new Qt(e,t,void 0,i)}get _matrix(){return this._tmpmatrix}}class ii extends ti{constructor(e,t,i,n,...r){super(e,t,i.type),this._expr=i,this._operationClass=n,this._operation=null,this._args=r}_evaluate(){return this._expr._evaluate().then(e=>Ht.enqueue(this._operation?this._operation.update([e._matrix]):this._operation=new this._operationClass(e._matrix,...this._args),this._matrix)).then(()=>this)}get child(){return this._expr}}class ni extends ti{constructor(e,t,i,n,r,...s){super(e,t,i.type),this._leftExpr=i,this._rightExpr=n,this._operationClass=r,this._operation=null,this._args=s,n.type!==i.type&&this._assertCompatibility(e,t,n.type)}_evaluate(){return r.a.all([this._leftExpr._evaluate().turbocharge(),this._rightExpr._evaluate().turbocharge()]).then(([e,t])=>Ht.enqueue(this._operation?this._operation.update([e._matrix,t._matrix]):this._operation=new this._operationClass(e._matrix,t._matrix,...this._args),this._matrix)).then(()=>this)}get leftChild(){return this._leftExpr}get rightChild(){return this._rightExpr}}class ri extends ei{constructor(e,t,i,n,r){super(i-t+1,r-n+1,e.type),this._expr=e,this._firstRow=t,this._lastRow=i,this._firstColumn=n,this._lastColumn=r,this._submatrix=null,this._cachedMatrix=null}get _matrix(){return this._submatrix}_evaluate(){return this._expr._evaluate().then(e=>e._matrix!==this._cachedMatrix||null===this._submatrix?(this._cachedMatrix=e._matrix,this._cachedMatrix.block(this._firstRow,this._lastRow,this._firstColumn,this._lastColumn)):this._submatrix).then(e=>(this._submatrix=e,this))}}class si extends ei{constructor(e){super(1,Math.min(e.rows,e.columns),e.type),this._expr=e,this._diagonal=null,this._cachedMatrix=null}get _matrix(){return this._diagonal}_evaluate(){return this._expr._evaluate().then(e=>e._matrix!==this._cachedMatrix||null===this._diagonal?(this._cachedMatrix=e._matrix,this._cachedMatrix.diagonal()):this._diagonal).then(e=>(this._diagonal=e,this))}}class oi extends ei{get _matrix(){throw new s.a}_assign(e){throw new s.a}assign(e){return new ai(this,e)._evaluate().turbocharge()}fill(e){return this.assign(new fi(this._rows,this._columns,this._type,+e))}block(e,t,i,n){return new li(this,e,t,i,n)}diagonal(){return new di(this)}}class ai extends oi{constructor(e,t){const{rows:i,columns:n,type:r}=e;if(super(i,n,r),!(t instanceof ei)){if(!Array.isArray(t))throw new s.f("Can't assign matrix to "+t);{const e=new Qt(i,n,t,r);t=new ci(i,n,r,e)}}this._assertCompatibility(t.rows,t.columns,t.type),this._lvalue=e,this._rvalue=t}_evaluate(){return r.a.all([this._lvalue._evaluate().turbocharge(),this._rvalue._evaluate().turbocharge()]).then(([e,t])=>e._assign(t._matrix).turbocharge()).then(()=>this)}get _matrix(){return this._lvalue._matrix}}class ci extends oi{constructor(e,t,i,n=null){super(e,t,i),this._usermatrix=null,null!=n&&(this._assertCompatibility(n.rows,n.columns,n.type),this._usermatrix=n)}get _matrix(){if(null==this._usermatrix)throw new s.g("Matrix doesn't have any data. Make sure you assign data to it.");return this._usermatrix}_evaluate(){return r.a.resolve(this)}_assign(e){return this._usermatrix=e,r.a.resolve()}}class li extends oi{constructor(e,t,i,n,r){super(i-t+1,r-n+1,e.type),this._expr=e,this._firstRow=t,this._lastRow=i,this._firstColumn=n,this._lastColumn=r,this._submatrix=null,this._cachedMatrix=null,this._operation=null}get _matrix(){return this._submatrix}_evaluate(){return this._expr._evaluate().then(e=>e._matrix!==this._cachedMatrix||null===this._submatrix?(this._cachedMatrix=e._matrix,this._cachedMatrix.block(this._firstRow,this._lastRow,this._firstColumn,this._lastColumn)):this._submatrix).then(e=>(this._submatrix=e,this))}_assign(e){return Ht.enqueue(this._operation?this._operation.update([e]):this._operation=new Lt(e),this._submatrix)}}class di extends oi{constructor(e){super(1,Math.min(e.rows,e.columns),e.type),this._expr=e,this._diagonal=null,this._cachedMatrix=null}get _matrix(){return this._diagonal}_evaluate(){return this._expr._evaluate().then(e=>e._matrix!==this._cachedMatrix||null===this._diagonal?(this._cachedMatrix=e._matrix,this._cachedMatrix.diagonal()):this._diagonal).then(e=>(this._diagonal=e,this))}_assign(e){return Ht.enqueue(this._operation?this._operation.update([e]):this._operation=new Lt(e),this._diagonal)}}class fi extends ti{constructor(e,t,i,n){super(e,t,i),this._operation=new Mt(e,t,i,n)}_evaluate(){return Ht.enqueue(this._operation,this._matrix).then(()=>this)}}class hi extends ii{constructor(e){super(e.rows,e.columns,e,Lt)}}class pi extends ii{constructor(e){if(e instanceof pi)return e.child;super(e.columns,e.rows,e,Rt)}}class ui extends ni{constructor(e,t){super(e.rows,e.columns,e,t,Pt),this._assertCompatibility(t.rows,t.columns)}}class mi extends ni{constructor(e,t){super(e.rows,e.columns,e,t,kt),this._assertCompatibility(t.rows,t.columns)}}class _i extends ni{constructor(e,t){const i=e instanceof pi,n=t instanceof pi;if(i&&n)return new pi(new _i(t.child,e.child));if(i&&!n)return new xi(e.child,t);if(!i&&n)return new vi(e,t.child);if(1===t.columns)return new gi(e,t);if(super(e.rows,t.columns,e,t,Ct),e.columns!==t.rows)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.rows} x ${t.columns} matrix`)}}class xi extends ni{constructor(e,t){if(super(e.columns,t.columns,e,t,Nt),e.rows!==t.rows)throw new s.f(`Can't multiply a ${e.columns} x ${e.rows} (transposed) matrix by a ${t.rows} x ${t.columns} matrix`)}}class vi extends ni{constructor(e,t){if(super(e.rows,t.rows,e,t,Kt),e.columns!==t.columns)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.columns} x ${t.rows} (transposed) matrix`)}}class gi extends ni{constructor(e,t){if(super(e.rows,t.columns,e,t,Ft),e.columns!==t.rows||1!==t.columns)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.rows} x ${t.columns} matrix / column-vector`)}}class yi extends ii{constructor(e,t){super(e.rows,e.columns,e,Dt,t)}}class Si extends ni{constructor(e,t){super(e.rows,e.columns,e,t,zt),this._assertCompatibility(t.rows,t.columns)}}class bi extends ii{constructor(e,t){const i="full"==t?e.columns+e.rows:2*e.columns;if(e.rows<e.columns)throw new s.f(`Can't compute the QR decomposition of a ${e.rows} x ${e.columns} matrix`);super(e.rows,i,e,jt,t)}}class wi extends ni{constructor(e,t){if(e.rows<e.columns)throw new s.f(`Can't compute the QR decomposition of a ${e.rows} x ${e.columns} matrix`);if(1!=t.columns||t.rows!=e.rows)throw new s.f(`Expected a ${e.rows} x 1 column-vector, but found a ${t.rows} x ${t.columns} matrix`);super(e.rows,e.columns+1,e,t,Bt)}}class Oi extends ii{constructor(e){if(e.columns!=e.rows+1)throw new s.f(`Expected a ${e.rows} x ${e.rows+1} matrix, but found a ${e.rows} x ${e.columns} matrix`);super(e.rows,1,e,Ut)}}class Ai extends ni{constructor(e,t){const[i,n]=[e.rows,e.columns];if(i<n)throw new s.f(`Input matrix has more columns than rows - it's ${i} x ${n}`);if(t.rows!=i||1!=t.columns)throw new s.f(`Expected a ${i} x 1 column-vector, but found a ${t.rows} x ${t.columns} matrix`);super(n,1,e,t,Xt)}}const Ei=new class extends Function{_create(e,t=e,i=null,n="float32"){let r=Jt[n],o=null;if(void 0===r)throw new s.f(`Unknown matrix type: "${n}"`);if(null!=i){if(!Array.isArray(i))throw new s.f("Can't initialize Matrix with values "+i);i.length>0&&(o=new Qt(e,t,i,r))}return new ci(e,t,r,o)}Zeros(e,t=e,i="float32"){const n=new Array(e*t).fill(0);return this._create(e,t,n,i)}Ones(e,t=e,i="float32"){const n=new Array(e*t).fill(1);return this._create(e,t,n,i)}Eye(e,t=e,i="float32"){const n=new Array(e*t).fill(0);for(let i=Math.min(e,t)-1;i>=0;i--)n[i*e+i]=1;return this._create(e,t,n,i)}constructor(){return super("...args","return this._create(...args)"),this.bind(this)}};class Ti{static load(e,t={}){return lt.load(e,t)}static camera(e=426,t=240,i={},n={}){return lt.loadCameraStream(e,t,i,n)}static pipeline(){return new ct}static get version(){return"0.5.0-wip"}static get fps(){return ft.instance.fps}static get FeatureDetector(){return et}static get FeatureTracker(){return _t}static get FeatureDescriptor(){return Je}static Vector2(e,t=e){return new pt(e,t)}static get Matrix(){return Ei}static get Promise(){return r.a}}Object.assign(Ti.constructor.prototype,ke)}]);