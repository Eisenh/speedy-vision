/*!
 * speedy-vision.js v0.4.0-wip
 * GPU accelerated Computer Vision for the web
 * https://github.com/alemart/speedy-vision-js
 * 
 * Copyright 2020 Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * @license Apache-2.0
 * 
 * Date: 2020-08-25T01:14:36.845Z
 */
var Speedy=function(e){var t={};function i(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=e,i.c=t,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)i.d(n,r,function(t){return e[t]}.bind(null,r));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=49)}([function(e,t,i){"use strict";i.d(t,"i",(function(){return r})),i.d(t,"h",(function(){return o})),i.d(t,"e",(function(){return s})),i.d(t,"a",(function(){return a})),i.d(t,"f",(function(){return c})),i.d(t,"g",(function(){return l})),i.d(t,"d",(function(){return d})),i.d(t,"k",(function(){return h})),i.d(t,"j",(function(){return p})),i.d(t,"c",(function(){return f})),i.d(t,"b",(function(){return m}));class n extends Error{constructor(e,t=null){super([e,t?t.toString():"@ [speedy-vision.js]"].join("\n-> ")),this._cause=t}get name(){return this.constructor.name}set name(e){}get cause(){return this._cause}}class r extends n{constructor(e="",t=null){super("Unsupported operation. "+e,t)}}class o extends n{constructor(e="",t=null){super("Method not implemented. "+e,t)}}class s extends n{constructor(e="",t=null){super("WebGL error. "+e,t)}}class a extends n{constructor(e="",t=null){super("Can't call abstract method. "+e,t)}}class c extends n{constructor(e="",t=null){super("Illegal argument. "+e,t)}}class l extends n{constructor(e="",t=null){super("Illegal operation. "+e,t)}}class d extends n{constructor(e="",t=null){super("File not found. "+e,t)}}class h extends n{constructor(e="",t=null){super("Timeout error. "+e,t)}}class p extends n{constructor(e="",t=null){super("Parse error. "+e,t)}}class f extends n{constructor(e="",t=null){super("Assertion failed. "+e,t)}}class m extends n{constructor(e="",t=null){super("Access denied. "+e,t)}}},function(e,t,i){"use strict";i.d(t,"b",(function(){return f})),i.d(t,"a",(function(){return m}));var n=i(4),r=i(3),o=i(0);const s=[/\/\*(.|\s)*?\*\//g,/\/\/.*$/gm],a=/^\s*@\s*include\s+"(.*?)"/gm,c=/@(\w+)@/g,l={PYRAMID_MAX_LEVELS:n.b,LOG2_PYRAMID_MAX_SCALE:Math.log2(n.d),PYRAMID_MAX_OCTAVES:n.c,PIXELCOMPONENT_RED:r.d.RED,PIXELCOMPONENT_GREEN:r.d.GREEN,PIXELCOMPONENT_BLUE:r.d.BLUE,PIXELCOMPONENT_ALPHA:r.d.ALPHA};class d{static run(e){return String(e).replace(s[0],"").replace(s[1],"").replace(a,(e,t)=>d.run(function(e){if(String(e).match(/^[a-zA-Z0-9_\-]+\.glsl$/))return i(12)("./"+e);throw new o.d(`Shader preprocessor: can't read file "${e}"`)}(t))).replace(c,(e,t)=>String(l[t]||"UNDEFINED_CONSTANT"))}}const h='#version 300 es\nprecision highp int;\nprecision mediump float;\nprecision mediump sampler2D;\n\nout vec4 color;\nin vec2 texCoord;\nuniform vec2 texSize;\n\n@include "global.glsl"\n';class p{constructor(e){const t=e.filepath||null,n=t?i(13)("./"+t):e.source||"";this._userSource=n,this._fragmentSource=d.run(h+n),this._vertexSource=d.run("#version 300 es\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 texCoord;\n\nvoid main() {\n    gl_Position = vec4(a_position, 0.0, 1.0);\n    texCoord = a_texCoord;\n}"),this._filepath=t||"<in-memory>",this._uniform=this._autodetectUniforms(this._fragmentSource),this._arguments=[]}static create(e){return new p({source:e})}static import(e){if(!String(e).match(/^[a-zA-Z0-9_\-\/]+\.glsl$/))throw new o.d(`Can't import shader: "${e}"`);return new p({filepath:e})}withArguments(...e){this._arguments=e.map(e=>String(e));for(const e of this._arguments)if(!this._uniform.hasOwnProperty(e)&&!this._uniform.hasOwnProperty(e+"[0]"))throw new o.f(`Argument "${e}" has not been declared in the shader`);return this}withDefines(e){const t=[];for(const i of Object.keys(e))t.push(`#define ${i} ${e[i]}\n`);const i=h+t.join("")+this._userSource;return this._fragmentSource=d.run(i),this}get fragmentSource(){return this._fragmentSource}get vertexSource(){return this._vertexSource}get attributes(){return p._attr||(p._attr=Object.freeze({position:"a_position",texCoord:"a_texCoord"}))}get arguments(){return this._arguments}get uniforms(){return Object.keys(this._uniform)}uniformType(e){if(!this._uniform.hasOwnProperty(e))throw new o.f(`Unrecognized uniform variable: "${e}"`);return this._uniform[e]}_autodetectUniforms(e){const t=e,i=/uniform\s+(highp\s+|mediump\s+|lowp\s+)?(\w+)\s+([^;]+)/g,n={};let r;for(;null!==(r=i.exec(t));){const e=r[2],t=r[3].split(",").map(e=>e.trim()).filter(e=>e);for(const i of t)if(i.endsWith("]")){if(!(r=i.match(/(\w+)\s*\[\s*(\d+)\s*\]$/)))throw new o.j(`Unspecified array length for uniform "${i}" in the shader`);const[t,s]=[r[1],Number(r[2])];for(let i=0;i<s;i++)n[`${t}[${i}]`]=e}else n[i]=e}return Object.freeze(n)}}function f(e){return p.import(e)}function m(e){return p.create(e)}},function(e,t,i){"use strict";i.r(t),i.d(t,"conv2D",(function(){return a})),i.d(t,"convX",(function(){return c})),i.d(t,"convY",(function(){return l})),i.d(t,"createKernel2D",(function(){return h})),i.d(t,"createKernel1D",(function(){return p})),i.d(t,"texConv2D",(function(){return f})),i.d(t,"texConvX",(function(){return m})),i.d(t,"texConvY",(function(){return u}));var n=i(1),r=i(0);const o=(e,t)=>[].concat(...e.map(e=>t.map(t=>[e,t]))),s=e=>[...Array(2*e+1).keys()].map(t=>t-e);function a(e,t=1){const i=new Float32Array(e.map(e=>+e*+t)),a=0|Math.sqrt(i.length),c=a>>1;if(a<1||a%2==0)throw new r.f("Can't perform a 2D convolution with an invalid kSize of "+a);if(a*a!=i.length)throw new r.f(`Invalid 2D convolution kernel of ${i.length} elements (expected: square)`);const l=c<=7?"pixelAtShortOffset":"pixelAtLongOffset",d=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n\n        ${h=(e,t,i)=>`\n        result += ${l}(image, ivec2(${0|i}, ${0|t})) * float(${+e});\n    `,o(s(c),s(c)).map(e=>h(i[(e[0]+c)*a+(e[1]+c)],e[0],e[1])).join("\n")}\n\n        color = vec4(result.rgb, alpha);\n    }\n    `;var h;return Object(n.a)(d).withArguments("image")}function c(e,t=1){return d("x",e,t)}function l(e,t=1){return d("y",e,t)}function d(e,t,i=1){const o=new Float32Array(t.map(e=>+e*+i)),a=o.length,c=a>>1;if(a<1||a%2==0)throw new r.f("Can't perform a 1D convolution with an invalid kSize of "+a);if("x"!=e&&"y"!=e)throw new r.f(`Can't perform 1D convolution: invalid axis "${e}"`);const l=c<=7?"pixelAtShortOffset":"pixelAtLongOffset",d=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 pixel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n\n        ${h=(t,i)=>"x"==e?`\n        pixel += ${l}(image, ivec2(${0|i}, 0)) * float(${+t});\n    `:`\n        pixel += ${l}(image, ivec2(0, ${0|i})) * float(${+t});\n    `,s(c).reduce((e,t)=>e+h(o[t+c],t),"")}\n\n        color = vec4(pixel.rgb, alpha);\n    }\n    `;var h;return Object(n.a)(d).withArguments("image")}function h(e){if((e|=0)<1||e%2==0)throw new r.f("Can't create a 2D texture kernel of size "+e);const t=`\n    uniform float kernel[${e*e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[(${e}) * thread.y + thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(e1) / 256.0f, floor(e2) / 256.0f, floor(e3) / 256.0f);\n    }\n    `;return Object(n.a)(t).withArguments("kernel")}function p(e){if((e|=0)<1||e%2==0)throw new r.f("Can't create a 1D texture kernel of size "+e);const t=`\n    uniform float kernel[${e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(e1) / 256.0f, floor(e2) / 256.0f, floor(e3) / 256.0f);\n    }\n    `;return Object(n.a)(t).withArguments("kernel")}function f(e){const t=e>>1;if(e<1||e%2==0)throw new r.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);const i=t<=7?"pixelAtShortOffset":"pixelAtLongOffset",a=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${c=(e,n)=>`\n        kernel = pixelAt(texKernel, ivec2(${e+t}, ${n+t}));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${i}(image, ivec2(${e}, ${n})) * value;\n    `,o(s(t),s(t)).map(e=>c(e[0],e[1])).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var c;return Object(n.a)(a).withArguments("image","texKernel","scale","offset")}const m=e=>v(e,"x"),u=e=>v(e,"y");function v(e,t){const i=e>>1;if(e<1||e%2==0)throw new r.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);if("x"!=t&&"y"!=t)throw new r.f(`Can't perform a texture-based 1D convolution: invalid axis "${t}"`);const o=i<=7?"pixelAtShortOffset":"pixelAtLongOffset",a=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        vec4 result = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${c=e=>"x"==t?`\n        kernel = pixelAt(texKernel, ivec2(${e+i}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(${e}, 0)) * value;\n    `:`\n        kernel = pixelAt(texKernel, ivec2(${e+i}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(0, ${e})) * value;\n    `,s(i).map(c).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var c;return Object(n.a)(a).withArguments("image","texKernel","scale","offset")}},function(e,t,i){"use strict";i.d(t,"c",(function(){return r})),i.d(t,"b",(function(){return o})),i.d(t,"d",(function(){return s})),i.d(t,"a",(function(){return a}));var n=i(5);const r=n.a.enum("Image","Video","Canvas","Texture"),o=n.a.enum("RGB","Greyscale","Binary"),s=Object.freeze({RED:1,GREEN:2,BLUE:4,ALPHA:8,ALL:15}),a=Object.freeze({[s.RED]:0,[s.GREEN]:1,[s.BLUE]:2,[s.ALPHA]:3})},function(e,t,i){"use strict";i.d(t,"a",(function(){return n})),i.d(t,"b",(function(){return r})),i.d(t,"c",(function(){return o})),i.d(t,"d",(function(){return s}));const n=65534,r=4,o=2*r-1,s=2},function(e,t,i){"use strict";i.d(t,"a",(function(){return r}));var n=i(0);class r{static warning(e,...t){const i=[e,...t].join(" ");return console.warn("[speedy-vision.js]",i),i}static log(e,...t){const i=[e,...t].join(" ");return console.log("[speedy-vision.js]",i),i}static assert(e,t=""){if(!e)throw new n.c(t)}static enum(...e){return Object.freeze(e.reduce((e,t)=>(e[t]=Symbol(t),e),{}))}static get setZeroTimeout(){return this._setZeroTimeout||(this._setZeroTimeout=(()=>{const e="0%"+Math.random().toString(36).slice(2),t=[];return window.addEventListener("message",i=>{i.source===window&&i.data===e&&(event.stopPropagation(),t.shift().call(window))},!0),function(i){t.push(i),window.postMessage(e,"*")}})())}static functionArguments(e){const t=e.toString(),i=t.startsWith("function")?"function\\s.*\\(([^)]*)\\)":t.startsWith("(")?"\\(([^)]*)\\).*=>":"([^=]+).*=>",r=new RegExp(i).exec(t);if(null!==r){return r[1].replace(/\/\*.*?\*\//g,"").split(",").map(e=>e.replace(/=.*$/,"").trim()).filter(e=>e)}throw new n.j("Can't detect function arguments of "+t)}static gaussianNoise(e=0,t=1){const i=2*Math.PI;let n,r=Math.random();do{n=Math.random()}while(n<=Number.EPSILON);return Math.sqrt(-2*Math.log(n))*Math.sin(i*r)*t+e}static gaussianKernel(e,t=-1,i=!1){if(t<0&&(t=0|Math.ceil(5*e),t+=1-t%2),(t|=0)<1||t%2==0)throw new n.f(`Invalid kernel size given to gaussianKernel: ${t} x 1`);if(e<=0)throw new n.f("Invalid sigma given to gaussianKernel: "+e);const r=new Array(t),o=t>>1,s=+e*Math.sqrt(2),a=.3275911,c=.254829592,l=-.284496736,d=1.421413741,h=-1.453152027,p=1.061405429;let f=0;for(let e=0;e<t;e++){let t=(e-o+.5)/s,i=(e-o-.5)/s,n=1,m=1;t<0&&(n=-1,t=-t),i<0&&(m=-1,i=-i);const u=1/(1+a*t),v=1/(1+a*i),g=((((p*v+h)*v+d)*v+l)*v+c)*v,x=(n*(1-((((p*u+h)*u+d)*u+l)*u+c)*u*Math.exp(-t*t))-m*(1-g*Math.exp(-i*i)))/(2*s);r[e]=x,f+=x}return i?r.map(e=>e/f):r}}},function(e,t){e.exports="#ifndef _COLORS_GLSL\n#define _COLORS_GLSL\n#define PIXELCOMPONENT_RED   @PIXELCOMPONENT_RED@\n#define PIXELCOMPONENT_GREEN @PIXELCOMPONENT_GREEN@\n#define PIXELCOMPONENT_BLUE  @PIXELCOMPONENT_BLUE@\n#define PIXELCOMPONENT_ALPHA @PIXELCOMPONENT_ALPHA@\n#endif"},function(e,t){e.exports="#ifndef _GLOBAL_GLSL\n#define _GLOBAL_GLSL\n#define threadLocation() ivec2(texCoord * texSize)\n#define outputSize() ivec2(texSize)\n#define DEBUG(scalar) do { color = vec4(float(scalar), 0.0f, 0.0f, 1.0f); return; } while(false)\n#define threadPixel(img) textureLod((img), texCoord, 0.0f)\n#define pixelAt(img, pos) texelFetch((img), (pos), 0)\n#define pixelAtShortOffset(img, offset) textureLodOffset((img), texCoord, 0.0f, (offset))\n#define pixelAtLongOffset(img, offset) textureLod((img), texCoord + vec2(offset) / texSize, 0.0f)\n#endif"},function(e,t){e.exports="#ifndef _MATH_GLSL\n#define _MATH_GLSL\n#define TWO_PI          6.28318530718f\n#define PI              3.14159265359f\n#define PI_OVER_2       1.57079632679f\n#define PI_OVER_4       0.78539816339f\n#define INV_PI          0.3183098861837907f\n#define USE_FAST_ATAN\n#ifdef USE_FAST_ATAN\nfloat fastAtan(float x)\n{\nfloat w = 1.0f - abs(x);\nreturn (w >= 0.0f) ?\n(PI_OVER_4 + 0.273f * w) * x :\nsign(x) * PI_OVER_2 - (PI_OVER_4 + 0.273f * (1.0f - abs(1.0f / x))) / x;\n}\n#else\n#define fastAtan(x) atan(x)\n#endif\n#ifdef USE_FAST_ATAN\nfloat fastAtan2(float y, float x)\n{\nreturn (x == 0.0f) ? PI_OVER_2 * sign(y) : fastAtan(y / x) + float(x < 0.0f) * PI * sign(y);\n}\n#else\n#define fastAtan2(y, x) atan((y), (x))\n#endif\n#endif"},function(e,t){e.exports='#ifndef _ORIENTATION_GLSL\n#define _ORIENTATION_GLSL\n@include "math.glsl"\n#define encodeOrientation(angle) ((angle) * INV_PI + 1.0f) * 0.5f\n#define decodeOrientation(value) ((value) * 2.0f - 1.0f) * PI\n#endif'},function(e,t){e.exports="#ifndef _PYRAMIDS_GLSL\n#define _PYRAMIDS_GLSL\n#define pyrPixel(pyr, lod) textureLod((pyr), texCoord, (lod))\n#define pyrPixelAtOffset(pyr, lod, pot, offset) textureLod((pyr), texCoord + ((pot) * vec2(offset)) / texSize, (lod))\n#define pyrPixelAt(pyr, pos, lod) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / texSize, (lod))\n#define pyrPixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define PYRAMID_MAX_LEVELS      float(@PYRAMID_MAX_LEVELS@)\n#define PYRAMID_MAX_OCTAVES     int(@PYRAMID_MAX_OCTAVES@)\n#define LOG2_PYRAMID_MAX_SCALE  float(@LOG2_PYRAMID_MAX_SCALE@)\nfloat encodeLod(float lod)\n{\nreturn (LOG2_PYRAMID_MAX_SCALE + lod) / (LOG2_PYRAMID_MAX_SCALE + PYRAMID_MAX_LEVELS);\n}\nfloat decodeLod(float encodedLod)\n{\nreturn mix(0.0f,\nencodedLod * (LOG2_PYRAMID_MAX_SCALE + PYRAMID_MAX_LEVELS) - LOG2_PYRAMID_MAX_SCALE,\nencodedLod < 1.0f\n);\n}\n#define isSameEncodedLod(alpha1, alpha2) (abs((alpha1) - (alpha2)) < encodedLodEps)\nconst float encodedLodEps = 0.2 / (LOG2_PYRAMID_MAX_SCALE + PYRAMID_MAX_LEVELS);\n#endif"},function(e,t){e.exports="#ifndef _SOBEL_GLSL\n#define _SOBEL_GLSL\nvec4 encodeSobel(vec2 df)\n{\nvec2 zeroes = vec2(0.0f, 0.0f);\nvec2 dmax = -max(df, zeroes);\nvec2 dmin = min(df, zeroes);\nreturn exp2(vec4(dmax, dmin));\n}\nvec2 decodeSobel(vec4 encodedSobel)\n{\nvec4 lg = log2(encodedSobel);\nreturn vec2(lg.b - lg.r, lg.a - lg.g);\n}\n#endif"},function(e,t,i){var n={"./colors.glsl":6,"./global.glsl":7,"./math.glsl":8,"./orientation.glsl":9,"./pyramids.glsl":10,"./sobel.glsl":11};function r(e){var t=o(e);return i(t)}function o(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=o,e.exports=r,r.id=12},function(e,t,i){var n={"./colors/rgb2grey.glsl":14,"./descriptors/orb.glsl":15,"./encoders/encode-keypoint-offsets.glsl":16,"./encoders/encode-keypoints.glsl":17,"./encoders/orient-encoded-keypoints.glsl":18,"./enhancements/nightvision.glsl":19,"./enhancements/normalize-image.glsl":20,"./filters/convolution":2,"./filters/convolution.js":2,"./include/colors.glsl":6,"./include/global.glsl":7,"./include/math.glsl":8,"./include/orientation.glsl":9,"./include/pyramids.glsl":10,"./include/sobel.glsl":11,"./keypoints/brisk.glsl":21,"./keypoints/fast-score12.glsl":22,"./keypoints/fast-score16.glsl":23,"./keypoints/fast-score8.glsl":24,"./keypoints/fast5.glsl":25,"./keypoints/fast7.glsl":26,"./keypoints/fast9lg.glsl":27,"./keypoints/harris-cutoff.glsl":28,"./keypoints/multiscale-fast.glsl":29,"./keypoints/multiscale-harris.glsl":30,"./keypoints/multiscale-sobel.glsl":31,"./keypoints/multiscale-suppression.glsl":32,"./keypoints/nonmax-suppression.glsl":33,"./keypoints/samescale-suppression.glsl":34,"./pyramids/crop.glsl":35,"./pyramids/downsample2.glsl":36,"./pyramids/downsample3.glsl":37,"./pyramids/merge-keypoints-at-consecutive-levels.glsl":38,"./pyramids/merge-keypoints.glsl":39,"./pyramids/normalize-keypoints.glsl":40,"./pyramids/upsample2.glsl":41,"./pyramids/upsample3.glsl":42,"./utils/copy-components.glsl":43,"./utils/fill-components.glsl":44,"./utils/fill.glsl":45,"./utils/flip-y.glsl":46,"./utils/identity.glsl":47,"./utils/scan-minmax2d.glsl":48};function r(e){var t=o(e);return i(t)}function o(e){if(!i.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=o,e.exports=r,r.id=13},function(e,t){e.exports="const vec4 grey = vec4(0.299f, 0.587f, 0.114f, 0.0f);\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat g = dot(pixel, grey);\ncolor = vec4(g, g, g, 1.0f);\n}"},function(e,t){e.exports='@include "math.glsl"\n@include "pyramids.glsl"\n@include "orientation.glsl"\nuniform sampler2D encodedCorners;\nuniform int encoderLength;\nuniform sampler2D pyramid;\nconst int descriptorSize = 32;\nconst int pixelsPerKeypoint = 10;\nconst ivec4 pat31[256] = ivec4[256](\nivec4(8,-3,9,5),\nivec4(4,2,7,-12),\nivec4(-11,9,-8,2),\nivec4(7,-12,12,-13),\nivec4(2,-13,2,12),\nivec4(1,-7,1,6),\nivec4(-2,-10,-2,-4),\nivec4(-13,-13,-11,-8),\nivec4(-13,-3,-12,-9),\nivec4(10,4,11,9),\nivec4(-13,-8,-8,-9),\nivec4(-11,7,-9,12),\nivec4(7,7,12,6),\nivec4(-4,-5,-3,0),\nivec4(-13,2,-12,-3),\nivec4(-9,0,-7,5),\nivec4(12,-6,12,-1),\nivec4(-3,6,-2,12),\nivec4(-6,-13,-4,-8),\nivec4(11,-13,12,-8),\nivec4(4,7,5,1),\nivec4(5,-3,10,-3),\nivec4(3,-7,6,12),\nivec4(-8,-7,-6,-2),\nivec4(-2,11,-1,-10),\nivec4(-13,12,-8,10),\nivec4(-7,3,-5,-3),\nivec4(-4,2,-3,7),\nivec4(-10,-12,-6,11),\nivec4(5,-12,6,-7),\nivec4(5,-6,7,-1),\nivec4(1,0,4,-5),\nivec4(9,11,11,-13),\nivec4(4,7,4,12),\nivec4(2,-1,4,4),\nivec4(-4,-12,-2,7),\nivec4(-8,-5,-7,-10),\nivec4(4,11,9,12),\nivec4(0,-8,1,-13),\nivec4(-13,-2,-8,2),\nivec4(-3,-2,-2,3),\nivec4(-6,9,-4,-9),\nivec4(8,12,10,7),\nivec4(0,9,1,3),\nivec4(7,-5,11,-10),\nivec4(-13,-6,-11,0),\nivec4(10,7,12,1),\nivec4(-6,-3,-6,12),\nivec4(10,-9,12,-4),\nivec4(-13,8,-8,-12),\nivec4(-13,0,-8,-4),\nivec4(3,3,7,8),\nivec4(5,7,10,-7),\nivec4(-1,7,1,-12),\nivec4(3,-10,5,6),\nivec4(2,-4,3,-10),\nivec4(-13,0,-13,5),\nivec4(-13,-7,-12,12),\nivec4(-13,3,-11,8),\nivec4(-7,12,-4,7),\nivec4(6,-10,12,8),\nivec4(-9,-1,-7,-6),\nivec4(-2,-5,0,12),\nivec4(-12,5,-7,5),\nivec4(3,-10,8,-13),\nivec4(-7,-7,-4,5),\nivec4(-3,-2,-1,-7),\nivec4(2,9,5,-11),\nivec4(-11,-13,-5,-13),\nivec4(-1,6,0,-1),\nivec4(5,-3,5,2),\nivec4(-4,-13,-4,12),\nivec4(-9,-6,-9,6),\nivec4(-12,-10,-8,-4),\nivec4(10,2,12,-3),\nivec4(7,12,12,12),\nivec4(-7,-13,-6,5),\nivec4(-4,9,-3,4),\nivec4(7,-1,12,2),\nivec4(-7,6,-5,1),\nivec4(-13,11,-12,5),\nivec4(-3,7,-2,-6),\nivec4(7,-8,12,-7),\nivec4(-13,-7,-11,-12),\nivec4(1,-3,12,12),\nivec4(2,-6,3,0),\nivec4(-4,3,-2,-13),\nivec4(-1,-13,1,9),\nivec4(7,1,8,-6),\nivec4(1,-1,3,12),\nivec4(9,1,12,6),\nivec4(-1,-9,-1,3),\nivec4(-13,-13,-10,5),\nivec4(7,7,10,12),\nivec4(12,-5,12,9),\nivec4(6,3,7,11),\nivec4(5,-13,6,10),\nivec4(2,-12,2,3),\nivec4(3,8,4,-6),\nivec4(2,6,12,-13),\nivec4(9,-12,10,3),\nivec4(-8,4,-7,9),\nivec4(-11,12,-4,-6),\nivec4(1,12,2,-8),\nivec4(6,-9,7,-4),\nivec4(2,3,3,-2),\nivec4(6,3,11,0),\nivec4(3,-3,8,-8),\nivec4(7,8,9,3),\nivec4(-11,-5,-6,-4),\nivec4(-10,11,-5,10),\nivec4(-5,-8,-3,12),\nivec4(-10,5,-9,0),\nivec4(8,-1,12,-6),\nivec4(4,-6,6,-11),\nivec4(-10,12,-8,7),\nivec4(4,-2,6,7),\nivec4(-2,0,-2,12),\nivec4(-5,-8,-5,2),\nivec4(7,-6,10,12),\nivec4(-9,-13,-8,-8),\nivec4(-5,-13,-5,-2),\nivec4(8,-8,9,-13),\nivec4(-9,-11,-9,0),\nivec4(1,-8,1,-2),\nivec4(7,-4,9,1),\nivec4(-2,1,-1,-4),\nivec4(11,-6,12,-11),\nivec4(-12,-9,-6,4),\nivec4(3,7,7,12),\nivec4(5,5,10,8),\nivec4(0,-4,2,8),\nivec4(-9,12,-5,-13),\nivec4(0,7,2,12),\nivec4(-1,2,1,7),\nivec4(5,11,7,-9),\nivec4(3,5,6,-8),\nivec4(-13,-4,-8,9),\nivec4(-5,9,-3,-3),\nivec4(-4,-7,-3,-12),\nivec4(6,5,8,0),\nivec4(-7,6,-6,12),\nivec4(-13,6,-5,-2),\nivec4(1,-10,3,10),\nivec4(4,1,8,-4),\nivec4(-2,-2,2,-13),\nivec4(2,-12,12,12),\nivec4(-2,-13,0,-6),\nivec4(4,1,9,3),\nivec4(-6,-10,-3,-5),\nivec4(-3,-13,-1,1),\nivec4(7,5,12,-11),\nivec4(4,-2,5,-7),\nivec4(-13,9,-9,-5),\nivec4(7,1,8,6),\nivec4(7,-8,7,6),\nivec4(-7,-4,-7,1),\nivec4(-8,11,-7,-8),\nivec4(-13,6,-12,-8),\nivec4(2,4,3,9),\nivec4(10,-5,12,3),\nivec4(-6,-5,-6,7),\nivec4(8,-3,9,-8),\nivec4(2,-12,2,8),\nivec4(-11,-2,-10,3),\nivec4(-12,-13,-7,-9),\nivec4(-11,0,-10,-5),\nivec4(5,-3,11,8),\nivec4(-2,-13,-1,12),\nivec4(-1,-8,0,9),\nivec4(-13,-11,-12,-5),\nivec4(-10,-2,-10,11),\nivec4(-3,9,-2,-13),\nivec4(2,-3,3,2),\nivec4(-9,-13,-4,0),\nivec4(-4,6,-3,-10),\nivec4(-4,12,-2,-7),\nivec4(-6,-11,-4,9),\nivec4(6,-3,6,11),\nivec4(-13,11,-5,5),\nivec4(11,11,12,6),\nivec4(7,-5,12,-2),\nivec4(-1,12,0,7),\nivec4(-4,-8,-3,-2),\nivec4(-7,1,-6,7),\nivec4(-13,-12,-8,-13),\nivec4(-7,-2,-6,-8),\nivec4(-8,5,-6,-9),\nivec4(-5,-1,-4,5),\nivec4(-13,7,-8,10),\nivec4(1,5,5,-13),\nivec4(1,0,10,-13),\nivec4(9,12,10,-1),\nivec4(5,-8,10,-9),\nivec4(-1,11,1,-13),\nivec4(-9,-3,-6,2),\nivec4(-1,-10,1,12),\nivec4(-13,1,-8,-10),\nivec4(8,-11,10,-6),\nivec4(2,-13,3,-6),\nivec4(7,-13,12,-9),\nivec4(-10,-10,-5,-7),\nivec4(-10,-8,-8,-13),\nivec4(4,-6,8,5),\nivec4(3,12,8,-13),\nivec4(-4,2,-3,-3),\nivec4(5,-13,10,-12),\nivec4(4,-13,5,-1),\nivec4(-9,9,-4,3),\nivec4(0,3,3,-9),\nivec4(-12,1,-6,1),\nivec4(3,2,4,-8),\nivec4(-10,-10,-10,9),\nivec4(8,-13,12,12),\nivec4(-8,-12,-6,-5),\nivec4(2,2,3,7),\nivec4(10,6,11,-8),\nivec4(6,8,8,-12),\nivec4(-7,10,-6,5),\nivec4(-3,-9,-3,9),\nivec4(-1,-13,-1,5),\nivec4(-3,-7,-3,4),\nivec4(-8,-2,-8,3),\nivec4(4,2,12,12),\nivec4(2,-5,3,11),\nivec4(6,-9,11,-13),\nivec4(3,-1,7,12),\nivec4(11,-1,12,4),\nivec4(-3,0,-3,6),\nivec4(4,-11,4,12),\nivec4(2,-4,2,1),\nivec4(-10,-6,-8,1),\nivec4(-13,7,-11,1),\nivec4(-13,12,-11,-13),\nivec4(6,0,11,-13),\nivec4(0,-1,1,4),\nivec4(-13,3,-9,-2),\nivec4(-9,8,-6,-3),\nivec4(-13,-6,-8,-2),\nivec4(5,-9,8,10),\nivec4(2,7,3,-9),\nivec4(-1,-6,-1,-1),\nivec4(9,5,11,-2),\nivec4(11,-3,12,-8),\nivec4(3,0,3,5),\nivec4(-1,4,0,10),\nivec4(3,-6,4,5),\nivec4(-13,0,-10,5),\nivec4(5,8,12,11),\nivec4(8,9,9,-6),\nivec4(7,-4,8,-12),\nivec4(-10,4,-10,9),\nivec4(7,3,12,4),\nivec4(9,-7,10,-2),\nivec4(7,0,12,-2),\nivec4(-1,-6,0,-11)\n);\nvoid getPair(int index, float kcos, float ksin, out ivec2 p, out ivec2 q)\n{\nivec4 data = pat31[index];\nvec2 op = vec2(data.xy);\nvec2 oq = vec2(data.zw);\np = ivec2(round(op.x * kcos - op.y * ksin), round(op.x * ksin + op.y * kcos));\nq = ivec2(round(oq.x * kcos - oq.y * ksin), round(oq.x * ksin + oq.y * kcos));\n}\nstruct ORBFeature\n{\nivec2 position;\nfloat orientation;\nfloat lod;\n};\nvoid main()\n{\nORBFeature keypoint;\nvec4 pixel = threadPixel(encodedCorners);\nivec2 thread = threadLocation();\nint threadRaster = thread.y * encoderLength + thread.x;\nint keypointId = int(threadRaster / pixelsPerKeypoint);\nint descriptorCell = threadRaster % pixelsPerKeypoint - 2;\ncolor = pixel;\nif(descriptorCell < 0)\nreturn;\nint positionCell = keypointId * pixelsPerKeypoint;\nivec2 positionCellPos = ivec2(positionCell % encoderLength, positionCell / encoderLength);\nivec4 encodedPosition = ivec4(texelFetch(encodedCorners, positionCellPos, 0) * 255.0f);\nkeypoint.position = ivec2(\nencodedPosition.r | (encodedPosition.g << 8),\nencodedPosition.b | (encodedPosition.a << 8)\n);\nint propertiesCell = keypointId * pixelsPerKeypoint + 1;\nivec2 propertiesCellPos = ivec2(propertiesCell % encoderLength, propertiesCell / encoderLength);\nvec4 encodedProperties = texelFetch(encodedCorners, propertiesCellPos, 0);\nkeypoint.orientation = decodeOrientation(encodedProperties.g);\nkeypoint.lod = decodeLod(encodedProperties.r);\nfloat pot = exp2(keypoint.lod);\nvec2 kpos = vec2(keypoint.position);\nfloat kcos = cos(keypoint.orientation);\nfloat ksin = sin(keypoint.orientation);\nvec2 imageSize = vec2(textureSize(pyramid, 0));\nint patternStart = 32 * descriptorCell;\nuint test[4] = uint[4](0u, 0u, 0u, 0u);\nfor(int t = 0; t < 4; t++) {\nuint bits = 0u;\nivec2 p, q;\nvec4 a, b;\nint i = t * 8;\nfor(int j = 0; j < 8; j++) {\ngetPair(patternStart + i + j, kcos, ksin, p, q);\na = pyrPixelAtEx(pyramid, round(kpos + pot * vec2(p)), keypoint.lod, imageSize);\nb = pyrPixelAtEx(pyramid, round(kpos + pot * vec2(q)), keypoint.lod, imageSize);\nbits |= uint(a.g < b.g) << j;\n}\ntest[t] = bits;\n}\ncolor = vec4(float(test[0]) / 255.0f, float(test[1]) / 255.0f, float(test[2]) / 255.0f, float(test[3]) / 255.0f);\n}'},function(e,t){e.exports="uniform sampler2D image;\nuniform ivec2 imageSize;\nuniform int maxIterations;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 pos = threadLocation();\nint offset = -1;\nwhile(offset < maxIterations && pos.y < imageSize.y && pixelAt(image, pos).r == 0.0f) {\n++offset;\npos.x = (pos.x + 1) % imageSize.x;\npos.y += int(pos.x == 0);\n}\ncolor = vec4(pixel.r, float(max(0, offset)) / 255.0f, pixel.ba);\n}"},function(e,t){e.exports='@include "orientation.glsl"\nuniform sampler2D image;\nuniform ivec2 imageSize;\nuniform int encoderLength;\nuniform int descriptorSize;\nbool findQthKeypoint(int q, out ivec2 position, out vec4 pixel)\n{\nint i = 0, p = 0;\nfor(position = ivec2(0, 0); position.y < imageSize.y; ) {\npixel = texelFetch(image, position, 0);\nif(pixel.r > 0.0f) {\nif(p++ == q)\nreturn true;\n}\ni += 1 + int(pixel.g * 255.0f);\nposition = ivec2(i % imageSize.x, i / imageSize.x);\n}\nreturn false;\n}\nvoid main()\n{\nvec4 pixel;\nivec2 position;\nivec2 thread = threadLocation();\nint p = encoderLength * thread.y + thread.x;\nint d = 2 + descriptorSize / 4;\nint q = p / d;\ncolor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nif(findQthKeypoint(q, position, pixel)) {\nint r = p % d;\nswitch(r) {\ncase 0: {\nivec2 lo = position & 255;\nivec2 hi = position >> 8;\ncolor = vec4(float(lo.x), float(hi.x), float(lo.y), float(hi.y)) / 255.0f;\nbreak;\n}\ncase 1: {\nfloat score = pixel.r;\nfloat scale = pixel.a;\nfloat rotation = encodeOrientation(0.0f);\ncolor = vec4(scale, rotation, score, 0.0f);\nbreak;\n}\ndefault: {\ncolor = vec4(0.0f);\nbreak;\n}\n}\n}\n}'},function(e,t){e.exports='@include "math.glsl"\n@include "pyramids.glsl"\n@include "orientation.glsl"\nuniform sampler2D pyramid;\nuniform int patchRadius;\nuniform sampler2D encodedKeypoints;\nuniform int encoderLength;\nuniform int descriptorSize;\nconst int patchStart[8] = int[8](0, 0, 8, 28, 64, 132, 228, 356);\nconst int patchPointCount[8] = int[8](0, 8, 20, 36, 68, 96, 128, 168);\nconst ivec2 patchData[524] = ivec2[524](\nivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(-1,0),ivec2(1,0),ivec2(-1,1),ivec2(0,1),ivec2(1,1),\nivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(-1,2),ivec2(0,2),ivec2(1,2),\nivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(-1,3),ivec2(0,3),ivec2(1,3),\nivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),\nivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),\nivec2(-2,-6),ivec2(-1,-6),ivec2(0,-6),ivec2(1,-6),ivec2(2,-6),ivec2(-3,-5),ivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(3,-5),ivec2(-4,-4),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(4,-4),ivec2(-5,-3),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(5,-3),ivec2(-6,-2),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(6,-2),ivec2(-6,-1),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(6,-1),ivec2(-6,0),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(6,0),ivec2(-6,1),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(6,1),ivec2(-6,2),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(6,2),ivec2(-5,3),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(5,3),ivec2(-4,4),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(4,4),ivec2(-3,5),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),ivec2(3,5),ivec2(-2,6),ivec2(-1,6),ivec2(0,6),ivec2(1,6),ivec2(2,6),\nivec2(-2,-7),ivec2(-1,-7),ivec2(0,-7),ivec2(1,-7),ivec2(2,-7),ivec2(-4,-6),ivec2(-3,-6),ivec2(-2,-6),ivec2(-1,-6),ivec2(0,-6),ivec2(1,-6),ivec2(2,-6),ivec2(3,-6),ivec2(4,-6),ivec2(-5,-5),ivec2(-3,-5),ivec2(-2,-5),ivec2(-1,-5),ivec2(0,-5),ivec2(1,-5),ivec2(2,-5),ivec2(3,-5),ivec2(5,-5),ivec2(-6,-4),ivec2(-4,-4),ivec2(-3,-4),ivec2(-2,-4),ivec2(-1,-4),ivec2(0,-4),ivec2(1,-4),ivec2(2,-4),ivec2(3,-4),ivec2(4,-4),ivec2(6,-4),ivec2(-6,-3),ivec2(-5,-3),ivec2(-4,-3),ivec2(-3,-3),ivec2(-2,-3),ivec2(-1,-3),ivec2(0,-3),ivec2(1,-3),ivec2(2,-3),ivec2(3,-3),ivec2(4,-3),ivec2(5,-3),ivec2(6,-3),ivec2(-7,-2),ivec2(-6,-2),ivec2(-5,-2),ivec2(-4,-2),ivec2(-3,-2),ivec2(-2,-2),ivec2(-1,-2),ivec2(0,-2),ivec2(1,-2),ivec2(2,-2),ivec2(3,-2),ivec2(4,-2),ivec2(5,-2),ivec2(6,-2),ivec2(7,-2),ivec2(-7,-1),ivec2(-6,-1),ivec2(-5,-1),ivec2(-4,-1),ivec2(-3,-1),ivec2(-2,-1),ivec2(-1,-1),ivec2(0,-1),ivec2(1,-1),ivec2(2,-1),ivec2(3,-1),ivec2(4,-1),ivec2(5,-1),ivec2(6,-1),ivec2(7,-1),ivec2(-7,0),ivec2(-6,0),ivec2(-5,0),ivec2(-4,0),ivec2(-3,0),ivec2(-2,0),ivec2(-1,0),ivec2(1,0),ivec2(2,0),ivec2(3,0),ivec2(4,0),ivec2(5,0),ivec2(6,0),ivec2(7,0),ivec2(-7,1),ivec2(-6,1),ivec2(-5,1),ivec2(-4,1),ivec2(-3,1),ivec2(-2,1),ivec2(-1,1),ivec2(0,1),ivec2(1,1),ivec2(2,1),ivec2(3,1),ivec2(4,1),ivec2(5,1),ivec2(6,1),ivec2(7,1),ivec2(-7,2),ivec2(-6,2),ivec2(-5,2),ivec2(-4,2),ivec2(-3,2),ivec2(-2,2),ivec2(-1,2),ivec2(0,2),ivec2(1,2),ivec2(2,2),ivec2(3,2),ivec2(4,2),ivec2(5,2),ivec2(6,2),ivec2(7,2),ivec2(-6,3),ivec2(-5,3),ivec2(-4,3),ivec2(-3,3),ivec2(-2,3),ivec2(-1,3),ivec2(0,3),ivec2(1,3),ivec2(2,3),ivec2(3,3),ivec2(4,3),ivec2(5,3),ivec2(6,3),ivec2(-6,4),ivec2(-4,4),ivec2(-3,4),ivec2(-2,4),ivec2(-1,4),ivec2(0,4),ivec2(1,4),ivec2(2,4),ivec2(3,4),ivec2(4,4),ivec2(6,4),ivec2(-5,5),ivec2(-3,5),ivec2(-2,5),ivec2(-1,5),ivec2(0,5),ivec2(1,5),ivec2(2,5),ivec2(3,5),ivec2(5,5),ivec2(-4,6),ivec2(-3,6),ivec2(-2,6),ivec2(-1,6),ivec2(0,6),ivec2(1,6),ivec2(2,6),ivec2(3,6),ivec2(4,6),ivec2(-2,7),ivec2(-1,7),ivec2(0,7),ivec2(1,7),ivec2(2,7)\n);\nconst int MIN_PATCH_RADIUS = 3;\nconst int MAX_PATCH_RADIUS = 7;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nint threadRaster = thread.y * encoderLength + thread.x;\nint pixelsPerKeypoint = 2 + descriptorSize / 4;\nint keypointId = int(threadRaster / pixelsPerKeypoint);\nint keypointCell = threadRaster % pixelsPerKeypoint;\ncolor = pixel;\nif(keypointCell != 1)\nreturn;\nint positionCell = keypointId * pixelsPerKeypoint;\nivec2 positionCellPos = ivec2(positionCell % encoderLength, positionCell / encoderLength);\nivec4 encodedPosition = ivec4(texelFetch(encodedKeypoints, positionCellPos, 0) * 255.0f);\nivec2 keypointPosition = ivec2(\nencodedPosition.r | (encodedPosition.g << 8),\nencodedPosition.b | (encodedPosition.a << 8)\n);\nfloat lod = decodeLod(pixel.r);\nfloat pot = exp2(lod);\nvec2 m = vec2(0.0f);\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nint scaledRadius = int(ceil(float(patchRadius) / pot));\nint radius = clamp(scaledRadius, MIN_PATCH_RADIUS, MAX_PATCH_RADIUS);\nint start = patchStart[radius];\nint count = patchPointCount[radius];\nfor(int j = 0; j < count; j++) {\nvec2 offset = vec2(patchData[start + j]);\nivec2 position = keypointPosition + ivec2(round(pot * offset));\nvec4 patchPixel = pyrPixelAtEx(pyramid, position, lod, pyrBaseSize);\nm += offset * patchPixel.g;\n}\nfloat angle = fastAtan2(m.y, m.x);\ncolor.g = encodeOrientation(angle);\n}'},function(e,t){e.exports="uniform sampler2D image;\nuniform sampler2D illuminationMap;\nuniform float gain;\nuniform float offset;\nconst mat3 rgb2yuv = mat3(\n0.299f, -0.14713f, 0.615f,\n0.587f, -0.28886f, -0.51499f,\n0.114f, 0.436f, -0.10001f\n);\nconst mat3 yuv2rgb = mat3(\n1.0f, 1.0f, 1.0f,\n0.0f, -0.39465f, 2.03211f,\n1.13983f, -0.58060f, 0.0f\n);\nconst float eps = 0.0001f;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nvec4 imapPixel = threadPixel(illuminationMap);\n#ifdef GREYSCALE\nfloat luma = log(pixel.g + eps) - log(imapPixel.g + eps);\nluma = luma * gain + offset;\nluma = clamp(luma, 0.0f, 1.0f);\ncolor = vec4(luma, luma, luma, 1.0f);\n#else\nvec3 yuvPixel = rgb2yuv * pixel.rgb;\nvec3 yuvImapPixel = rgb2yuv * imapPixel.rgb;\nfloat luma = log(yuvPixel.r + eps) - log(yuvImapPixel.r + eps);\nluma = luma * gain + offset;\nvec3 rgbCorrectedPixel = yuv2rgb * vec3(luma, yuvPixel.gb);\nrgbCorrectedPixel = clamp(rgbCorrectedPixel, 0.0f, 1.0f);\ncolor = vec4(rgbCorrectedPixel, 1.0f);\n#endif\n}"},function(e,t){e.exports="#ifdef GREYSCALE\nuniform sampler2D minmax2d;\n#else\nuniform sampler2D minmax2dRGB[3];\n#endif\nuniform float minValue;\nuniform float maxValue;\nconst float eps = 1.0f / 255.0f;\nvoid main()\n{\nvec2 minmax = clamp(vec2(minValue, maxValue), 0.0f, 255.0f) / 255.0f;\nvec4 newMin = vec4(minmax.x);\nvec4 newRange = vec4(minmax.y - minmax.x);\nvec4 alpha = vec4(1.0f, newMin.x, newRange.x, 1.0f);\n#ifdef GREYSCALE\nvec4 pixel = threadPixel(minmax2d);\nmat4 channel = mat4(pixel, pixel, pixel, alpha);\n#else\nmat4 channel = mat4(\nthreadPixel(minmax2dRGB[0]),\nthreadPixel(minmax2dRGB[1]),\nthreadPixel(minmax2dRGB[2]),\nalpha\n);\n#endif\nvec4 oldMin = vec4(channel[0].g, channel[1].g, channel[2].g, channel[3].g);\nvec4 oldRange = max(vec4(channel[0].b, channel[1].b, channel[2].b, channel[3].b), eps);\nvec4 oldIntensity = vec4(channel[0].a, channel[1].a, channel[2].a, channel[3].a);\nvec4 newIntensity = (oldIntensity - oldMin) * newRange / oldRange + newMin;\ncolor = newIntensity;\n}"},function(e,t){e.exports="uniform sampler2D image, layerA, layerB;\nuniform float scaleA, scaleB, lgM, h;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat score = pixel.r;\nivec2 zero = ivec2(0, 0);\nivec2 sizeA = textureSize(layerA, 0);\nivec2 sizeB = textureSize(layerB, 0);\nvec2 mid = (texCoord * texSize) + vec2(0.5f, 0.5f);\nivec2 pa = clamp(ivec2(ceil(mid * scaleA - 1.0f)), zero, sizeA - 2);\nivec2 pb = clamp(ivec2(ceil(mid * scaleB - 1.0f)), zero, sizeB - 2);\nvec4 a00 = pixelAt(layerA, pa);\nvec4 a10 = pixelAt(layerA, pa + ivec2(1, 0));\nvec4 a01 = pixelAt(layerA, pa + ivec2(0, 1));\nvec4 a11 = pixelAt(layerA, pa + ivec2(1, 1));\nvec4 b00 = pixelAt(layerB, pb);\nvec4 b10 = pixelAt(layerB, pb + ivec2(1, 0));\nvec4 b01 = pixelAt(layerB, pb + ivec2(0, 1));\nvec4 b11 = pixelAt(layerB, pb + ivec2(1, 1));\nfloat maxScore = max(\nmax(max(a00.r, a10.r), max(a01.r, a11.r)),\nmax(max(b00.r, b10.r), max(b01.r, b11.r))\n);\ncolor = vec4(0.0f, pixel.gba);\nif(score < maxScore || score == 0.0f)\nreturn;\nvec2 ea = fract(mid * scaleA);\nvec2 eb = fract(mid * scaleB);\nfloat isa = a00.b * (1.0f - ea.x) * (1.0f - ea.y) +\na10.b * ea.x * (1.0f - ea.y) +\na01.b * (1.0f - ea.x) * ea.y +\na11.b * ea.x * ea.y;\nfloat isb = b00.b * (1.0f - eb.x) * (1.0f - eb.y) +\nb10.b * eb.x * (1.0f - eb.y) +\nb01.b * (1.0f - eb.x) * eb.y +\nb11.b * eb.x * eb.y;\ncolor = (isa > score && isa > isb) ? vec4(isa, pixel.gb, a00.a) : pixel;\ncolor = (isb > score && isb > isa) ? vec4(isb, pixel.gb, b00.a) : pixel;\nfloat y1 = isa, y2 = isb, y3 = score;\nfloat x1 = lgM - (lgM + h) * a00.a;\nfloat x2 = lgM - (lgM + h) * b00.a;\nfloat x3 = lgM - (lgM + h) * pixel.a;\nfloat dn = (x1 - x2) * (x1 - x3) * (x2 - x3);\nif(abs(dn) < 0.00001f)\nreturn;\nfloat a = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / dn;\nif(a >= 0.0f)\nreturn;\nfloat b = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / dn;\nfloat c = (x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / dn;\nfloat xv = -b / (2.0f * a);\nfloat yv = c - (b * b) / (4.0f * a);\nif(xv < min(x1, min(x2, x3)) || xv > max(x1, max(x2, x3)))\nreturn;\nfloat interpolatedScale = (lgM - xv) / (lgM + h);\nfloat interpolatedScore = clamp(yv, 0.0f, 1.0f);\ncolor = vec4(interpolatedScore, pixel.gb, interpolatedScale);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nscores += vec2(max(c_t - p8, 0.0f), max(p8 - ct, 0.0f));\nscores += vec2(max(c_t - p9, 0.0f), max(p9 - ct, 0.0f));\nscores += vec2(max(c_t - p10, 0.0f), max(p10 - ct, 0.0f));\nscores += vec2(max(c_t - p11, 0.0f), max(p11 - ct, 0.0f));\nfloat score = max(scores.x, scores.y) / 12.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nmat4 mp = mat4(\npixelAtShortOffset(image, ivec2(0, 3)).g,\npixelAtShortOffset(image, ivec2(1, 3)).g,\npixelAtShortOffset(image, ivec2(2, 2)).g,\npixelAtShortOffset(image, ivec2(3, 1)).g,\npixelAtShortOffset(image, ivec2(3, 0)).g,\npixelAtShortOffset(image, ivec2(3, -1)).g,\npixelAtShortOffset(image, ivec2(2, -2)).g,\npixelAtShortOffset(image, ivec2(1, -3)).g,\npixelAtShortOffset(image, ivec2(0, -3)).g,\npixelAtShortOffset(image, ivec2(-1, -3)).g,\npixelAtShortOffset(image, ivec2(-2, -2)).g,\npixelAtShortOffset(image, ivec2(-3, -1)).g,\npixelAtShortOffset(image, ivec2(-3, 0)).g,\npixelAtShortOffset(image, ivec2(-3, 1)).g,\npixelAtShortOffset(image, ivec2(-2, 2)).g,\npixelAtShortOffset(image, ivec2(-1, 3)).g\n);\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nfloat score = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nfloat score = max(scores.x, scores.y) / 8.0f;\ncolor = vec4(score * step(1.0f, pixel.r), pixel.g, score, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.gba);\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nbool possibleCorner =\n((c_t > p1 || c_t > p5) && (c_t > p3 || c_t > p7)) ||\n((ct < p1  || ct < p5)  && (ct < p3  || ct < p7))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 5 && dark < 5) {\nif(bc > 0 && bc < 5) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 5) bc += 1; else break;\nif(c_t > p2 && bc < 5) bc += 1; else break;\nif(c_t > p3 && bc < 5) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 5) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 5) dc += 1; else break;\nif(ct < p2 && dc < 5) dc += 1; else break;\nif(ct < p3 && dc < 5) dc += 1; else break;\n} while(false);\nif(bc >= 5 || dc >= 5)\ncolor = vec4(1.0f, pixel.gba);\n}\nelse {\ncolor = vec4(1.0f, pixel.gba);\n}\n}\n}\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.gba);\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nbool possibleCorner =\n((c_t > p0 || c_t > p6) && (c_t > p3 || c_t > p9)) ||\n((ct < p0  || ct < p6)  && (ct < p3  || ct < p9))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p8) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p8) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p9) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p9) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p10) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p10) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p11) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p11) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 7 && dark < 7) {\nif(bc > 0 && bc < 7) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 7) bc += 1; else break;\nif(c_t > p2 && bc < 7) bc += 1; else break;\nif(c_t > p3 && bc < 7) bc += 1; else break;\nif(c_t > p4 && bc < 7) bc += 1; else break;\nif(c_t > p5 && bc < 7) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 7) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 7) dc += 1; else break;\nif(ct < p2 && dc < 7) dc += 1; else break;\nif(ct < p3 && dc < 7) dc += 1; else break;\nif(ct < p4 && dc < 7) dc += 1; else break;\nif(ct < p5 && dc < 7) dc += 1; else break;\n} while(false);\nif(bc >= 7 || dc >= 7)\ncolor = vec4(1.0f, pixel.gba);\n}\nelse {\ncolor = vec4(1.0f, pixel.gba);\n}\n}\n}\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float threshold;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\ncolor = vec4(0.0f, pixel.gba);\nif(any(lessThan(ivec4(thread, size - thread), margin)))\nreturn;\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 3)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(3, 0)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(0, -3)).g;\nfloat p12 = pixelAtShortOffset(image, ivec2(-3, 0)).g;\nif(!(\n((c_t > p0 || c_t > p8) && (c_t > p4 || c_t > p12)) ||\n((ct < p0  || ct < p8)  && (ct < p4  || ct < p12))\n))\nreturn;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 3)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 2)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(3, 1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(3, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(2, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(1, -3)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-1, -3)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, -2)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-3, -1)).g;\nfloat p13 = pixelAtShortOffset(image, ivec2(-3, 1)).g;\nfloat p14 = pixelAtShortOffset(image, ivec2(-2, 2)).g;\nfloat p15 = pixelAtShortOffset(image, ivec2(-1, 3)).g;\nbool A=(p0>ct),B=(p1>ct),C=(p2>ct),D=(p3>ct),E=(p4>ct),F=(p5>ct),G=(p6>ct),H=(p7>ct),I=(p8>ct),J=(p9>ct),K=(p10>ct),L=(p11>ct),M=(p12>ct),N=(p13>ct),O=(p14>ct),P=(p15>ct),a=(p0<c_t),b=(p1<c_t),c=(p2<c_t),d=(p3<c_t),e=(p4<c_t),f=(p5<c_t),g=(p6<c_t),h=(p7<c_t),i=(p8<c_t),j=(p9<c_t),k=(p10<c_t),l=(p11<c_t),m=(p12<c_t),n=(p13<c_t),o=(p14<c_t),p=(p15<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\ncolor = vec4(float(isCorner), pixel.gba);\n}"},function(e,t){e.exports="uniform sampler2D corners;\nuniform sampler2D maxScore;\nuniform float quality;\nvoid main()\n{\nvec4 pixel = threadPixel(corners);\nfloat threshold = threadPixel(maxScore).r * clamp(quality, 0.0f, 1.0f);\nfloat score = step(threshold, pixel.r) * pixel.r;\ncolor = vec4(score, pixel.gba);\n}"},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform float threshold;\nuniform int numberOfOctaves;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(pyramid);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nvec2 best = vec2(0.0f, pixel.a);\n#ifdef USE_HARRIS_SCORE\nvec2 dfmm[PYRAMID_MAX_OCTAVES], dfm0[PYRAMID_MAX_OCTAVES], dfm1[PYRAMID_MAX_OCTAVES],\ndf0m[PYRAMID_MAX_OCTAVES], df00[PYRAMID_MAX_OCTAVES], df01[PYRAMID_MAX_OCTAVES],\ndf1m[PYRAMID_MAX_OCTAVES], df10[PYRAMID_MAX_OCTAVES], df11[PYRAMID_MAX_OCTAVES];\nfloat pyrpix = 0.0f;\nfor(int l = 0; l < PYRAMID_MAX_OCTAVES; l++) {\nfloat lod = float(l) * 0.5f;\nfloat pot = exp2(lod);\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,-1)).g;\ndfmm[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,0)).g;\ndfm0[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(-1,1)).g;\ndfm1[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,-1)).g;\ndf0m[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,0)).g;\ndf00[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(0,1)).g;\ndf01[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,-1)).g;\ndf1m[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,0)).g;\ndf10[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\npyrpix = pyrPixelAtOffset(pyramid, lod, pot, ivec2(1,1)).g;\ndf11[l] = vec2(dFdx(pyrpix), dFdy(pyrpix));\n}\n#endif\ncolor = vec4(0.0f, pixel.g, 0.0f, pixel.a);\nfloat lod = 0.0f, pot = 1.0f;\nfor(int octave = 0; octave < numberOfOctaves; octave++, pot = exp2(lod += 0.5f)) {\npixel = pyrPixel(pyramid, lod);\nct = pixel.g + t;\nc_t = pixel.g - t;\nvec4 p4k = vec4(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 0)).g\n);\nmat4 mp = mat4(\np4k.x,\np4k.y,\np4k.z,\np4k.w,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 3)).g\n);\nbool A=(mp[0][0]>ct),B=(mp[1][0]>ct),C=(mp[2][0]>ct),D=(mp[3][0]>ct),E=(mp[0][1]>ct),F=(mp[1][1]>ct),G=(mp[2][1]>ct),H=(mp[3][1]>ct),I=(mp[0][2]>ct),J=(mp[1][2]>ct),K=(mp[2][2]>ct),L=(mp[3][2]>ct),M=(mp[0][3]>ct),N=(mp[1][3]>ct),O=(mp[2][3]>ct),P=(mp[3][3]>ct),a=(mp[0][0]<c_t),b=(mp[1][0]<c_t),c=(mp[2][0]<c_t),d=(mp[3][0]<c_t),e=(mp[0][1]<c_t),f=(mp[1][1]<c_t),g=(mp[2][1]<c_t),h=(mp[3][1]<c_t),i=(mp[0][2]<c_t),j=(mp[1][2]<c_t),k=(mp[2][2]<c_t),l=(mp[3][2]<c_t),m=(mp[0][3]<c_t),n=(mp[1][3]<c_t),o=(mp[2][3]<c_t),p=(mp[3][3]<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\nfloat score = 0.0f;\n#ifdef USE_HARRIS_SCORE\nint lodIndex = int(lod * 2.0f);\nvec2 df0 = dfmm[lodIndex], df1 = dfm0[lodIndex], df2 = dfm1[lodIndex],\ndf3 = df0m[lodIndex], df4 = df00[lodIndex], df5 = df01[lodIndex],\ndf6 = df1m[lodIndex], df7 = df10[lodIndex], df8 = df11[lodIndex];\nvec3 hm = vec3(0.0f);\nhm += vec3(df0.x * df0.x, df0.x * df0.y, df0.y * df0.y);\nhm += vec3(df1.x * df1.x, df1.x * df1.y, df1.y * df1.y);\nhm += vec3(df2.x * df2.x, df2.x * df2.y, df2.y * df2.y);\nhm += vec3(df3.x * df3.x, df3.x * df3.y, df3.y * df3.y);\nhm += vec3(df4.x * df4.x, df4.x * df4.y, df4.y * df4.y);\nhm += vec3(df5.x * df5.x, df5.x * df5.y, df5.y * df5.y);\nhm += vec3(df6.x * df6.x, df6.x * df6.y, df6.y * df6.y);\nhm += vec3(df7.x * df7.x, df7.x * df7.y, df7.y * df7.y);\nhm += vec3(df8.x * df8.x, df8.x * df8.y, df8.y * df8.y);\nfloat response = 0.5f * (hm.x + hm.z - sqrt((hm.x - hm.z) * (hm.x - hm.z) + 4.0f * hm.y * hm.y));\nscore = response;\n#else\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nscore = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\n#endif\nscore *= float(isCorner);\nivec2 remainder = thread % int(pot);\nscore *= float(remainder.x + remainder.y == 0);\nfloat scale = encodeLod(lod);\nbest = (score > best.x) ? vec2(score, scale) : best;\n}\ncolor.rba = best.xxy;\n}'},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform int windowRadius;\nuniform int numberOfOctaves;\nuniform sampler2D sobelDerivatives[@PYRAMID_MAX_OCTAVES@];\nvec4 pickSobelDerivatives(int index, ivec2 offset)\n{\nswitch(index) {\ncase 0:  return textureLod(sobelDerivatives[0], texCoord + vec2(offset) / texSize, 0.0f);\ncase 1:  return textureLod(sobelDerivatives[1], texCoord + vec2(offset) / texSize, 0.0f);\ncase 2:  return textureLod(sobelDerivatives[2], texCoord + vec2(offset) / texSize, 0.0f);\ncase 3:  return textureLod(sobelDerivatives[3], texCoord + vec2(offset) / texSize, 0.0f);\ncase 4:  return textureLod(sobelDerivatives[4], texCoord + vec2(offset) / texSize, 0.0f);\ncase 5:  return textureLod(sobelDerivatives[5], texCoord + vec2(offset) / texSize, 0.0f);\ncase 6:  return textureLod(sobelDerivatives[6], texCoord + vec2(offset) / texSize, 0.0f);\ndefault: return textureLod(sobelDerivatives[0], texCoord + vec2(offset) / texSize, 0.0f);\n}\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(pyramid);\nvec2 best = vec2(0.0f, pixel.a);\nfor(int octave = 0; octave < numberOfOctaves; octave++) {\nvec3 m = vec3(0.0f, 0.0f, 0.0f);\nfor(int j = -windowRadius; j <= windowRadius; j++) {\nfor(int i = -windowRadius; i <= windowRadius; i++) {\nvec2 df = decodeSobel(pickSobelDerivatives(octave, ivec2(i, j)));\nm += vec3(df.x * df.x, df.x * df.y, df.y * df.y);\n}\n}\nfloat response = 0.5f * (m.x + m.z - sqrt((m.x - m.z) * (m.x - m.z) + 4.0f * m.y * m.y));\nfloat score = max(0.0f, response / 4.0f);\nfloat lod = 0.5f * float(octave);\nfloat scale = encodeLod(lod);\nbest = (score > best.x) ? vec2(score, scale) : best;\n}\ncolor = vec4(best.x, pixel.g, best.xy);\n}'},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform float lod;\nconst mat3 horizontalKernel = mat3(\n-1.0f, 0.0f, 1.0f,\n-2.0f, 0.0f, 2.0f,\n-1.0f, 0.0f, 1.0f\n);\nconst mat3 verticalKernel = mat3(\n1.0f, 2.0f, 1.0f,\n0.0f, 0.0f, 0.0f,\n-1.0f,-2.0f,-1.0f\n);\nconst vec3 ones = vec3(1.0f, 1.0f, 1.0f);\nvoid main()\n{\nfloat pot = exp2(lod);\nmat3 neighbors = mat3(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 1)).g\n);\nmat3 sobelX = matrixCompMult(horizontalKernel, neighbors);\nmat3 sobelY = matrixCompMult(verticalKernel, neighbors);\nvec2 df = vec2(\ndot(sobelX[0] + sobelX[1] + sobelX[2], ones),\ndot(sobelY[0] + sobelY[1] + sobelY[2], ones)\n);\ncolor = encodeSobel(df);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\n#define ENABLE_INNER_RING\n#define ENABLE_MIDDLE_RING\n#define ENABLE_OUTER_RING\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat lod = decodeLod(pixel.a);\nfloat lodJump = 0.5f;\ncolor = pixel;\nif(pixel.r == 0.0f)\nreturn;\n#ifdef ENABLE_INNER_RING\nvec4 p0 = pixelAtShortOffset(image, ivec2(0, 1));\nvec4 p1 = pixelAtShortOffset(image, ivec2(1, 1));\nvec4 p2 = pixelAtShortOffset(image, ivec2(1, 0));\nvec4 p3 = pixelAtShortOffset(image, ivec2(1, -1));\nvec4 p4 = pixelAtShortOffset(image, ivec2(0, -1));\nvec4 p5 = pixelAtShortOffset(image, ivec2(-1, -1));\nvec4 p6 = pixelAtShortOffset(image, ivec2(-1, 0));\nvec4 p7 = pixelAtShortOffset(image, ivec2(-1, 1));\n#else\nvec4 p0, p1, p2, p3, p4, p5, p6, p7;\np0 = p1 = p2 = p3 = p4 = p5 = p6 = p7 = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n#endif\n#ifdef ENABLE_MIDDLE_RING\nvec4 q0 = pixelAtShortOffset(image, ivec2(0, 2));\nvec4 q1 = pixelAtShortOffset(image, ivec2(1, 2));\nvec4 q2 = pixelAtShortOffset(image, ivec2(2, 2));\nvec4 q3 = pixelAtShortOffset(image, ivec2(2, 1));\nvec4 q4 = pixelAtShortOffset(image, ivec2(2, 0));\nvec4 q5 = pixelAtShortOffset(image, ivec2(2, -1));\nvec4 q6 = pixelAtShortOffset(image, ivec2(2, -2));\nvec4 q7 = pixelAtShortOffset(image, ivec2(1, -2));\nvec4 q8 = pixelAtShortOffset(image, ivec2(0, -2));\nvec4 q9 = pixelAtShortOffset(image, ivec2(-1, -2));\nvec4 q10 = pixelAtShortOffset(image, ivec2(-2, -2));\nvec4 q11 = pixelAtShortOffset(image, ivec2(-2, -1));\nvec4 q12 = pixelAtShortOffset(image, ivec2(-2, 0));\nvec4 q13 = pixelAtShortOffset(image, ivec2(-2, 1));\nvec4 q14 = pixelAtShortOffset(image, ivec2(-2, 2));\nvec4 q15 = pixelAtShortOffset(image, ivec2(-1, 2));\n#else\nvec4 q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15;\nq0 = q1 = q2 = q3 = q4 = q5 = q6 = q7 = q8 = q9 = q10 =\nq11 = q12 = q13 = q14 = q15= vec4(0.0f, 0.0f, 0.0f, 1.0f);\n#endif\n#ifdef ENABLE_OUTER_RING\nvec4 r0 = pixelAtShortOffset(image, ivec2(0, 3));\nvec4 r1 = pixelAtShortOffset(image, ivec2(1, 3));\nvec4 r2 = pixelAtShortOffset(image, ivec2(3, 1));\nvec4 r3 = pixelAtShortOffset(image, ivec2(3, 0));\nvec4 r4 = pixelAtShortOffset(image, ivec2(3, -1));\nvec4 r5 = pixelAtShortOffset(image, ivec2(1, -3));\nvec4 r6 = pixelAtShortOffset(image, ivec2(0, -3));\nvec4 r7 = pixelAtShortOffset(image, ivec2(-1, -3));\nvec4 r8 = pixelAtShortOffset(image, ivec2(-3, -1));\nvec4 r9 = pixelAtShortOffset(image, ivec2(-3, 0));\nvec4 r10 = pixelAtShortOffset(image, ivec2(-3, 1));\nvec4 r11 = pixelAtShortOffset(image, ivec2(-1, 3));\nvec4 r12 = pixelAtShortOffset(image, ivec2(0, 4));\nvec4 r13 = pixelAtShortOffset(image, ivec2(4, 0));\nvec4 r14 = pixelAtShortOffset(image, ivec2(0, -4));\nvec4 r15 = pixelAtShortOffset(image, ivec2(-4, 0));\n#else\nvec4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;\nr0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = r8 = r9 = r10 =\nr11 = r12 = r13 = r14 = r15 = vec4(0.0f, 0.0f, 0.0f, 1.0f);\n#endif\nfloat lodPlus = min(lod + lodJump, PYRAMID_MAX_LEVELS - 1.0f);\nfloat lodMinus = max(lod - lodJump, 0.0f);\nfloat alphaPlus = encodeLod(lodPlus);\nfloat alphaMinus = encodeLod(lodMinus);\nmat3 innerScore = mat3(\np0.r * float(isSameEncodedLod(p0.a, alphaPlus) || isSameEncodedLod(p0.a, alphaMinus)),\np1.r * float(isSameEncodedLod(p1.a, alphaPlus) || isSameEncodedLod(p1.a, alphaMinus)),\np2.r * float(isSameEncodedLod(p2.a, alphaPlus) || isSameEncodedLod(p2.a, alphaMinus)),\np3.r * float(isSameEncodedLod(p3.a, alphaPlus) || isSameEncodedLod(p3.a, alphaMinus)),\np4.r * float(isSameEncodedLod(p4.a, alphaPlus) || isSameEncodedLod(p4.a, alphaMinus)),\np5.r * float(isSameEncodedLod(p5.a, alphaPlus) || isSameEncodedLod(p5.a, alphaMinus)),\np6.r * float(isSameEncodedLod(p6.a, alphaPlus) || isSameEncodedLod(p6.a, alphaMinus)),\np7.r * float(isSameEncodedLod(p7.a, alphaPlus) || isSameEncodedLod(p7.a, alphaMinus)),\n0.0f\n);\nmat4 middleScore = mat4(\nq0.r * float(isSameEncodedLod(q0.a, alphaPlus) || isSameEncodedLod(q0.a, alphaMinus)),\nq1.r * float(isSameEncodedLod(q1.a, alphaPlus) || isSameEncodedLod(q1.a, alphaMinus)),\nq2.r * float(isSameEncodedLod(q2.a, alphaPlus) || isSameEncodedLod(q2.a, alphaMinus)),\nq3.r * float(isSameEncodedLod(q3.a, alphaPlus) || isSameEncodedLod(q3.a, alphaMinus)),\nq4.r * float(isSameEncodedLod(q4.a, alphaPlus) || isSameEncodedLod(q4.a, alphaMinus)),\nq5.r * float(isSameEncodedLod(q5.a, alphaPlus) || isSameEncodedLod(q5.a, alphaMinus)),\nq6.r * float(isSameEncodedLod(q6.a, alphaPlus) || isSameEncodedLod(q6.a, alphaMinus)),\nq7.r * float(isSameEncodedLod(q7.a, alphaPlus) || isSameEncodedLod(q7.a, alphaMinus)),\nq8.r * float(isSameEncodedLod(q8.a, alphaPlus) || isSameEncodedLod(q8.a, alphaMinus)),\nq9.r * float(isSameEncodedLod(q9.a, alphaPlus) || isSameEncodedLod(q9.a, alphaMinus)),\nq10.r * float(isSameEncodedLod(q10.a, alphaPlus) || isSameEncodedLod(q10.a, alphaMinus)),\nq11.r * float(isSameEncodedLod(q11.a, alphaPlus) || isSameEncodedLod(q11.a, alphaMinus)),\nq12.r * float(isSameEncodedLod(q12.a, alphaPlus) || isSameEncodedLod(q12.a, alphaMinus)),\nq13.r * float(isSameEncodedLod(q13.a, alphaPlus) || isSameEncodedLod(q13.a, alphaMinus)),\nq14.r * float(isSameEncodedLod(q14.a, alphaPlus) || isSameEncodedLod(q14.a, alphaMinus)),\nq15.r * float(isSameEncodedLod(q15.a, alphaPlus) || isSameEncodedLod(q15.a, alphaMinus))\n);\nmat4 outerScore = mat4(\nr0.r * float(isSameEncodedLod(r0.a, alphaPlus) || isSameEncodedLod(r0.a, alphaMinus)),\nr1.r * float(isSameEncodedLod(r1.a, alphaPlus) || isSameEncodedLod(r1.a, alphaMinus)),\nr2.r * float(isSameEncodedLod(r2.a, alphaPlus) || isSameEncodedLod(r2.a, alphaMinus)),\nr3.r * float(isSameEncodedLod(r3.a, alphaPlus) || isSameEncodedLod(r3.a, alphaMinus)),\nr4.r * float(isSameEncodedLod(r4.a, alphaPlus) || isSameEncodedLod(r4.a, alphaMinus)),\nr5.r * float(isSameEncodedLod(r5.a, alphaPlus) || isSameEncodedLod(r5.a, alphaMinus)),\nr6.r * float(isSameEncodedLod(r6.a, alphaPlus) || isSameEncodedLod(r6.a, alphaMinus)),\nr7.r * float(isSameEncodedLod(r7.a, alphaPlus) || isSameEncodedLod(r7.a, alphaMinus)),\nr8.r * float(isSameEncodedLod(r8.a, alphaPlus) || isSameEncodedLod(r8.a, alphaMinus)),\nr9.r * float(isSameEncodedLod(r9.a, alphaPlus) || isSameEncodedLod(r9.a, alphaMinus)),\nr10.r * float(isSameEncodedLod(r10.a, alphaPlus) || isSameEncodedLod(r10.a, alphaMinus)),\nr11.r * float(isSameEncodedLod(r11.a, alphaPlus) || isSameEncodedLod(r11.a, alphaMinus)),\nr12.r * float(isSameEncodedLod(r12.a, alphaPlus) || isSameEncodedLod(r12.a, alphaMinus)),\nr13.r * float(isSameEncodedLod(r13.a, alphaPlus) || isSameEncodedLod(r13.a, alphaMinus)),\nr14.r * float(isSameEncodedLod(r14.a, alphaPlus) || isSameEncodedLod(r14.a, alphaMinus)),\nr15.r * float(isSameEncodedLod(r15.a, alphaPlus) || isSameEncodedLod(r15.a, alphaMinus))\n);\nvec3 maxInnerScore3 = max(innerScore[0], max(innerScore[1], innerScore[2]));\nvec4 maxMiddleScore4 = max(max(middleScore[0], middleScore[1]), max(middleScore[2], middleScore[3]));\nvec4 maxOuterScore4 = max(max(outerScore[0], outerScore[1]), max(outerScore[2], outerScore[3]));\nfloat maxInnerScore = max(maxInnerScore3.x, max(maxInnerScore3.y, maxInnerScore3.z));\nfloat maxMiddleScore = max(max(maxMiddleScore4.x, maxMiddleScore4.y), max(maxMiddleScore4.z, maxMiddleScore4.w));\nfloat maxOuterScore = max(max(maxOuterScore4.x, maxOuterScore4.y), max(maxOuterScore4.z, maxOuterScore4.w));\nfloat maxScore = max(maxInnerScore, max(maxMiddleScore, maxOuterScore));\nfloat myScore = step(maxScore, pixel.r) * pixel.r;\ncolor = vec4(myScore, pixel.gba);\n}'},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).r;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).r;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).r;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).r;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).r;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).r;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).r;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).r;\nfloat m = max(\nmax(max(p0, p1), max(p2, p3)),\nmax(max(p4, p5), max(p6, p7))\n);\nvec4 pixel = threadPixel(image);\nfloat score = step(m, pixel.r) * pixel.r;\ncolor = vec4(score, pixel.gba);\n}"},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 thread = threadLocation();\nfloat lod = decodeLod(pixel.a);\nfloat pot = exp2(lod);\ncolor = pixel;\nif(pixel.r == 0.0f)\nreturn;\nvec4 p0 = pixelAtShortOffset(image, ivec2(0, 1));\nvec4 p1 = pixelAtShortOffset(image, ivec2(1, 1));\nvec4 p2 = pixelAtShortOffset(image, ivec2(1, 0));\nvec4 p3 = pixelAtShortOffset(image, ivec2(1, -1));\nvec4 p4 = pixelAtShortOffset(image, ivec2(0, -1));\nvec4 p5 = pixelAtShortOffset(image, ivec2(-1, -1));\nvec4 p6 = pixelAtShortOffset(image, ivec2(-1, 0));\nvec4 p7 = pixelAtShortOffset(image, ivec2(-1, 1));\nmat3 score = mat3(\np0.r * float(isSameEncodedLod(p0.a, pixel.a)),\np1.r * float(isSameEncodedLod(p1.a, pixel.a)),\np2.r * float(isSameEncodedLod(p2.a, pixel.a)),\np3.r * float(isSameEncodedLod(p3.a, pixel.a)),\np4.r * float(isSameEncodedLod(p4.a, pixel.a)),\np5.r * float(isSameEncodedLod(p5.a, pixel.a)),\np6.r * float(isSameEncodedLod(p6.a, pixel.a)),\np7.r * float(isSameEncodedLod(p7.a, pixel.a)),\n0.0f\n);\nvec3 maxScore3 = max(score[0], max(score[1], score[2]));\nfloat maxScore = max(maxScore3.x, max(maxScore3.y, maxScore3.z));\nfloat myScore = step(maxScore, pixel.r) * pixel.r;\ncolor = vec4(myScore, pixel.gba);\n}'},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nivec2 zero = ivec2(0, 0);\ncolor = pixelAt(image, clamp(thread, zero, size - 1));\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 pos = min(thread * 2, textureSize(image, 0) - 1);\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 pos = min(thread * 3, textureSize(image, 0) - 1);\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D largerImage;\nuniform sampler2D smallerImage;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 lg = pixelAt(largerImage, min(thread, textureSize(largerImage, 0) - 1));\nvec4 sm = pixelAt(smallerImage, min(thread / 2, textureSize(smallerImage, 0) - 1));\ncolor = ((((thread.x & 1) + (thread.y & 1)) == 0) && (sm.r > lg.r)) ? vec4(sm.r, lg.gb, sm.a) : lg;\n}"},function(e,t){e.exports="uniform sampler2D target;\nuniform sampler2D source;\nvoid main()\n{\nvec4 a = threadPixel(target);\nvec4 b = threadPixel(source);\ncolor = (b.r > a.r) ? b : a;\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform float imageScale;\nconst ivec2 one = ivec2(1, 1);\n#define B2(expr) bvec2((expr),(expr))\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nivec2 scaled = ivec2((texCoord * texSize) * imageScale);\nivec2 imageSize = textureSize(image, 0);\nvec4 pixel = threadPixel(image);\nvec4 p0 = pixelAt(image, min(scaled, imageSize-1));\nvec4 p1 = pixelAt(image, min(scaled + ivec2(0, 1), imageSize-1));\nvec4 p2 = pixelAt(image, min(scaled + ivec2(1, 0), imageSize-1));\nvec4 p3 = pixelAt(image, min(scaled + ivec2(1, 1), imageSize-1));\nbool gotCorner = ((thread.x & 1) + (thread.y & 1) == 0) &&\n(all(lessThan(scaled + one, size))) &&\n(p0.r + p1.r + p2.r + p3.r > 0.0f);\nvec2 best = mix(\nvec2(0.0f, pixel.a),\nmix(\nmix(\np1.r > p3.r ? p1.ra : p3.ra,\np1.r > p2.r ? p1.ra : p2.ra,\nB2(p2.r > p3.r)\n),\nmix(\np0.r > p3.r ? p0.ra : p3.ra,\np0.r > p2.r ? p0.ra : p2.ra,\nB2(p2.r > p3.r)\n),\nB2(p0.r > p1.r)\n),\nB2(gotCorner)\n);\ncolor = vec4(best.x, pixel.gb, best.y);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = pixelAt(image, thread / 2);\ncolor = (((thread.x + thread.y) & 1) == 0) ? pixel : vec4(0.0f, 0.0f, 0.0f, pixel.a);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = pixelAt(image, thread / 3);\nbool cond = ((thread.x - (thread.y % 3) + 3) % 3) == 0;\ncolor = (((thread.x - (thread.y % 3) + 3) % 3) == 0) ? pixel : vec4(0.0f, 0.0f, 0.0f, pixel.a);\n}"},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D dest, src;\nuniform int destComponents;\nuniform int srcComponentId;\nvoid main()\n{\nvec4 destPixel = threadPixel(dest);\nvec4 srcPixel = threadPixel(src);\nbvec4 flags = bvec4(\n(destComponents & PIXELCOMPONENT_RED) != 0,\n(destComponents & PIXELCOMPONENT_GREEN) != 0,\n(destComponents & PIXELCOMPONENT_BLUE) != 0,\n(destComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(destPixel, vec4(srcPixel[srcComponentId]), flags);\n}'},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D image;\nuniform int pixelComponents;\nuniform float value;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nbvec4 flags = bvec4(\n(pixelComponents & PIXELCOMPONENT_RED) != 0,\n(pixelComponents & PIXELCOMPONENT_GREEN) != 0,\n(pixelComponents & PIXELCOMPONENT_BLUE) != 0,\n(pixelComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(pixel, vec4(value), flags);\n}'},function(e,t){e.exports="uniform float value;\nvoid main()\n{\ncolor = vec4(value);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main() {\nivec2 pos = threadLocation();\npos.y = int(texSize.y) - 1 - pos.y;\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\ncolor = threadPixel(image);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 last = outputSize() - ivec2(1);\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = texelFetch(image, thread, 0);\nvec4 p1 = texelFetch(image, min(next1, last), 0);\nvec4 p2 = texelFetch(image, min(next2, last), 0);\nvec4 p3 = texelFetch(image, min(next3, last), 0);\nvec4 pmax = max(max(p0, p1), max(p2, p3));\nvec4 pmin = min(min(p0, p1), min(p2, p3));\ncolor = vec4(pmax.r, pmin.g, pmax.r - pmin.g, p0.a);\n}"},function(e,t,i){"use strict";i.r(t),i.d(t,"load",(function(){return Ye})),i.d(t,"camera",(function(){return $e})),i.d(t,"pipeline",(function(){return He})),i.d(t,"version",(function(){return Ve})),i.d(t,"fps",(function(){return We}));var n=i(5),r=i(0);class o{static getError(e){const t=e.getError(),i=["NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL"].find(i=>e[i]==t)||"Unknown";return new r.e(i)}static createShader(e,t,i){const n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),n}static createProgram(e,t,i){const n=e.createProgram(),s=o.createShader(e,e.VERTEX_SHADER,t),a=o.createShader(e,e.FRAGMENT_SHADER,i);if(e.attachShader(n,s),e.attachShader(n,a),e.linkProgram(n),e.validateProgram(n),!e.getProgramParameter(n,e.LINK_STATUS)&&!e.isContextLost()){const t=[e.getShaderInfoLog(a),e.getShaderInfoLog(s),e.getProgramInfoLog(n)];e.deleteProgram(n),e.deleteShader(a),e.deleteShader(s);const o=e=>Math.max(0,2-Math.floor(Math.log10(e))),c=e=>Array(o(e)).fill(" ").join("")+e+". ",l=i.split("\n").map((e,t)=>c(1+t)+e).join("\n");throw new r.e("Can't create shader.\n\n---------- ERROR ----------\n"+t.join("\n")+"\n\n---------- SOURCE CODE ----------\n"+l)}return n}static createStandardGeometry(e,t,i){const n=o.createStandardGeometry,r=n._cache||(n._cache=new WeakMap);if(r.has(e))return r.get(e);const s=e.createVertexArray(),a=[e.createBuffer(),e.createBuffer()];e.bindVertexArray(s),e.bindBuffer(e.ARRAY_BUFFER,a[0]),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,1,1]),e.STATIC_DRAW),e.vertexAttribPointer(t,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(t),e.bindBuffer(e.ARRAY_BUFFER,a[1]),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,1,1]),e.STATIC_DRAW),e.vertexAttribPointer(i,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(i),e.bindBuffer(e.ARRAY_BUFFER,null);const c={vao:s,vbo:a};return r.set(e,c),c}static createTexture(e,t,i){if(t<=0||i<=0)throw new r.f("Invalid dimensions given to createTexture()");const n=e.createTexture();return e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.MIRRORED_REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.MIRRORED_REPEAT),e.texImage2D(e.TEXTURE_2D,0,e.RGBA8,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_2D,null),n}static destroyTexture(e,t){return e.deleteTexture(t),null}static uploadToTexture(e,t,i,n,r){return e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,0,e.RGBA8,e.RGBA,e.UNSIGNED_BYTE,r),e.bindTexture(e.TEXTURE_2D,null),t}static generateMipmap(e,t){e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null)}static bindTextures(e,t,i){const n=Object.keys(t);if(!e.isContextLost()){if(n.length>e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new r.e(`Can't bind ${n.length} textures to a program: max is ${e.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);for(let r=0;r<n.length;r++)e.activeTexture(e.TEXTURE0+r),e.bindTexture(e.TEXTURE_2D,t[n[r]]),e.uniform1i(i[n[r]],r)}}static createFramebuffer(e,t){const i=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,i),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const n=e.checkFramebufferStatus(e.FRAMEBUFFER);if(n!=e.FRAMEBUFFER_COMPLETE){const t=["FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"].filter(t=>e[t]===n)[0]||"unknown error";throw new r.e(`Can't create framebuffer: ${t} (${n})`)}return e.bindFramebuffer(e.FRAMEBUFFER,null),i}static destroyFramebuffer(e,t){return e.deleteFramebuffer(t),null}static clientWaitAsync(e,t,i=0){return new Promise((r,s)=>{const a=navigator.userAgent.includes("Firefox");!function c(){const l=e.clientWaitSync(t,i,0);l==e.TIMEOUT_EXPIRED?n.a.setZeroTimeout(c):l==e.WAIT_FAILED?a&&e.getError()==e.NO_ERROR?n.a.setZeroTimeout(c):s(o.getError(e)):r()}()})}static getBufferSubDataAsync(e,t,i,n,s,a=0,c=0){const l=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0),d=performance.now();return e.flush(),o.clientWaitAsync(e,l).then(()=>(e.bindBuffer(i,t),e.getBufferSubData(i,n,s,a,c),e.bindBuffer(i,null),performance.now()-d)).catch(e=>{throw new r.g("Can't getBufferSubDataAsync(): error in clientWaitAsync()",e)}).finally(()=>{e.deleteSync(l)})}static readPixelsViaPBO(e,t,i,n,s,a,c,l=null){if(!(i.byteLength>=a*c*4))throw new r.f("Can't read pixels: invalid buffer size");return e.bindBuffer(e.PIXEL_PACK_BUFFER,t),e.bufferData(e.PIXEL_PACK_BUFFER,i.byteLength,e.STREAM_READ),l?(e.bindFramebuffer(e.FRAMEBUFFER,l),e.readPixels(n,s,a,c,e.RGBA,e.UNSIGNED_BYTE,0),e.bindFramebuffer(e.FRAMEBUFFER,null)):e.readPixels(n,s,a,c,e.RGBA,e.UNSIGNED_BYTE,0),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),o.getBufferSubDataAsync(e,t,e.PIXEL_PACK_BUFFER,0,i,0,0).then(e=>e).catch(e=>{throw new r.g("Can't read pixels",e)})}}const s={sampler2D:"uniform1i",float:"uniform1f",int:"uniform1i",uint:"uniform1ui",bool:"uniform1i",vec2:"uniform2f",vec3:"uniform3f",vec4:"uniform4f",ivec2:"uniform2i",ivec3:"uniform3i",ivec4:"uniform4i",uvec2:"uniform2ui",uvec3:"uniform3ui",uvec4:"uniform4ui",bvec2:"uniform2i",bvec3:"uniform3i",bvec4:"uniform4i"};class a extends Function{constructor(e,t,i={}){return super("...args","return this._self._call(...args)"),this._self=this.bind(this),this._self._init(e,t,i),this._self}resize(e,t){if(this._gl.isContextLost())return;if(e=Math.max(1,0|e),t=Math.max(1,0|t),e===this._stdprog.width&&t===this._stdprog.height)return;const i=this._options;i.output[0]=e,i.output[1]=t,this._stdprog.resize(e,t),this._reallocatePixelBuffers(e,t)}readPixelsSync(e=0,t=0,i=-1,n=-1){const r=this._gl;return r.isContextLost()||(i<0&&(i=this._stdprog.width),n<0&&(n=this._stdprog.height),i=Math.min(i,this._stdprog.width),n=Math.min(n,this._stdprog.height),e=Math.max(0,Math.min(e,i-1)),t=Math.max(0,Math.min(t,n-1)),null==this._pixelBuffer[0]&&this._reallocatePixelBuffers(this._stdprog.width,this._stdprog.height),null!=this._stdprog.fbo?(r.bindFramebuffer(r.FRAMEBUFFER,this._stdprog.fbo),r.readPixels(e,t,i,n,r.RGBA,r.UNSIGNED_BYTE,this._pixelBuffer[0]),r.bindFramebuffer(r.FRAMEBUFFER,null)):r.readPixels(e,t,i,n,r.RGBA,r.UNSIGNED_BYTE,this._pixelBuffer[0])),this._pixelBuffer[0]}readPixelsAsync(e=0,t=0,i=-1,n=-1){const r=this._gl;if(r.isContextLost())return Promise.resolve(this._pixelBuffer[0]);if(i<0&&(i=this._stdprog.width),n<0&&(n=this._stdprog.height),i=Math.min(i,this._stdprog.width),n=Math.min(n,this._stdprog.height),e=Math.max(0,Math.min(e,i-1)),t=Math.max(0,Math.min(t,n-1)),null==this._pixelBuffer[0]&&this._reallocatePixelBuffers(this._stdprog.width,this._stdprog.height),this._pboProducerQueue.length>0){const s=this._pboProducerQueue.shift();o.readPixelsViaPBO(r,this._pbo[s],this._pixelBuffer[s],e,t,i,n,this._stdprog.fbo).then(e=>{this._pboConsumerQueue.push(s)})}else l(this._pboProducerQueue).then(s=>{const a=this._pboProducerQueue.shift();o.readPixelsViaPBO(r,this._pbo[a],this._pixelBuffer[a],e,t,i,n,this._stdprog.fbo).then(e=>{this._pboConsumerQueue.push(a)})});if(this._pboConsumerQueue.length>0){const e=this._pboConsumerQueue.shift();return new Promise(t=>{t(this._pixelBuffer[e]),this._pboProducerQueue.push(e)})}return new Promise(e=>{l(this._pboConsumerQueue).then(t=>{const i=this._pboConsumerQueue.shift();e(this._pixelBuffer[i]),this._pboProducerQueue.push(i)})})}get uniforms(){return this._stdprog.uniform}_init(e,t,i){if((i={output:[e.drawingBufferWidth,e.drawingBufferHeight],uniforms:{},renderToTexture:!0,recycleTexture:!0,pingpong:!1,...i}).pingpong&&!i.renderToTexture)throw new r.g("Pingpong rendering can only be used when rendering to textures");let n=Math.max(1,0|i.output[0]),o=Math.max(1,0|i.output[1]);i.output=[n,o];const s=e.canvas;n>s.width&&(s.width=n),o>s.height&&(s.height=o);const a=new c(e,n,o,t,i.uniforms);i.renderToTexture&&a.attachFBO(i.pingpong);const l=t.arguments;for(let e=0;e<l.length;e++)if(!a.uniform.hasOwnProperty(l[e])&&!a.uniform.hasOwnProperty(l[e]+"[0]"))throw new r.g(`Can't run shader: expected uniform "${l[e]}"`);this._gl=e,this._source=t.fragmentSource,this._options=Object.freeze(i),this._stdprog=a,this._params=l,this._initPixelBuffers(e)}_call(...e){const t=this._gl,i=this._options,n=this._stdprog,s=this._params;if(t.isContextLost())return n.texture;if(e.length!=s.length)throw new r.f("Can't run shader: incorrect number of arguments");t.useProgram(n.program),n.dirtySize&&(t.uniform2f(n.uniform.texSize.location,n.width,n.height),n.dirtySize=!1);for(let t=0,i=0;t<e.length;t++){const o=s[t];let a=n.uniform[o];if(a)i=this._setUniform(a,e[t],i);else{if(!n.uniform.hasOwnProperty(o+"[0]"))throw new r.f(`Can't run shader: unknown parameter "${o}": ${e[t]}`);{const s=e[t];if(n.uniform.hasOwnProperty(`${o}[${s.length}]`))throw new r.f(`Can't run shader: too few elements in array "${o}"`);for(let e=0;a=n.uniform[`${o}[${e}]`];e++)i=this._setUniform(a,s[e],i)}}}i.renderToTexture?t.bindFramebuffer(t.FRAMEBUFFER,n.fbo):t.bindFramebuffer(t.FRAMEBUFFER,null),t.viewport(0,0,n.width,n.height),t.drawArrays(t.TRIANGLE_STRIP,0,4);let a=null;if(i.renderToTexture){if(a=n.texture,!i.recycleTexture){const e=o.createTexture(t,n.width,n.height);t.activeTexture(t.TEXTURE0),t.bindTexture(t.TEXTURE_2D,e),t.copyTexSubImage2D(t.TEXTURE_2D,0,0,0,0,0,n.width,n.height),t.bindTexture(t.TEXTURE_2D,null),a=e}i.pingpong&&n.pingpong()}return t.bindFramebuffer(t.FRAMEBUFFER,null),a}_setUniform(e,t,i){const n=this._gl;if("sampler2D"==e.type){if(i>n.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new r.i(`Can't bind ${i} textures to a program: max is ${n.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);if(t===this._stdprog.texture)throw new r.i("Can't run shader: cannot use its output texture as an input to itself");if(null==t)throw new r.f("Can't run shader: cannot use null as an input texture");n.activeTexture(n.TEXTURE0+i),n.bindTexture(n.TEXTURE_2D,t),n.uniform1i(e.location,i),i++}else if("number"==typeof t||"boolean"==typeof t)n[s[e.type]](e.location,t);else{if(!Array.isArray(t))throw new r.f(`Can't run shader: unrecognized argument "${t}"`);n[s[e.type]](e.location,...t)}return i}_initPixelBuffers(e){this._pixelBuffer=Array(1).fill(null),this._pixelBufferSize=[0,0],this._pboConsumerQueue=Array(1).fill(0).map((e,t)=>t),this._pboProducerQueue=[],this._pbo=Array(1).fill(null).map(()=>e.createBuffer())}_reallocatePixelBuffers(e,t){if(!(e*t<=this._pixelBufferSize[0]*this._pixelBufferSize[1])){this._pixelBufferSize[0]=e,this._pixelBufferSize[1]=t;for(let i=0;i<1;i++){const n=this._pixelBuffer[i];this._pixelBuffer[i]=this._createPixelBuffer(e,t),n&&(n.length>this._pixelBuffer[i].length?this._pixelBuffer[i].set(n.slice(0,this._pixelBuffer[i].length)):this._pixelBuffer[i].set(n))}}}_createPixelBuffer(e,t){const i=new Uint8Array(e*t*4);return i.fill(255,0,4),i}}function c(e,t,i,n,a={}){const c=o.createProgram(e,n.vertexSource,n.fragmentSource);e.bindAttribLocation(c,0,n.attributes.position),e.bindAttribLocation(c,1,n.attributes.texCoord);const l=o.createStandardGeometry(e,0,1);t=Math.max(0|t,1),i=Math.max(0|i,1),a.texSize=[t,i];const d={};for(const e of n.uniforms)d[e]={type:n.uniformType(e)};e.useProgram(c);for(const t in d){if(d[t].location=e.getUniformLocation(c,t),!s.hasOwnProperty(d[t].type))throw new r.i("Unknown uniform type: "+d[t].type);if(a.hasOwnProperty(t)){const i=a[t];if("number"==typeof i||"boolean"==typeof i)e[s[d[t].type]](d[t].location,i);else{if("object"!=typeof i)throw new r.f(`Unrecognized uniform value: "${i}"`);e[s[d[t].type]](d[t].location,...Array.from(i))}}}this.gl=e,this.program=c,this.uniform=d,this.width=t,this.height=i,this.dirtySize=!1,this.vertexObjects=l,this._fbo=this._texture=null,this._texIndex=0,Object.defineProperty(this,"fbo",{get:()=>this._fbo?this._fbo[this._texIndex]:null}),Object.defineProperty(this,"texture",{get:()=>this._texture?this._texture[this._texIndex]:null})}function l(e){return new Promise(t=>{const i=performance.now();!function n(){e.length>0?t(performance.now()-i):setTimeout(n,0)}()})}c.prototype.attachFBO=function(e=!1){const t=this.gl,i=this.width,n=this.height,r=e?2:1;this._texIndex=0,this._texture=Array(r),this._fbo=Array(r);for(let e=0;e<r;e++)this._texture[e]=o.createTexture(t,i,n),this._fbo[e]=o.createFramebuffer(t,this._texture[e])},c.prototype.detachFBO=function(){const e=this.gl;if(null!=this._fbo){for(let t of this._fbo)o.destroyFramebuffer(e,t);this._fbo=null}if(null!=this._texture){for(let t of this._texture)o.destroyTexture(e,t);this._texture=null}this._texIndex=0},c.prototype.pingpong=function(){null!=this._fbo&&this._fbo.length>1&&(this._texIndex=1-this._texIndex)},c.prototype.resize=function(e,t){const i=this.gl,n=this.width,r=this.height;if(e=Math.max(1,0|e),t=Math.max(1,0|t),this.width=e,this.height=t,this.dirtySize=!0,null!=this._fbo){const s=this._fbo.length,a=Array(s),c=Array(s);for(let l=0;l<s;l++)a[l]=o.createTexture(i,e,t),i.bindFramebuffer(i.FRAMEBUFFER,this._fbo[l]),i.activeTexture(i.TEXTURE0),i.bindTexture(i.TEXTURE_2D,a[l]),i.copyTexSubImage2D(i.TEXTURE_2D,0,0,0,0,0,Math.min(e,n),Math.min(t,r)),i.bindTexture(i.TEXTURE_2D,null),i.bindFramebuffer(i.FRAMEBUFFER,null),c[l]=o.createFramebuffer(i,a[l]);for(let e of this._fbo)o.destroyFramebuffer(i,e);for(let e of this._texture)o.destroyTexture(i,e);this._texture=a,this._fbo=c}};class d{constructor(e,t,i){this._gpu=e,this._width=t,this._height=i}declare(e,t,i={}){return Object.defineProperty(this,e,{get:(()=>{const n="__k_"+e;return function(){return this[n]||(this[n]=this._createProgram(t,i))}.bind(this)})()}),this}compose(e,...t){return Object.defineProperty(this,e,{get:(()=>{const i="__c_"+e;return function(){return this[i]||(this[i]=2==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[1](t[0](e,...i),...i)}))():3==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[2](t[1](t[0](e,...i),...i),...i)}))():4==t.length?(()=>(t=t.map(e=>this[e]),function(e,...i){return t[3](t[2](t[1](t[0](e,...i),...i),...i),...i)}))():(()=>(t=t.map(e=>this[e]),function(e,...i){return t.reduce((e,t)=>t(e,...i),e)}))())}.bind(this)})()}),this}get program(){return this._helpers||(this.helpers={hasTextureSize:(e,t)=>({output:[0|e,0|t]}),displaysGraphics:()=>({renderToTexture:!1}),doesNotRecycleTextures:()=>({recycleTexture:!1}),usesPingpongRendering:()=>({pingpong:!0})})}_createProgram(e,t={}){return new a(this._gpu.gl,e,{output:[this._width,this._height],...t})}}var h=i(1),p=i(3);const f=Object(h.b)("utils/identity.glsl").withArguments("image"),m=Object(h.b)("utils/flip-y.glsl").withArguments("image"),u=Object(h.b)("utils/fill.glsl").withArguments("value"),v=Object(h.b)("utils/fill-components.glsl").withArguments("image","pixelComponents","value"),g=Object(h.b)("utils/copy-components.glsl").withArguments("dest","src","destComponents","srcComponentId"),x=Object(h.b)("utils/scan-minmax2d.glsl").withArguments("image","iterationNumber");class _ extends d{constructor(e,t,i){super(e,t,i),this.declare("identity",f).declare("flipY",m).declare("output",m,{...this.program.displaysGraphics()}).declare("clone",f,{...this.program.doesNotRecycleTextures()}).declare("fill",u).declare("fillComponents",v).declare("_copyComponents",g).declare("_scanMinMax2D",x,{...this.program.usesPingpongRendering()})}release(e){return o.destroyTexture(this._gpu.gl,e)}generatePyramid(e){return o.generateMipmap(this._gpu.gl,e),e}scanMax(e,t){const i=this._scanMinMax(e,t);return this.copyComponents(e,i,t,p.d.RED)}scanMin(e,t){const i=this._scanMinMax(e,t);return this.copyComponents(e,i,t,p.d.GREEN)}copyComponents(e,t,i,n){if(!p.a.hasOwnProperty(n))throw new r.f("Invalid srcComponent: "+n);const o=p.a[n];return this._copyComponents(e,t,i,o)}_scanMinMax(e,t){const i=0|Math.ceil(Math.log2(Math.max(this._width,this._height)));let n=this.copyComponents(e,e,p.d.ALL,t);for(let e=0;e<i;e++)n=this._scanMinMax2D(n,e);return n}}const b=Object(h.b)("colors/rgb2grey.glsl").withArguments("image");class y extends d{constructor(e,t,i){super(e,t,i),this.declare("rgb2grey",b)}}var S=i(2);class A extends d{constructor(e,t,i){super(e,t,i),this.compose("gauss5","_gauss5x","_gauss5y").compose("gauss3","_gauss3x","_gauss3y").compose("gauss7","_gauss7x","_gauss7y").compose("box5","_box5x","_box5y").compose("box3","_box3x","_box3y").compose("box7","_box7x","_box7y").compose("box9","_box9x","_box9y").compose("box11","_box11x","_box11y").compose("dog16_1","_dog16_1x","_dog16_1y").declare("texConv2D3",Object(S.texConv2D)(3),{...this.program.usesPingpongRendering()}).declare("texConv2D5",Object(S.texConv2D)(5),{...this.program.usesPingpongRendering()}).declare("texConv2D7",Object(S.texConv2D)(7),{...this.program.usesPingpongRendering()}).compose("texConvXY3","texConvX3","texConvY3").declare("texConvX3",Object(S.texConvX)(3)).declare("texConvY3",Object(S.texConvY)(3)).compose("texConvXY5","texConvX5","texConvY5").declare("texConvX5",Object(S.texConvX)(5)).declare("texConvY5",Object(S.texConvY)(5)).compose("texConvXY7","texConvX7","texConvY7").declare("texConvX7",Object(S.texConvX)(7)).declare("texConvY7",Object(S.texConvY)(7)).compose("texConvXY9","texConvX9","texConvY9").declare("texConvX9",Object(S.texConvX)(9)).declare("texConvY9",Object(S.texConvY)(9)).compose("texConvXY11","texConvX11","texConvY11").declare("texConvX11",Object(S.texConvX)(11)).declare("texConvY11",Object(S.texConvY)(11)).declare("createKernel3x3",Object(S.createKernel2D)(3),{...this.program.hasTextureSize(3,3),...this.program.doesNotRecycleTextures()}).declare("createKernel5x5",Object(S.createKernel2D)(5),{...this.program.hasTextureSize(5,5),...this.program.doesNotRecycleTextures()}).declare("createKernel7x7",Object(S.createKernel2D)(7),{...this.program.hasTextureSize(7,7),...this.program.doesNotRecycleTextures()}).declare("createKernel3x1",Object(S.createKernel1D)(3),{...this.program.hasTextureSize(3,1),...this.program.doesNotRecycleTextures()}).declare("createKernel5x1",Object(S.createKernel1D)(5),{...this.program.hasTextureSize(5,1),...this.program.doesNotRecycleTextures()}).declare("createKernel7x1",Object(S.createKernel1D)(7),{...this.program.hasTextureSize(7,1),...this.program.doesNotRecycleTextures()}).declare("createKernel9x1",Object(S.createKernel1D)(9),{...this.program.hasTextureSize(9,1),...this.program.doesNotRecycleTextures()}).declare("createKernel11x1",Object(S.createKernel1D)(11),{...this.program.hasTextureSize(11,1),...this.program.doesNotRecycleTextures()}).declare("_gauss5x",Object(S.convX)([.05,.25,.4,.25,.05])).declare("_gauss5y",Object(S.convY)([.05,.25,.4,.25,.05])).declare("_gauss3x",Object(S.convX)([.25,.5,.25])).declare("_gauss3y",Object(S.convY)([.25,.5,.25])).declare("_gauss7x",Object(S.convX)([.00598,.060626,.241843,.383103,.241843,.060626,.00598])).declare("_gauss7y",Object(S.convY)([.00598,.060626,.241843,.383103,.241843,.060626,.00598])).declare("_box3x",Object(S.convX)([1,1,1],1/3)).declare("_box3y",Object(S.convY)([1,1,1],1/3)).declare("_box5x",Object(S.convX)([1,1,1,1,1],.2)).declare("_box5y",Object(S.convY)([1,1,1,1,1],.2)).declare("_box7x",Object(S.convX)([1,1,1,1,1,1,1],1/7)).declare("_box7y",Object(S.convY)([1,1,1,1,1,1,1],1/7)).declare("_box9x",Object(S.convX)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box9y",Object(S.convY)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box11x",Object(S.convX)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_box11y",Object(S.convY)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_dog16_1x",Object(S.convX)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725])).declare("_dog16_1y",Object(S.convY)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725]))}}const O=Object(h.b)("keypoints/fast9lg.glsl").withArguments("image","threshold"),w=Object(h.b)("keypoints/fast7.glsl").withArguments("image","threshold"),E=Object(h.b)("keypoints/fast5.glsl").withArguments("image","threshold"),M=Object(h.b)("keypoints/fast-score16.glsl").withArguments("image","threshold"),P=Object(h.b)("keypoints/fast-score12.glsl").withArguments("image","threshold"),L=Object(h.b)("keypoints/fast-score8.glsl").withArguments("image","threshold"),C=Object(h.b)("keypoints/multiscale-fast.glsl").withArguments("pyramid","threshold","numberOfOctaves"),k=Object(h.b)("keypoints/multiscale-fast.glsl").withArguments("pyramid","threshold","numberOfOctaves").withDefines({USE_HARRIS_SCORE:1}),T=Object(h.b)("keypoints/multiscale-harris.glsl").withArguments("pyramid","windowRadius","numberOfOctaves","sobelDerivatives"),R=Object(h.b)("keypoints/harris-cutoff.glsl").withArguments("corners","maxScore","quality"),I=Object(h.b)("keypoints/brisk.glsl").withArguments("image","layerA","layerB","scaleA","scaleB","lgM","h"),D=Object(h.b)("keypoints/nonmax-suppression.glsl").withArguments("image"),z=Object(h.b)("keypoints/multiscale-suppression.glsl").withArguments("image"),N=Object(h.b)("keypoints/samescale-suppression.glsl").withArguments("image"),j=Object(h.b)("keypoints/multiscale-sobel.glsl").withArguments("pyramid","lod");class F extends d{constructor(e,t,i){super(e,t,i),this.compose("fast9","_fast9","_fastScore16").declare("_fast9",O).declare("_fastScore16",M).compose("fast7","_fast7","_fastScore12").declare("_fast7",w).declare("_fastScore12",P).compose("fast5","_fast5","_fastScore8").declare("_fast5",E).declare("_fastScore8",L).declare("multiscaleFast",C).declare("multiscaleFastWithHarris",k).declare("brisk",I).declare("multiscaleHarris",T).declare("harrisCutoff",R).declare("nonmaxSuppression",D).declare("multiscaleSuppression",z).declare("samescaleSuppression",N).declare("multiscaleSobel",j,{...this.program.doesNotRecycleTextures()})}}class B{constructor(){}get data(){return null}}class G extends B{constructor(){super()}get data(){return null}}class X extends B{constructor(e){super(),this._data=e}get data(){return this._data}}class K{constructor(e,t,i=1,n=0,r=0,o=null){this._x=+e,this._y=+t,this._scale=+i,this._rotation=+n,this._score=+r,this._descriptor=null===o?new G:o}toString(){return`(${this._x},${this._y})`}get x(){return this._x}get y(){return this._y}get scale(){return this._scale}get rotation(){return this._rotation}get score(){return this._score}get descriptor(){return this._descriptor}}class q{constructor(e=32,t=5){if(this._bucketSize=1<<Math.ceil(Math.log2(e)),this._windowSize=t+(1-t%2),e<this._windowSize)throw new r.f("Invalid bucketSize of "+e);this._head=this._bucketSize-1,this._rawData=new Float32Array(this._bucketSize).fill(0),this._smoothedData=new Float32Array(this._bucketSize).fill(0),this._average=0,this._isSmooth=!0}put(e){this._head=this._head+1&this._bucketSize-1,this._rawData[this._head]=e,this._isSmooth=!1}get size(){return this._bucketSize}get average(){return this._isSmooth||this._smooth(),this._average}fill(e){return this._rawData.fill(e),this._smoothedData.fill(e),this._average=e,this._isSmooth=!0,this._head=this._bucketSize-1,this}_smooth(){this._average=0;for(let e=0;e<this._bucketSize;e++)this._smoothedData[e]=this._median(this._window(e)),this._average+=this._smoothedData[e];this._average/=this._bucketSize,this._isSmooth=!0}_window(e){const t=this._rawData,i=this._win||(this._win=new Float32Array(this._windowSize)),n=t.length,r=i.length>>1,o=this._head,s=o+1&n-1;for(let a=0,c=-r;c<=r;c++){let r=e+c;e<=o?r>o&&(r=o+(o-r)):r<s&&(r=s+(s-r)),r<0?r+=n:r>=n&&(r-=n),i[a++]=t[r]}return i}_median(e){switch(e.length){case 1:return e[0];case 3:return e[0]>e[1]&&([e[0],e[1]]=[e[1],e[0]]),e[1]>e[2]&&([e[1],e[2]]=[e[2],e[1]]),e[0]>e[1]&&([e[0],e[1]]=[e[1],e[0]]),e[1];case 5:return e[0]>e[1]&&([e[0],e[1]]=[e[1],e[0]]),e[3]>e[4]&&([e[3],e[4]]=[e[4],e[3]]),e[0]>e[3]&&([e[0],e[3]]=[e[3],e[0]]),e[1]>e[4]&&([e[1],e[4]]=[e[4],e[1]]),e[1]>e[2]&&([e[1],e[2]]=[e[2],e[1]]),e[2]>e[3]&&([e[2],e[3]]=[e[3],e[2]]),e[1]>e[2]&&([e[1],e[2]]=[e[2],e[1]]),e[2];case 7:return e[0]>e[5]&&([e[0],e[5]]=[e[5],e[0]]),e[0]>e[3]&&([e[0],e[3]]=[e[3],e[0]]),e[1]>e[6]&&([e[1],e[6]]=[e[6],e[1]]),e[2]>e[4]&&([e[2],e[4]]=[e[4],e[2]]),e[0]>e[1]&&([e[0],e[1]]=[e[1],e[0]]),e[3]>e[5]&&([e[3],e[5]]=[e[5],e[3]]),e[2]>e[6]&&([e[2],e[6]]=[e[6],e[2]]),e[2]>e[3]&&([e[2],e[3]]=[e[3],e[2]]),e[3]>e[6]&&([e[3],e[6]]=[e[6],e[3]]),e[4]>e[5]&&([e[4],e[5]]=[e[5],e[4]]),e[1]>e[4]&&([e[1],e[4]]=[e[4],e[1]]),e[1]>e[3]&&([e[1],e[3]]=[e[3],e[1]]),e[3]>e[4]&&([e[3],e[4]]=[e[4],e[3]]),e[3];default:return e.sort((e,t)=>e-t),(e[e.length-1>>1]+e[e.length>>1])/2}}}class U{constructor(e,t,i){if(this.constructor===U)throw new r.a;if(t>=i)throw new r.f(`Invalid boundaries [${t},${i}] given to the Tuner`);e=Math.max(t,Math.min(e,i)),this._state=e,this._prevState=e,this._prevPrevState=e,this._initialState=e,this._minState=t,this._maxState=i,this._bucket=new Array(i-t+1).fill(null).map(e=>new q(this._bucketSetup().size,this._bucketSetup().window)),this._iterations=0,this._epoch=0}currentValue(){return this._state}feedObservation(e){const t=this._bucketOf(this._state);if(t.put(+e),++this._iterations>=t.size){0==this._epoch&&(this._bucket.forEach(e=>e.fill(t.average)),isFinite(this._costOfBestState)||(this._costOfBestState=t.average));const e=e=>Math.max(this._minState,Math.min(0|e,this._maxState)),i=this._prevState,n=this._state;this._state=e(this._nextState()),this._prevState=n,this._prevPrevState=i,this._iterations=0,this._epoch++}}reset(){this._state=this._initialState,this._prevState=this._initialState,this._prevPrevState=this._initialState,this._iterations=0,this._epoch=0}finished(){return!1}_bucketOf(e){return e=Math.max(this._minState,Math.min(0|e,this._maxState)),this._bucket[e-this._minState]}_bucketSetup(){return{size:4,window:3}}_nextState(){throw new r.a}info(){const e=this._bucketOf(this._state),t=this._bucketOf(this._prevState);return{now:this._state,avg:e.average,itr:[this._iterations,this._epoch],bkt:e._smoothedData,cur:new Array(e.size).fill(0).map((t,i)=>i==e._head?1:0),prv:[this._prevState,t.average],fim:this.finished()}}}class Y extends U{constructor(e,t,i,n=.5,r=8,o=100,s=null){super(e,t,i),this._bestState=this._initialState,this._costOfBestState=1/0,this._initialTemperature=Math.max(0,o),this._temperature=this._initialTemperature,this._numIterations=0,this._maxIterationsPerTemperature=Math.max(1,r),this._alpha=Math.max(0,Math.min(n,1)),s||(s=e=>this._minState+Math.floor(Math.random()*(this._maxState-this._minState+1))),this._pickNeighbor=s}reset(){this._temperature=this._initialTemperature,this._numIterations=0}finished(){return this._temperature<=1e-5}_nextState(){if(this.finished())return this._bestState;const e=e=>this._bucketOf(e).average;let t=this._state,i=0|this._pickNeighbor(this._state,e(this._state));return i=Math.max(this._minState,Math.min(i,this._maxState)),(e(i)<e(this._state)||Math.random()<Math.exp((e(this._state)-e(i))/this._temperature))&&(t=i),e(t)<this._costOfBestState&&(this._bestState=t,this._costOfBestState=e(t)),++this._numIterations>=this._maxIterationsPerTemperature&&(this._temperature*=this._alpha,this._numIterations=0),t}info(){return{best:[this._bestState,this._costOfBestState],state:[this._state,this._bucketOf(this._state).average],iterations:[this._numIterations,this._maxIterationsPerTemperature],temperature:this._temperature,alpha:this._alpha,cool:this.finished()}}}const $=Math.PI,H=Object(h.b)("encoders/encode-keypoint-offsets.glsl").withArguments("image","imageSize","maxIterations"),V=Object(h.b)("encoders/encode-keypoints.glsl").withArguments("image","imageSize","encoderLength","descriptorSize"),W=Object(h.b)("encoders/orient-encoded-keypoints.glsl").withArguments("pyramid","patchRadius","encodedKeypoints","encoderLength","descriptorSize"),J=Object(h.b)("utils/identity.glsl").withArguments("image");class Q extends d{constructor(e,t,i){super(e,t,i),this.declare("_encodeKeypointOffsets",H).declare("_encodeKeypoints",V,{...this.program.hasTextureSize(128,128)}).declare("_downloadKeypoints",J,{...this.program.hasTextureSize(128,128)}).declare("_orientEncodedKeypoints",W,{...this.program.hasTextureSize(128,128)});this._tuner=new Y(48,32,48,.2,8,60,e=>Math.round(n.a.gaussianNoise(e,64))%256),this._keypointEncoderLength=128,this._spawnedAt=performance.now()}get encoderLength(){return this._keypointEncoderLength}optimizeKeypointEncoder(e,t=0){const i=Math.max(0,Math.min(Math.ceil(e),5e3)),n=Math.ceil(2+t/4),r=Math.ceil(Math.sqrt((4+1.05*i)*n)),o=Math.max(1,Math.min(r,300)),s=this._keypointEncoderLength;return o!=s&&(this._keypointEncoderLength=o,this._encodeKeypoints.resize(o,o),this._downloadKeypoints.resize(o,o),this._orientEncodedKeypoints.resize(o,o)),o-s}orientEncodedKeypoints(e,t,i,n=0){const r=this._keypointEncoderLength;return this._orientEncodedKeypoints(e,t,i,r,n)}encodeKeypoints(e,t=0){const i=this._keypointEncoderLength,n=[this._width,this._height],r=this._tuner.currentValue(),o=this._encodeKeypointOffsets(e,n,r);return this._encodeKeypoints(o,n,i,t)}decodeKeypoints(e,t=0){const[i,n]=[this._width,this._height],r=2+t/4,o=Math.log2(this._gpu.pyramidMaxScale),s=this._gpu.pyramidHeight,a=[];let c,l,d,h,p,f,m;for(let u=0;u<e.length&&(c=e[u+1]<<8|e[u],l=e[u+3]<<8|e[u+2],!(c>=i||l>=n));u+=4*r)if(f=e[u+4]<255,d=f?Math.pow(2,-o+(o+s)*e[u+4]/255):1,m=f,h=m?(2*e[u+5]/255-1)*$:0,p=e[u+6]/255,t>0){const i=new Uint8Array(e.slice(u+8,u+8+t)),n=new X(i);a.push(new K(c,l,d,h,p,n))}else a.push(new K(c,l,d,h,p));return 0==a.length&&this._tuner.finished()&&this._tuner.reset(),a}async downloadEncodedKeypoints(e,t=!0){try{this._downloadKeypoints(e);let i,n=performance.now();return i=t?await this._downloadKeypoints.readPixelsAsync():this._downloadKeypoints.readPixelsSync(),n=performance.now()-n,performance.now()>=this._spawnedAt+2e3&&this._tuner.feedObservation(n),i}catch(e){throw new r.g("Can't download encoded keypoint texture",e)}}}const Z=Object(h.b)("descriptors/orb.glsl").withArguments("pyramid","encodedCorners","encoderLength");class ee extends d{constructor(e,t,i){super(e,t,i),this.declare("_orb",Z)}orb(e,t,i){return this._orb.resize(i,i),this._orb(e,t,i)}}var te=i(4);const ie=Object(h.b)("pyramids/upsample2.glsl").withArguments("image"),ne=Object(h.b)("pyramids/downsample2.glsl").withArguments("image"),re=Object(h.b)("pyramids/upsample3.glsl").withArguments("image"),oe=Object(h.b)("pyramids/downsample3.glsl").withArguments("image"),se=Object(h.b)("pyramids/merge-keypoints.glsl").withArguments("target","source"),ae=Object(h.b)("pyramids/merge-keypoints-at-consecutive-levels.glsl").withArguments("largerImage","smallerImage"),ce=Object(h.b)("pyramids/normalize-keypoints.glsl").withArguments("image","imageScale"),le=Object(h.b)("pyramids/crop.glsl").withArguments("image"),de=Object(h.b)("utils/flip-y.glsl").withArguments("image");class he extends d{constructor(e,t,i){super(e,t,i),this.declare("setBase",function(e){const t=Math.log2(te.d),i=Math.pow(2,-te.b)+1e-5,n=Math.max(i,Math.min(e,te.d)),r=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        color = vec4(threadPixel(image).rgb, float(${(t-Math.log2(n))/(t+te.b)}));\n    }\n    `;return Object(h.a)(r).withArguments("image")}(1)).compose("reduce","_smoothX","_smoothY","_downsample2","_scale1/2").compose("expand","_upsample2","_smoothX2","_smoothY2","_scale2").compose("intraReduce","_upsample2","_smoothX2","_smoothY2","_downsample3/2","_scale2/3").compose("intraExpand","_upsample3","_smoothX3","_smoothY3","_downsample2/3","_scale3/2").declare("mergeKeypoints",se).declare("mergeKeypointsAtConsecutiveLevels",ae).declare("normalizeKeypoints",ce).declare("crop",le).declare("output",de,{...this.program.hasTextureSize(this._width,this._height),...this.program.displaysGraphics()}).declare("output2",de,{...this.program.hasTextureSize(2*this._width,2*this._height),...this.program.displaysGraphics()}).declare("output3",de,{...this.program.hasTextureSize(3*this._width,3*this._height),...this.program.displaysGraphics()}).declare("_smoothX",Object(S.convX)([.05,.25,.4,.25,.05])).declare("_smoothY",Object(S.convY)([.05,.25,.4,.25,.05])).declare("_smoothX2",Object(S.convX)([.1,.5,.8,.5,.1]),this.program.hasTextureSize(2*this._width,2*this._height)).declare("_smoothY2",Object(S.convY)([.1,.5,.8,.5,.1],.5),this.program.hasTextureSize(2*this._width,2*this._height)).declare("_smoothX3",Object(S.convX)([.2,.8,1,.8,.2]),this.program.hasTextureSize(3*this._width,3*this._height)).declare("_smoothY3",Object(S.convY)([.2,.8,1,.8,.2],1/3),this.program.hasTextureSize(3*this._width,3*this._height)).declare("_upsample2",ie,this.program.hasTextureSize(2*this._width,2*this._height)).declare("_downsample2",ne,this.program.hasTextureSize((1+this._width)/2,(1+this._height)/2)).declare("_upsample3",re,this.program.hasTextureSize(3*this._width,3*this._height)).declare("_downsample3",oe,this.program.hasTextureSize((2+this._width)/3,(2+this._height)/3)).declare("_downsample2/3",ne,this.program.hasTextureSize(3*this._width/2,3*this._height/2)).declare("_downsample3/2",oe,this.program.hasTextureSize(2*this._width/3,2*this._height/3)).declare("_scale2",pe(2),this.program.hasTextureSize(2*this._width,2*this._height)).declare("_scale1/2",pe(.5),this.program.hasTextureSize((1+this._width)/2,(1+this._height)/2)).declare("_scale3/2",pe(1.5),this.program.hasTextureSize(3*this._width/2,3*this._height/2)).declare("_scale2/3",pe(2/3),this.program.hasTextureSize(2*this._width/3,2*this._height/3))}}function pe(e){const t=Math.log2(te.d),i=Math.max(1e-5,e),n=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        vec4 pixel = threadPixel(image);\n        float alpha = clamp(pixel.a + float(${-Math.log2(i)/(t+te.b)}), 0.0f, 1.0f);\n\n        color = vec4(pixel.rgb, alpha);\n    }\n    `;return Object(h.a)(n).withArguments("image")}const fe=Object(h.b)("enhancements/normalize-image.glsl").withArguments("minmax2d","minValue","maxValue").withDefines({GREYSCALE:1}),me=Object(h.b)("enhancements/normalize-image.glsl").withArguments("minmax2dRGB","minValue","maxValue"),ue=Object(h.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset"),ve=Object(h.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset").withDefines({GREYSCALE:1});class ge extends d{constructor(e,t,i){super(e,t,i),this.declare("_normalizeGreyscaleImage",fe).declare("_normalizeColoredImage",me).declare("_nightvision",ue).declare("_nightvisionGreyscale",ve).compose("_illuminationMap80","_illuminationMap80x","_illuminationMap80y").declare("_illuminationMap80x",Object(S.convX)(n.a.gaussianKernel(80,63,!0))).declare("_illuminationMap80y",Object(S.convY)(n.a.gaussianKernel(80,63,!0)))}normalizeGreyscaleImage(e,t=0,i=255){const n=this._gpu.programs.utils._scanMinMax(e,p.d.GREEN);return this._normalizeGreyscaleImage(n,Math.min(t,i),Math.max(t,i))}normalizeColoredImage(e,t=0,i=255){const n=this._gpu,r=new Array(3);r[0]=this.clone(n.programs.utils._scanMinMax(e,p.d.RED)),r[1]=this.clone(n.programs.utils._scanMinMax(e,p.d.GREEN)),r[2]=n.programs.utils._scanMinMax(e,p.d.BLUE);const o=this._normalizeColoredImage(r,Math.min(t,i),Math.max(t,i));return n.programs.utils.release(r[1]),n.programs.utils.release(r[0]),o}nightvision(e,t=.45,i=.45,n=!1){return(n?this._nightvisionGreyscale:this._nightvision)(e,this._illuminationMap80(e),t,i)}}class xe{constructor(e,t,i){this._gpu=e,this._width=t,this._height=i,this._utils=null,this._colors=null,this._filters=null,this._keypoints=null,this._encoders=null,this._descriptors=null,this._pyramids=null,this._enhancements=null}get width(){return this._width}get height(){return this._height}get utils(){return this._utils||(this._utils=new _(this._gpu,this._width,this._height))}get colors(){return this._colors||(this._colors=new y(this._gpu,this._width,this._height))}get filters(){return this._filters||(this._filters=new A(this._gpu,this._width,this._height))}get keypoints(){return this._keypoints||(this._keypoints=new F(this._gpu,this._width,this._height))}get encoders(){return this._encoders||(this._encoders=new Q(this._gpu,this._width,this._height))}get descriptors(){return this._descriptors||(this._descriptors=new ee(this._gpu,this._width,this._height))}get pyramids(){return this._pyramids||(this._pyramids=new he(this._gpu,this._width,this._height))}get enhancements(){return this._enhancements||(this._enhancements=new ge(this._gpu,this._width,this._height))}}class _e{constructor(e,t){this._gl=null,this._canvas=null,this._width=0,this._height=0,this._programs=null,this._pyramid=null,this._intraPyramid=null,this._inputTexture=null,this._inputTextureIndex=0,this._omitGLContextWarning=!1,function(){if("undefined"==typeof WebGL2RenderingContext)throw new r.i("WebGL2 is required by this application, but it's not available in your browser. Please use a different browser.")}(),this._width=Math.max(1,0|e),this._height=Math.max(1,0|t),(this._width>te.a||this._height>te.a)&&(n.a.warning(`Maximum texture size exceeded (using ${this._width} x ${this._height}).`),this._width=Math.min(this._width,te.a),this._height=Math.min(this._height,te.a)),this._setupWebGL()}get gl(){return this._gl}get canvas(){return this._canvas}get programs(){return this._programs}pyramid(e){const t=0|e;if(t<0||t>=te.b)throw new r.f("Invalid pyramid level: "+t);return this._pyramid[t]}intraPyramid(e){const t=0|e;if(t<0||t>=te.b+1)throw new r.f("Invalid intra-pyramid level: "+t);return this._intraPyramid[t]}get pyramidHeight(){return te.b}get pyramidMaxScale(){return te.d}upload(e,t=-1,i=-1){const s=this._gl;if(s.isContextLost())return n.a.warning("Can't upload texture without a WebGL context"),this._inputTexture=null;if(t<0&&(t=s.canvas.width),i<0&&(i=s.canvas.height),0==t||0==i)throw new r.f("Can't upload an image of area 0");if(null===this._inputTexture)s.canvas.width=Math.max(s.canvas.width,t),s.canvas.height=Math.max(s.canvas.height,i),this._inputTexture=Array(2).fill(null).map(e=>o.createTexture(s,s.canvas.width,s.canvas.height));else if(t>s.canvas.width||i>s.canvas.height)return n.a.warning(`Resizing input texture to ${t} x ${i}`),this._inputTexture.forEach(e=>o.destroyTexture(s,e)),this.upload(e,t,i);return this._inputTextureIndex=1-this._inputTextureIndex,o.uploadToTexture(s,this._inputTexture[this._inputTextureIndex],t,i,e),this._inputTexture[this._inputTextureIndex]}loseAndRestoreWebGLContext(e=1){const t=this._gl;if(t.isContextLost())return Promise.reject("Context already lost");const i=t.getExtension("WEBGL_lose_context");if(i)return i.loseContext(),new Promise(t=>{isFinite(e)?setTimeout(()=>{i.restoreContext(),setTimeout(()=>t(),0)},1e3*Math.max(e,0)):t()});throw new r.i("WEBGL_lose_context is unavailable")}loseWebGLContext(){return this._omitGLContextWarning=!0,this.loseAndRestoreWebGLContext(1/0)}_setupWebGL(){const e=this._width,t=this._height;this._programs=null,this._pyramid=null,this._intraPyramid=null,this._inputTexture=null,this._inputTextureIndex=0,this._omitGLContextWarning=!1,void 0!==this._canvas&&delete this._canvas,this._canvas=function(e,t){if("function"==typeof importScripts&&"undefined"!=typeof WorkerGlobalScope){if("function"!=typeof OffscreenCanvas)throw new r.i("OffscreenCanvas is not available in your browser. Please upgrade.");return new OffscreenCanvas(e,t)}{const i=document.createElement("canvas");return i.width=e,i.height=t,i}}(e,t),this._canvas.addEventListener("webglcontextlost",e=>{this._omitGLContextWarning||n.a.warning("Lost WebGL context"),e.preventDefault()},!1),this._canvas.addEventListener("webglcontextrestored",e=>{this._omitGLContextWarning||n.a.warning("Restoring WebGL context..."),this._setupWebGL()},!1),this._gl=function(e){const t=e.getContext("webgl2",{premultipliedAlpha:!1,preserveDrawingBuffer:!1,alpha:!0,antialias:!1,depth:!1,stencil:!1});if(!t)throw new r.i("Can't create WebGL2 context. Try in a different browser.");return t}(this._canvas),this._programs=new xe(this,e,t),this._pyramid=this._buildPyramid(e,t,1,te.b),this._intraPyramid=this._buildPyramid(e,t,1.5,te.b+1)}_buildPyramid(e,t,i,n){let r=+i,o=e*r|0,s=t*r|0,a=new Array(n);for(let e=0;e<a.length;e++)a[e]=new xe(this,o,s),o=(1+o)/2|0,s=(1+s)/2|0,r/=2;return a}}class be{constructor(){this._subscribers=[]}subscribe(e){this._subscribers.indexOf(e)<0&&this._subscribers.push(e)}unsubscribe(e){this._subscribers=this._subscribers.filter(t=>t!==e)}_notify(e){for(const t of this._subscribers)t(e)}}class ye extends be{constructor(e,t=0){super(),this._gpu=e,this._descriptorSize=Math.max(0,0|t),this._rawKeypointCount=0,this._filteredKeypointCount=0}download(e,t=!0,i=-1){const n=this._gpu;return n.programs.encoders.downloadEncodedKeypoints(e,t).then(e=>{const r=n.programs.encoders.decodeKeypoints(e,this._descriptorSize),o=Math.max(r.length,64),s=Math.max(this._filteredKeypointCount,64),a=t?.02:2,c=Math.ceil(a*o+(1-a)*s);return this._filteredKeypointCount=c,this._rawKeypointCount=r.length,n.programs.encoders.optimizeKeypointEncoder(c,this._descriptorSize),r.sort(this._compareKeypoints),i=Number(i),Number.isFinite(i)&&i>=0&&r.splice(i,r.length-i),t&&c<r.length&&r.splice(c,r.length-c),this._notify(r),r}).catch(e=>{throw new r.g("Can't download keypoints",e)})}_compareKeypoints(e,t){return+t.score-+e.score}}class Se extends U{constructor(e,t,i=.1,r=.05){super(Math.round(n.a.gaussianNoise((e+t)/2,5)),e,t),this._tolerance=Math.max(0,i),this._bestState=this._initialState,this._expected=null,this._learningRate=Math.max(0,r),this._lastObservation=0}reset(){super.reset(),this._expected=null}feedObservation(e,t){const i=+e,n=+t;n!==this._expected&&this.reset(),this._expected=n;const r=Math.abs(i)>2*Math.abs(this._lastObservation);if(this._lastObservation=i,r)return;const o=(i-n)*(i-n)/(n*n);super.feedObservation(o)}finished(){return(e=>Math.sqrt(this._bucketOf(e).average)*Math.abs(this._expected))(this._bestState)<=this._tolerance*this._expected}get tolerance(){return this._tolerance}set tolerance(e){this._tolerance=Math.max(0,e)}_nextState(){if(this.finished())return this._bestState;const e=e=>Math.sqrt(this._bucketOf(e).average)*Math.abs(this._expected);e(this._state)<e(this._bestState)&&(this._bestState=this._state);const t=Math.abs(this._maxState),i=this._learningRate*(e=>Math.sqrt(this._bucketOf(e).average)*t)(this._state),r=e=>Number(e>=0)-Number(e<0),o=e(this._state)-e(this._prevState),s=r(o)*r(0!=o?-(this._state-this._prevState):1)*r(Math.random()-.15),a=n.a.gaussianNoise(1,.1);let c=Math.round(this._state+s*a*i);return(c>this._maxState||c<this._minState)&&(c=this._bestState),c}info(){return{now:[this._state,this._prevState],bkt:this._bucketOf(this._state)._rawData,cur:this._bucketOf(this._state)._head,err:[this._bucketOf(this._state).average,this._bucketOf(this._prevState).average],sqt:Math.sqrt(this._bucketOf(this._state).average),done:this.finished()}}}class Ae extends be{constructor(e){super(),this._sensitivity=0,this._expected=0,this._tolerance=.1,this._tuner=null,this._downloader=e,this._onDownloadKeypoints=this._onDownloadKeypoints.bind(this),this.enable()}get sensitivity(){return this._sensitivity}get expected(){return this._expected}set expected(e){this._expected=Math.max(0,0|e)}get tolerance(){return this._tolerance}set tolerance(e){this._tolerance=Math.max(0,+e)}enable(){this._downloader.subscribe(this._onDownloadKeypoints)}disable(){this._downloader.unsubscribe(this._onDownloadKeypoints)}_onDownloadKeypoints(e){null==this._tuner&&(this._tuner=new Se(0,1200)),this._tuner.tolerance=this._tolerance,this._tuner.feedObservation(e.length,this._expected);const t=this._tuner.currentValue();this._sensitivity=Math.max(0,Math.min(.001*t,1)),this._notify(this._sensitivity)}}class Oe{constructor(e){this._gpu=e,this._downloader=new ye(this._gpu,this.descriptorSize),this._sensitivity=0,this._automaticSensitivity=null}get descriptorSize(){throw new r.a}_onSensitivityChange(e){throw new r.a}detect(e){throw new r.a}describe(e,t){return t}detectAndDescribe(e){return this.describe(e,this.detect(e))}download(e,t=!0,i=-1){return this._downloader.download(e,t,i)}preprocess(e,t=!0,i=!0,n=!1){const r=this._gpu;let o=e;return t&&(o=r.programs.filters.gauss5(o)),i&&(o=r.programs.colors.rgb2grey(o)),n&&(o=r.programs.enhancements.nightvision(o,void 0,void 0,!0)),o}get sensitivity(){return this._sensitivity}set sensitivity(e){this._sensitivity=Math.max(0,Math.min(+e,1)),this._onSensitivityChange(this._sensitivity)}get expected(){return null==this._automaticSensitivity?{number:this._automaticSensitivity.expected,tolerance:this._automaticSensitivity.tolerance}:void 0}set expected(e){void 0!==e?(null==this._automaticSensitivity&&(this._automaticSensitivity=new Ae(this._downloader),this._automaticSensitivity.subscribe(e=>this.sensitivity=e)),"object"==typeof e?(e.hasOwnProperty("number")&&(this._automaticSensitivity.expected=+e.number),e.hasOwnProperty("tolerance")&&(this._automaticSensitivity.tolerance=+e.tolerance)):this._automaticSensitivity.expected=+e):(null!=this._automaticSensitivity&&this._automaticSensitivity.disable(),this._automaticSensitivity=null)}get gpu(){return this._gpu}}const we=te.b;class Ee extends Oe{constructor(e){super(e),this._n=9,this._threshold=10}get n(){return this._n}set n(e){if(9!=e&&7!=e&&5!=e)throw new r.i("Can't run FAST with n = "+e);this._n=0|e}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(0,Math.min(0|e,255))}_onSensitivityChange(e){this.threshold=Math.round(255*(1-Math.tanh(2.77*e)))}get descriptorSize(){return 0}detect(e){const t=this._n,i=this._gpu,n=this._threshold/255,r=this.descriptorSize;let o=null;return 9==t?o=i.programs.keypoints.fast9(e,n):7==t?o=i.programs.keypoints.fast7(e,n):5==t&&(o=i.programs.keypoints.fast5(e,n)),o=i.programs.keypoints.nonmaxSuppression(o),i.programs.encoders.encodeKeypoints(o,r)}}const Me=te.b,Pe=2*te.b-1;class Le extends Oe{constructor(e){super(e),this._quality=.1}get quality(){return this._quality}set quality(e){this._quality=Math.max(0,Math.min(e,1))}_onSensitivityChange(e){this.quality=1-Math.tanh(2.3*e)}get descriptorSize(){return 0}detect(e){const t=this._gpu,i=this._quality,n=this.descriptorSize,r=t.programs.keypoints.multiscaleSobel(e,0),o=Array(Pe).fill(r),s=t.programs.keypoints.multiscaleHarris(e,1,1,o);t.programs.utils.release(r);const a=t.programs.utils.scanMax(s,p.d.RED),c=t.programs.keypoints.harrisCutoff(s,a,i),l=t.programs.keypoints.nonmaxSuppression(c);return t.programs.encoders.encodeKeypoints(l,n)}}class Ce extends Le{constructor(e){super(e),this._depth=3}get depth(){return this._depth}set depth(e){if(e<1||e>Me)throw new r.f("Invalid depth: "+e);this._depth=0|e}detect(e){const t=this._gpu,i=this._quality,n=this.descriptorSize,r=2*this._depth-1,o=t.programs.utils.generatePyramid(e),s=t.programs.keypoints.multiscaleSobel(o,0),a=Array(Pe).fill(s);for(let e=1;e<r;e++)a[e]=t.programs.keypoints.multiscaleSobel(o,.5*e);const c=t.programs.keypoints.multiscaleHarris(o,1,r,a);for(let e=0;e<a.length;e++)a[e]=t.programs.utils.release(a[e]);const l=t.programs.utils.scanMax(c,p.d.RED),d=t.programs.keypoints.harrisCutoff(c,l,i),h=t.programs.keypoints.samescaleSuppression(d),f=t.programs.keypoints.multiscaleSuppression(h),m=t.programs.encoders.encodeKeypoints(f,n);return t.programs.encoders.orientEncodedKeypoints(o,7,m,n)}}const ke=te.b;let Te=null,Re=null;function Ie(e){const{n:t,r:i,l:n}=e,r=2*Math.PI;return[...Array(t).keys()].map(e=>({x:n*Math.cos(r*e/t),y:n*Math.sin(r*e/t),r:i,l:n,j:e,n:t}))}function De(e,t=1){const i=function(e=1){const t=Math.PI/2,i=Math.sin(t/10),n=Math.sin(t/14),r=Math.sin(t/15),o=Math.sin(t/20),s=4.21*e,a=2*s*i,c=2*(s+a)*n/(1-2*n),l=s+a+c,d=2*(l+c)*r/(1-2*r),h=l+c+d,p=2*(h+d)*o/(1-2*o);return[{n:1,r:.8*a,l:0},{n:10,r:a,l:s},{n:14,r:c,l:l},{n:15,r:d,l:h},{n:20,r:p,l:h+d+p}]}(t).map(Ie).reduce((e,t)=>e.concat(t),[]);const n=i.length,r=+e*t,o=(e,t)=>(e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y),s=r<0?(e,t)=>o(e,t)<r*r:(e,t)=>o(e,t)>r*r,a=[];for(let e=1;e<n;e++)for(let t=0;t<e;t++)s(i[e],i[t])&&(a.push(i[e].x),a.push(i[e].y),a.push(i[t].x),a.push(i[t].y));return new Float32Array(a)}const ze={fast:Ee,"multiscale-fast":class extends Ee{constructor(e){super(e),this._depth=3,this._useHarrisScore=!1}get depth(){return this._depth}set depth(e){if(e<1||e>we)throw new r.f("Invalid depth: "+e);this._depth=0|e}get useHarrisScore(){return this._useHarrisScore}set useHarrisScore(e){this._useHarrisScore=Boolean(e)}set n(e){if(9!=e)throw new r.i;this._n=0|e}detect(e){const t=this._gpu,i=this._threshold/255,n=this._useHarrisScore,r=this.descriptorSize,o=2*this._depth-1,s=t.programs.utils.generatePyramid(e);let a=null;a=n?t.programs.keypoints.multiscaleFastWithHarris(s,i,o):t.programs.keypoints.multiscaleFast(s,i,o),a=t.programs.keypoints.samescaleSuppression(a),a=t.programs.keypoints.multiscaleSuppression(a);const c=t.programs.encoders.encodeKeypoints(a,r);return t.programs.encoders.orientEncodedKeypoints(s,7,c,r)}},harris:Le,"multiscale-harris":Ce,orb:class extends Ce{constructor(e){super(e)}get descriptorSize(){return 32}detect(e){return super.detect(e)}describe(e,t){const i=this._gpu,n=i.programs.filters.gauss7(e),r=i.programs.utils.generatePyramid(n),o=i.programs.encoders.encoderLength;return i.programs.descriptors.orb(r,t,o)}},brisk:class extends Oe{constructor(e){super(e),this._depth=4}get descriptorSize(){return 64}get depth(){return this._depth}set depth(e){if(e<1||e>ke)throw new r.f("Invalid depth: "+e);this._depth=0|e}detect(e){throw new r.h}describe(e,t){return t}static get shortDistancePairs(){return Te||(Te=function(e=9.75,t=1){return De(-e,t)}())}static get longDistancePairs(){return Re||(Re=function(e=13.67,t=1){return De(e,t)}())}}};class Ne{constructor(e,t,i,n={}){if(arguments.length>1)this._source=e,this._width=0|t,this._height=0|i,this._type=function(e){if(e&&e.constructor)switch(e.constructor.name){case"HTMLImageElement":return p.c.Image;case"HTMLVideoElement":return p.c.Video;case"HTMLCanvasElement":return p.c.Canvas;default:return p.c.Texture}throw new r.f("Can't get media type: invalid media source. "+e)}(this._source),this._colorFormat=p.b.RGB,this._options=Fe(n,{usage:this._type!=p.c.Image?"dynamic":"static"}),this._gpu=new _e(this._width,this._height),this._featuresAlgorithm=null;else{if(1!=arguments.length)throw new r.f("Invalid instantiation of SpeedyMedia");{const e=arguments[0];this._source=e._source,this._width=e._width,this._height=e._height,this._type=e._type,this._colorFormat=e._colorFormat,this._gpu=e._gpu,this._featuresAlgorithm=e._featuresAlgorithm}}}static load(e,t={}){return new Promise((i,o)=>{const s=je(e);null!=s?function s(a,c=500){if(a.width>0&&a.height>0){const r=new Ne(e,a.width,a.height,t);n.a.log(`Loaded SpeedyMedia with a ${e}.`),i(r)}else c>0?setTimeout(()=>s(je(e),c-1),10):o(new r.k(`Can't load SpeedyMedia with a ${e}: timeout.`))}(s):o(new r.f(`Can't load SpeedyMedia with a ${e}: invalid media source.`))})}static loadCameraStream(e=426,t=240,i={},o={}){return function(e,t,i={}){return new Promise((o,s)=>{if(n.a.log("Accessing the webcam..."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)return s(new r.i("Unsupported browser: no mediaDevices.getUserMedia()"));navigator.mediaDevices.getUserMedia({audio:!1,video:{width:{ideal:e},height:{ideal:t},aspectRatio:{ideal:e/t},facingMode:"environment"},...i}).then(e=>{const t=document.createElement("video");t.srcObject=e,t.onloadedmetadata=i=>{t.play(),n.a.log("The camera device is turned on!"),o(t,e)}}).catch(e=>{s(new r.b("Please give access to the camera and reload the page",e))})})}(e,t,i).then(e=>Ne.load(function(e){const t=document.createElement("canvas"),i=t.getContext("2d");function n(){i.drawImage(e,0,0),requestAnimationFrame(n)}return t.width=e.videoWidth,t.height=e.videoHeight,n(),t}(e),o))}get source(){return this._source}get width(){return this._width}get height(){return this._height}get type(){switch(this._type){case p.c.Image:return"image";case p.c.Video:return"video";case p.c.Canvas:return"canvas";case p.c.Texture:return"internal";default:return"unknown"}}get options(){return this._options}release(){return this.isReleased()||(this._featuresAlgorithm=null,this._gpu.loseWebGLContext(),this._gpu=null,this._source=null),Promise.resolve()}isReleased(){return null==this._gpu}clone(e={}){if(e={lightweight:!1,...e},this.isReleased())throw new IllegalOperationError("Can't clone a SpeedyMedia that has been released");if(e.lightweight)return new Ne(this);{let e=this._source;return this._type!=p.c.Texture&&this._type!=p.c.Canvas||(e=function(e){const t=document.createElement("canvas");return t.width=e.width,t.height=e.height,e.draw(t),t}(this)),new Ne(e,this._width,this._height)}}run(e){if(this.isReleased())throw new IllegalOperationError("Can't run pipeline: SpeedyMedia has been released");const t=this.clone({lightweight:!0});return t._type=p.c.Texture,e._run(t)}draw(e,t=0,i=0,n=this.width,r=this.height){if(this.isReleased())return;const o=e.getContext("2d");switch(t=+t,i=+i,n=Math.max(n,0),r=Math.max(r,0),this._type){case p.c.Image:case p.c.Video:case p.c.Canvas:o.drawImage(this._source,t,i,n,r);break;case p.c.Texture:o.drawImage(this._gpu.canvas,t,i,n,r)}}findFeatures(e={}){if(e.hasOwnProperty("method")||(e.method="fast"),e.hasOwnProperty("denoise")||(e.denoise=!0),e.hasOwnProperty("max")||(e.max=void 0),e.hasOwnProperty("enhancements")||(e.enhancements={}),e.method=String(e.method),e.denoise=Boolean(e.denoise),void 0!==e.max&&(e.max=Number(e.max)),"object"!=typeof e.enhancements)throw new r.f("settings.enhancements must be an object");if(!ze.hasOwnProperty(e.method))throw new r.f(`Invalid method "${e.method}" for feature detection`);if(this.isReleased())throw new IllegalOperationError("Can't find features: SpeedyMedia has been released");null!=this._featuresAlgorithm&&this._featuresAlgorithm.constructor===ze[e.method]||(this._featuresAlgorithm=new ze[e.method](this._gpu));for(const t in e)e.hasOwnProperty(t)&&t in this._featuresAlgorithm&&(this._featuresAlgorithm[t]=e[t]);let t=this._gpu.upload(this._source);t=this._featuresAlgorithm.preprocess(t,e.denoise,this._colorFormat!=p.b.Greyscale,1==e.enhancements.illumination);let i=this._featuresAlgorithm.detectAndDescribe(t);return this._featuresAlgorithm.download(i,"dynamic"==this.options.usage,e.max)}}function je(e){if(e&&e.constructor&&e.constructor.name){const t=e.constructor.name,i={HTMLImageElement:{width:"naturalWidth",height:"naturalHeight"},HTMLVideoElement:{width:"videoWidth",height:"videoHeight"},HTMLCanvasElement:{width:"width",height:"height"}};if(i.hasOwnProperty(t))return{width:e[i[t].width],height:e[i[t].height]}}return null}function Fe(e,t){const i=Fe._err||(Fe._err=(...e)=>n.a.warning("Invalid option when loading media.",...e));return"dynamic"!=(e=Object.assign(t,e)).usage&&"static"!=e.usage&&(i(`Unrecognized usage: "${e.usage}"`),e.usage=t.usage),Object.freeze(e)}const Be={};class Ge{run(e,t,i){return e}release(){}_saveOptions(e,t){return"function"==typeof e?()=>Object.assign(t,e()):()=>Object.assign(t,e)}}Be.ConvertToGreyscale=class extends Ge{run(e,t,i){if(i._colorFormat==p.b.RGB)e=t.programs.colors.rgb2grey(e);else if(i._colorFormat!=p.b.Greyscale)throw new r.i("Can't convert image to greyscale: unknown color format");return i._colorFormat=p.b.Greyscale,e}},Be.Blur=class extends Ge{constructor(e={}){super(),this._getOptions=this._saveOptions(e,{filter:"gaussian",size:5})}run(e,t,i){const{filter:n,size:o}=this._getOptions();if("gaussian"!=n&&"box"!=n)throw new r.f(`Invalid filter: "${n}"`);if(3!=o&&5!=o&&7!=o)throw new r.f("Invalid kernel size: "+o);let s="gaussian"==n?"gauss":"box";return t.programs.filters[s+o](e)}},Be.Convolve=class extends Ge{constructor(e,t=1){let i=new Float32Array(e).map(e=>e/t);const n=i.length,o=0|Math.sqrt(n),s={3:["createKernel3x3","texConv2D3"],5:["createKernel5x5","texConv2D5"],7:["createKernel7x7","texConv2D7"]}[o]||null;if(super(),1==n)throw new r.f("Cannot convolve with a kernel containing a single element");if(o*o!=n||!s)throw new r.f(`Cannot convolve with a non-square kernel of ${n} elements`);const a=Math.min(...i),c=Math.max(...i),l=a,d=Math.abs(c-a)>1e-5?c-a:1;i=i.map(e=>(e-l)/d),this._method=s,this._scale=d,this._offset=l,this._kernel=i,this._kernelSize=o,this._texKernel=null,this._gl=null}run(e,t,i){if(t.gl.isContextLost())this._texKernel=null,this._gl=null;else if(null==this._texKernel||this._gl!==t.gl&&null!==this._gl){if(this._gl!==t.gl&&null!==this._gl&&!this._gl.isContextLost()){const e="Performance warning: need to recreate the texture kernel. Consider duplicating the pipeline when using convolutions for different media objects.";n.a.warning(e),o.destroyTexture(this._gl,this._texKernel)}this._texKernel=t.programs.filters[this._method[0]](this._kernel),this._gl=t.gl}return t.programs.filters[this._method[1]](e,this._texKernel,this._scale,this._offset)}release(){null!=this._texKernel&&(o.destroyTexture(this._gl,this._texKernel),this._texKernel=this._gl=null),super.release()}},Be.Normalize=class extends Ge{constructor(e={}){super(),this._getOptions=this._saveOptions(e,{min:void 0,max:void 0})}run(e,t,i){const{min:n,max:o}=this._getOptions();if(i._colorFormat==p.b.RGB)return t.programs.enhancements.normalizeColoredImage(e,n,o);if(i._colorFormat==p.b.Greyscale)return t.programs.enhancements.normalizeGreyscaleImage(e,n,o);throw new r.i("Invalid color format")}},Be.Nightvision=class extends Ge{constructor(e={}){super(),this._getOptions=this._saveOptions(e,{gain:void 0,offset:void 0})}run(e,t,i){const{gain:n,offset:o}=this._getOptions();if(i._colorFormat==p.b.RGB)return t.programs.enhancements.nightvision(e,n,o,!1);if(i._colorFormat==p.b.Greyscale)return t.programs.enhancements.nightvision(e,n,o,!0);throw new r.i("Invalid color format")}};class Xe{constructor(){this._operations=[]}get length(){return this._operations.length}release(){return new Promise((e,t)=>{for(let e=this._operations.length-1;e>=0;e--)this._operations[e].release();this._operations.length=0,e(this)})}_spawn(e){return this._operations.push(e),this}_run(e){return new Promise((t,i)=>{if(e._type==p.c.Texture){let i=e._gpu.upload(e._source);for(let t=0;t<this._operations.length;t++)i=this._operations[t].run(i,e._gpu,e);e._gpu.programs.utils.output(i),e._source=e._gpu.canvas,t(e)}else i(new r.g("Can't run a pipeline on a media that is not a texture"))})}concat(e){if(e instanceof Xe)return this._operations=this._operations.concat(e._operations),this;throw new r.f(`Invalid argument "${e}" given to SpeedyPipeline.concatenate()`)}convertTo(e=null){if("greyscale"==e||"grayscale"==e)return this._spawn(new Be.ConvertToGreyscale);throw new r.f(`Can't convert to unknown color space: "${e}"`)}blur(e={}){return this._spawn(new Be.Blur(e))}convolve(e,t=1){return this._spawn(new Be.Convolve(e,t))}normalize(e={}){return this._spawn(new Be.Normalize(e))}nightvision(e={}){return this._spawn(new Be.Nightvision(e))}}let Ke=null;class qe{constructor(){if(this._fps=60,this._frames=0,this._updateInterval=500,this._lastUpdate=performance.now(),null!==Ke)throw new r.g("Can't have multiple instances of FPSCounter");requestAnimationFrame(this._update.bind(this))}static get instance(){return null===Ke&&(Ke=new qe),Ke}get fps(){return this._fps}_update(){const e=performance.now(),t=e-this._lastUpdate;t>=this._updateInterval&&(this._fps=Math.round(this._frames/(.001*t)),this._frames=0,this._lastUpdate=e),this._frames++,requestAnimationFrame(this._update.bind(this))}}class Ue{static load(e,t={}){return Ne.load(e,t)}static camera(e=426,t=240,i={},n={}){return Ne.loadCameraStream(e,t,i,n)}static pipeline(){return new Xe}static get version(){return"0.4.0-wip"}static get fps(){return{get value(){return qe.instance.fps}}}}const Ye=Ue.load,$e=Ue.camera,He=Ue.pipeline,Ve=Ue.version,We=Ue.fps}]);