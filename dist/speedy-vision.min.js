/*!
 * speedy-vision.js v0.7.0-wip
 * GPU-accelerated Computer Vision for JavaScript
 * https://github.com/alemart/speedy-vision-js
 * 
 * Copyright 2020-2021 Alexandre Martins <alemartf(at)gmail.com> (https://github.com/alemart)
 * @license Apache-2.0
 * 
 * Date: 2021-06-12T03:01:06.973Z
 */
var Speedy=function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t,n){"use strict";n.d(t,"i",(function(){return r})),n.d(t,"h",(function(){return s})),n.d(t,"e",(function(){return o})),n.d(t,"a",(function(){return a})),n.d(t,"f",(function(){return c})),n.d(t,"g",(function(){return l})),n.d(t,"j",(function(){return h})),n.d(t,"d",(function(){return d})),n.d(t,"l",(function(){return u})),n.d(t,"k",(function(){return p})),n.d(t,"c",(function(){return f})),n.d(t,"b",(function(){return m}));class i extends Error{constructor(e,t=null){super([e,t?t.toString():"[speedy-vision.js]"].join("\n-> ")),this._cause=t}get name(){return this.constructor.name}set name(e){}get cause(){return this._cause}}class r extends i{constructor(e="",t=null){super("Unsupported operation. "+e,t)}}class s extends i{constructor(e="",t=null){super("Method not implemented. "+e,t)}}class o extends i{constructor(e="",t=null){super("WebGL error. "+e,t)}}class a extends i{constructor(e="",t=null){super("Can't call abstract method. "+e,t)}}class c extends i{constructor(e="",t=null){super("Illegal argument. "+e,t)}}class l extends i{constructor(e="",t=null){super("Illegal operation. "+e,t)}}class h extends i{constructor(e="",t=null){super("Out of memory. "+e,t)}}class d extends i{constructor(e="",t=null){super("File not found. "+e,t)}}class u extends i{constructor(e="",t=null){super("Timeout error. "+e,t)}}class p extends i{constructor(e="",t=null){super("Parse error. "+e,t)}}class f extends i{constructor(e="",t=null){super("Assertion failed. "+e,t)}}class m extends i{constructor(e="",t=null){super("Access denied. "+e,t)}}},function(e,t,n){"use strict";n.d(t,"a",(function(){return s}));var i=n(0),r=n(2);class s{static warning(e,...t){const n=[e,...t].join(" ");return console.warn("[speedy-vision.js]",n),n}static log(e,...t){return[e,...t].join(" ")}static assert(e,t=""){if(!e)throw new i.c(t)}static enum(...e){return Object.freeze(e.reduce((e,t)=>(e[t]=Symbol(t),e),{}))}static setZeroTimeout(e){const t=s._setZeroTimeoutContext=s._setZeroTimeoutContext||(s._setZeroTimeoutContext={callbacks:new Map,_setup:window.addEventListener("message",e=>{if(e.source===window){const t=s._setZeroTimeoutContext,n=e.data,i=t.callbacks.get(n);void 0!==i&&(e.stopPropagation(),i.call(window),t.callbacks.delete(n))}},!0)}),n="0%"+Math.random();t.callbacks.set(n,e),window.postMessage(n,"*")}static functionArguments(e){const t=e.toString(),n=t.startsWith("function")?"function\\s.*\\(([^)]*)\\)":t.startsWith("(")?"\\(([^)]*)\\).*=>":"([^=]+).*=>",r=new RegExp(n).exec(t);if(null!==r){return r[1].replace(/\/\*.*?\*\//g,"").split(",").map(e=>e.replace(/=.*$/,"").trim()).filter(e=>e)}throw new i.k("Can't detect function arguments of "+t)}static getAllPropertyDescriptors(e){if(e){const t=Object.getPrototypeOf(e);return{...s.getAllPropertyDescriptors(t),...Object.getOwnPropertyDescriptors(e)}}return Object.create(null)}static createCanvas(e,t){const n=document.createElement("canvas");return n.width=e,n.height=t,n}static gaussianNoise(e=0,t=1){const n=2*Math.PI;let i,r=Math.random();do{i=Math.random()}while(i<=Number.EPSILON);return Math.sqrt(-2*Math.log(i))*Math.sin(n*r)*t+e}static gaussianKernel(e,t=0,n=!0){if(0==t&&(t=0|Math.ceil(5*e),t+=1-t%2),(t|=0)<1||t%2==0)throw new i.f(`Invalid kernel size given to gaussianKernel: ${t} x 1`);if(e<=0)throw new i.f("Invalid sigma given to gaussianKernel: "+e);const r=new Array(t),s=t>>1,o=1.4142135623730951*+e,a=.3275911,c=.254829592,l=-.284496736,h=1.421413741,d=-1.453152027,u=1.061405429;let p=0;for(let e=0;e<t;e++){let t=(e-s+.5)/o,n=(e-s-.5)/o,i=1,f=1;t<0&&(i=-1,t=-t),n<0&&(f=-1,n=-n);const m=1/(1+a*t),_=1/(1+a*n),g=((((u*_+d)*_+h)*_+l)*_+c)*_,v=(i*(1-((((u*m+d)*m+h)*m+l)*m+c)*m*Math.exp(-t*t))-f*(1-g*Math.exp(-n*n)))/(2*o);r[e]=v,p+=v}return n?r.map(e=>e/p):r}static kernel2d(e,t=e){const n=e.length;s.assert(e.length==e.length),s.assert(n>=1&&n%2==1);let i=new Array(n*n),r=0;for(let s=0;s<n;s++)for(let o=0;o<n;o++)i[r++]=e[o]*t[s];return i}static cartesian(e,t){return[].concat(...e.map(e=>t.map(t=>[e,t])))}static symmetricRange(e){if((e|=0)<0)throw new i.f("Expected a non-negative integer as input");return[...Array(2*e+1).keys()].map(t=>t-e)}static range(e){if((e|=0)<=0)throw new i.f("Expected a positive integer as input");return[...Array(e).keys()]}static requestCameraStream(e,t,n={}){if(s.log("Accessing the webcam..."),!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia)throw new i.i("Unsupported browser: no mediaDevices.getUserMedia()");return new r.a((r,o)=>{navigator.mediaDevices.getUserMedia({audio:!1,video:{width:{ideal:e},height:{ideal:t},aspectRatio:e/t,facingMode:"environment",frameRate:30},...n}).then(e=>{const t=document.createElement("video");t.onloadedmetadata=()=>{t.play(),s.log("The camera device is turned on!"),r(t)},t.srcObject=e}).catch(e=>{o(new i.b("Please give access to the camera and reload the page",e))})})}}},function(e,t,n){"use strict";(function(e){n.d(t,"a",(function(){return r}));const i="undefined"!=typeof queueMicrotask&&queueMicrotask||void 0!==e&&e.nextTick||(e=>Promise.resolve().then(e));class r{constructor(e){this._state=0,this._value=void 0,this._onFulfillment=null,this._onRejection=null,this._children=0,this[0]=this,this._parent=void 0,this._flags=0,this._fulfill=this._fulfill.bind(this),this._reject=this._reject.bind(this),this._resolve=this._resolve.bind(this),this._broadcastIfAsync=this._broadcastIfAsync.bind(this),e(this._fulfill,this._reject)}then(e,t=null){const n=new r(this._nop);return n._onFulfillment="function"==typeof e&&e,n._onRejection="function"==typeof t&&t,n._parent=this,this[this._children++]=n,this._flags&=-2,this._notify(),n}catch(e){return this.then(null,e)}finally(e){const t=t=>(e(),t);return this.then(t,t)}turbocharge(){let e=this;for(this._flags|=1;void 0!==e._parent;)e=e._parent,e._flags|=1;return e._notify(),this}toString(){switch(this._state){case 0:return"SpeedyPromise { <pending> }";case 1:return`SpeedyPromise { <fulfilled> ${this._value} }`;case 2:return`SpeedyPromise { <rejected> ${this._value} }`;default:return""}}static resolve(e){const t=new r(this._snop);return"object"==typeof e&&null!==e&&"then"in e||"function"==typeof e&&"then"in e?t._resolve(e):(t._value=e,t._state=1),t}static reject(e){const t=new r(this._snop);return t._value=e,t._state=2,t}static all(e){return new r((t,n)=>{const i=[];for(const t of e)i.push(t);const s=i.length;if(0==s)return void t([]);let o=s;const a=new Array(s),c=e=>n=>{a[e]=n,0==--o&&t(a)};for(let e=0;e<s;e++){const t=i[e];t.__proto__===r.prototype||t.__proto__===Promise.prototype?t.then(c(e),n):r.resolve(t).then(c(e),n)}})}static race(e){return new r((t,n)=>{const i=[];for(const t of e)i.push(t);const s=i.length;for(let e=0;e<s;e++){const s=i[e];s.__proto__===r.prototype||s.__proto__===Promise.prototype?s.then(t,n):r.resolve(s).then(t,n)}})}_fulfill(e){this._setState(1,e)}_reject(e){this._setState(2,e)}_setState(e,t){0==this._state&&(this._state=e,this._value=t,this._notify())}_notify(){0!=this._state&&(1&this._flags?this._broadcast():i(this._broadcastIfAsync))}_broadcastIfAsync(){1&this._flags||this._broadcast()}_broadcast(){const e=this._children,t=this._state;if(1===t)for(let t=0;t<e;t++){const e=this[t],n=e._onFulfillment;try{n?n!==e._nop&&(e._resolve(n(this._value)),e._onFulfillment=e._nop):e._fulfill(this._value)}catch(t){e._reject(t)}}else if(2===t)for(let t=0;t<e;t++){const e=this[t],n=e._onRejection;try{n?n!==e._nop&&(e._resolve(n(this._value)),e._onRejection=e._nop):e._reject(this._value)}catch(t){e._reject(t)}}}_resolve(e){if("object"!=typeof e&&"function"!=typeof e||null===e)this._fulfill(e);else{if(e===this)throw new TypeError;if(e.__proto__!==r.prototype&&e.__proto__!==Promise.prototype)try{const t=e.then;if("function"==typeof t){let n=this._resolve,i=this._reject;try{t.call(e,e=>{n(e),n=i=this._nop},e=>{i(e),n=i=this._nop})}catch(e){n!==this._nop&&i!==this._nop&&this._reject(e)}}else this._fulfill(e)}catch(e){this._reject(e)}else e.then(this._resolve,this._reject)}}_nop(){}static _snop(){}}}).call(this,n(21))},function(e,t,n){"use strict";n.d(t,"b",(function(){return y})),n.d(t,"a",(function(){return S}));var i=n(5),r=n(1),s=n(4),o=n(0);const a=[/\/\*(.|\s)*?\*\//g,/\/\/.*$/gm],c=/^\s*@\s*include\s+"(.*?)"/gm,l=/@(\w+)@/g,h=[/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*\=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+\+()\s*\)\s*\{\s*([\s\S]+?)\s*\}/g,/@\s*unroll\s+?for\s*\(\s*(int|)\s*(?<counter>\w+)\s*\=\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*(<=?)\s*(-?\d+|\w+)\s*;\s*\k<counter>\s*\+=\s*(-?\d+)\s*\)\s*\{\s*([\s\S]+?)\s*\}/g],d=Object.freeze({MAX_TEXTURE_LENGTH:i.j,LITTLE_ENDIAN:i.g?1:0,PYRAMID_MAX_LEVELS:i.l,LOG2_PYRAMID_MAX_SCALE:i.h,PIXELCOMPONENT_RED:s.e.RED,PIXELCOMPONENT_GREEN:s.e.GREEN,PIXELCOMPONENT_BLUE:s.e.BLUE,PIXELCOMPONENT_ALPHA:s.e.ALPHA,FIX_BITS:i.a,FIX_RESOLUTION:i.b,MAX_DESCRIPTOR_SIZE:i.i,MIN_KEYPOINT_SIZE:i.k,KPF_NONE:i.e,KPF_ORIENTED:i.f,KPF_DISCARD:i.d});class u{static run(e,t=new Map){const n=[];return function(e,t){const n=f.bind(t),i=h.length;for(let t=0;t<i;t++)e=e.replace(h[t],n);return e}(String(e).replace(a[0],"").replace(a[1],"").replace(c,(e,n)=>u.run(p(n),t)).replace(l,(e,i)=>String(void 0!==d[i]?Number(d[i]):t.has(i)?Number(t.get(i)):(n.push("Undefined constant: "+i),0))),t)+(n.length>0?n.map(e=>`\n#error ${e}\n`).join(""):"")}}function p(e){if(String(e).match(/^[a-zA-Z0-9_\-]+\.glsl$/))return n(22)("./"+e);throw new o.d(`Shader preprocessor: can't read file "${e}"`)}function f(e,t,n,i,s,a,c,l){const h=this;if(i=Number.isFinite(+i)?i:h.get(i),a=Number.isFinite(+a)?a:h.get(a),void 0===i||void 0===a){if(h.size>0)throw new o.k(`Can't unroll loop: unknown limits (start=${i}, end=${a}). Code:\n\n${e}`);return e}i=parseInt(i),a=parseInt(a),c=0==c.length?1:parseInt(c),r.a.assert(i<=a&&c>0);let d=null!==l.match(/\bbreak\s*;/)?"switch(1) { default:\n":"{\n";d+=`${t} ${n};\n`,a+="<="==s?1:0;for(let e=i;e<a;e+=c)d+=`{\n${n} = ${e};\n${l}\n}\n`;return d+="}\n",d}const m=Object.freeze({position:"a_position",texCoord:"a_texCoord"}),_=Object.freeze({position:0,texCoord:1}),g=`#version 300 es\nlayout (location=${_.position}) in vec2 ${m.position};\nlayout (location=${_.texCoord}) in vec2 ${m.texCoord};\nout vec2 texCoord;\n\nvoid main() {\n    gl_Position = vec4(${m.position}, 0.0f, 1.0f);\n    texCoord = ${m.texCoord};\n}\n`,v='#version 300 es\nprecision highp int; // int32\nprecision mediump float; // ~float16\nprecision mediump sampler2D;\n\nout vec4 color;\nin vec2 texCoord;\nuniform vec2 texSize;\n\n@include "global.glsl"\n\n';class x{constructor(e){const t=e.filepath||null,i=t?n(23)("./"+t):e.source||"";if(0==i.length)throw new o.f("Can't import shader: empty code");this._userSource=i,this._vertexSource=u.run(g),this._fragmentSource=u.run(v+this._userSource),this._filepath=t||"<in-memory>",this._arguments=[],this._uniforms=this._autodetectUniforms(this._fragmentSource),this._defines=new Map}static create(e){return new x({source:e})}static import(e){if(!String(e).match(/^[a-zA-Z0-9_\-\/]+\.glsl$/))throw new o.d(`Can't import shader: "${e}"`);return new x({filepath:e})}withArguments(...e){if(this._arguments.length>0)throw new o.g("Redefinition of shader arguments");this._arguments=e.map(e=>String(e));for(const e of this._arguments)if(!this._uniforms.has(e)&&!this._uniforms.has(e+"[0]"))throw new o.f(`Argument "${e}" has not been declared in the shader`);return this}withDefines(e){if(this._defines.size>0)throw new o.g("Redefinition of externally defined constants of a shader");const t=[];for(const n of Object.keys(e)){const i=Number(e[n]);this._defines.set(n,i),t.push(`#define ${n} ${i}\n`)}const n=v+t.join("")+this._userSource;return this._fragmentSource=u.run(n,this._defines),this._uniforms=this._autodetectUniforms(this._fragmentSource),this}get fragmentSource(){return this._fragmentSource}get vertexSource(){return this._vertexSource}get attributes(){return m}get locationOfAttributes(){return _}get arguments(){return this._arguments}get uniforms(){return Array.from(this._uniforms.keys())}uniformType(e){if(!this._uniforms.has(e))throw new o.f(`Unrecognized uniform variable: "${e}"`);return this._uniforms.get(e)}definedConstant(e){if(!this._defines.has(e))throw new o.f(`Unrecognized externally defined constant: "${e}"`);return this._defines.get(e)}_autodetectUniforms(e){const t=e,n=/^\s*uniform\s+(highp\s+|mediump\s+|lowp\s+)?(\w+)\s+([^;]+)/gm,i=new Map;let r;for(;null!==(r=n.exec(t));){const e=r[2],t=r[3].split(",").map(e=>e.trim()).filter(e=>e);for(const n of t)if(n.endsWith("]")){if(!(r=n.match(/(\w+)\s*\[\s*(\d+)\s*\]$/)))throw new o.k(`Unspecified array length for uniform "${n}" in the shader`);const[t,s]=[r[1],Number(r[2])];for(let n=0;n<s;n++)i.set(`${t}[${n}]`,e)}else i.set(n,e)}return i}}function y(e){return x.import(e)}function S(e){return x.create(e)}},function(e,t,n){"use strict";n.d(t,"d",(function(){return r})),n.d(t,"c",(function(){return s})),n.d(t,"b",(function(){return o})),n.d(t,"e",(function(){return a})),n.d(t,"a",(function(){return c}));var i=n(1);const r=i.a.enum("Image","Video","Canvas","Bitmap"),s=Object.freeze({RGBA:0,GREY:1}),o=i.a.enum("RGB","Greyscale","Binary"),a=Object.freeze({RED:1,GREEN:2,BLUE:4,ALPHA:8,ALL:15}),c=Object.freeze({[a.RED]:0,[a.GREEN]:1,[a.BLUE]:2,[a.ALPHA]:3})},function(e,t,n){"use strict";n.d(t,"l",(function(){return i})),n.d(t,"h",(function(){return r})),n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return o})),n.d(t,"j",(function(){return a})),n.d(t,"i",(function(){return c})),n.d(t,"k",(function(){return l})),n.d(t,"c",(function(){return h})),n.d(t,"e",(function(){return d})),n.d(t,"f",(function(){return u})),n.d(t,"d",(function(){return p})),n.d(t,"g",(function(){return f}));const i=8,r=Math.log2(1),s=4,o=1*(1<<s),a=(1<<16-s)-2,c=64,l=8,h=32,d=0,u=1,p=128,f=51966===new Uint16Array(new Uint8Array([254,202]).buffer)[0]},function(e,t,n){"use strict";n.r(t),n.d(t,"conv2D",(function(){return o})),n.d(t,"convX",(function(){return a})),n.d(t,"convY",(function(){return c})),n.d(t,"createKernel2D",(function(){return h})),n.d(t,"createKernel1D",(function(){return d})),n.d(t,"texConv2D",(function(){return u})),n.d(t,"texConvX",(function(){return p})),n.d(t,"texConvY",(function(){return f}));var i=n(3),r=n(1),s=n(0);function o(e,t=1){const n=new Float32Array(e.map(e=>+e*+t)),o=0|Math.sqrt(n.length),a=o>>1;if(o<1||o%2==0)throw new s.f("Can't perform a 2D convolution with an invalid kSize of "+o);if(o*o!=n.length)throw new s.f(`Invalid 2D convolution kernel of ${n.length} elements (expected: square)`);const c=a<=7?"pixelAtShortOffset":"pixelAtLongOffset",l=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 result = vec4(0.0f);\n\n        ${h=(e,t,n)=>`\n        result += ${c}(image, ivec2(${0|n}, ${0|t})) * float(${+e});\n    `,r.a.cartesian(r.a.symmetricRange(a),r.a.symmetricRange(a)).map(e=>h(n[(e[0]+a)*o+(e[1]+a)],e[0],e[1])).join("\n")}\n\n        color = vec4(result.rgb, alpha);\n    }\n    `;var h;return Object(i.a)(l).withArguments("image")}function a(e,t=1){return l("x",e,t)}function c(e,t=1){return l("y",e,t)}function l(e,t,n=1){const o=new Float32Array(t.map(e=>+e*+n)),a=o.length,c=a>>1;if(a<1||a%2==0)throw new s.f("Can't perform a 1D convolution with an invalid kSize of "+a);if("x"!=e&&"y"!=e)throw new s.f(`Can't perform 1D convolution: invalid axis "${e}"`);const l=c<=7?"pixelAtShortOffset":"pixelAtLongOffset",h=`\n    uniform sampler2D image;\n\n    void main()\n    {\n        float alpha = threadPixel(image).a;\n        vec4 pixel = vec4(0.0f);\n\n        ${d=(t,n)=>"x"==e?`\n        pixel += ${l}(image, ivec2(${0|n}, 0)) * float(${+t});\n    `:`\n        pixel += ${l}(image, ivec2(0, ${0|n})) * float(${+t});\n    `,r.a.symmetricRange(c).reduce((e,t)=>e+d(o[t+c],t),"")}\n\n        color = vec4(pixel.rgb, alpha);\n    }\n    `;var d;return Object(i.a)(h).withArguments("image")}function h(e){if((e|=0)<1||e%2==0)throw new s.f("Can't create a 2D texture kernel of size "+e);const t=`\n    uniform float kernel[${e*e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[(${e}) * thread.y + thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(vec3(e1, e2, e3)) / 256.0f);\n    }\n    `;return Object(i.a)(t).withArguments("kernel")}function d(e){if((e|=0)<1||e%2==0)throw new s.f("Can't create a 1D texture kernel of size "+e);const t=`\n    uniform float kernel[${e}];\n\n    void main()\n    {\n        ivec2 thread = threadLocation();\n        float val = kernel[thread.x];\n\n        float e0 = floor(val);\n        float e1 = 256.0f * fract(val);\n        float e2 = 256.0f * fract(e1);\n        float e3 = 256.0f * fract(e2);\n\n        color = vec4(e0, floor(vec3(e1, e2, e3)) / 256.0f);\n    }\n    `;return Object(i.a)(t).withArguments("kernel")}function u(e){const t=e>>1;if(e<1||e%2==0)throw new s.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);const n=t<=7?"pixelAtShortOffset":"pixelAtLongOffset",o=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f);\n        vec4 result = vec4(0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${a=(e,i)=>`\n        kernel = pixelAt(texKernel, ivec2(${e+t}, ${i+t}));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${n}(image, ivec2(${e}, ${i})) * value;\n    `,r.a.cartesian(r.a.symmetricRange(t),r.a.symmetricRange(t)).map(e=>a(e[0],e[1])).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var a;return Object(i.a)(o).withArguments("image","texKernel","scale","offset")}const p=e=>m(e,"x"),f=e=>m(e,"y");function m(e,t){const n=e>>1;if(e<1||e%2==0)throw new s.f("Can't perform a texture-based 2D convolution with an invalid kernel size of "+e);if("x"!=t&&"y"!=t)throw new s.f(`Can't perform a texture-based 1D convolution: invalid axis "${t}"`);const o=n<=7?"pixelAtShortOffset":"pixelAtLongOffset",a=`\n    const vec4 magic = vec4(1.0f, 1.0f, 1.0f / 256.0f, 1.0f / 65536.0f);\n    uniform sampler2D image, texKernel;\n    uniform float scale, offset;\n\n    void main()\n    {\n        vec4 kernel = vec4(0.0f);\n        vec4 result = vec4(0.0f);\n        float alpha = threadPixel(image).a;\n        float value = 0.0f;\n\n        ${c=e=>"x"==t?`\n        kernel = pixelAt(texKernel, ivec2(${e+n}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(${e}, 0)) * value;\n    `:`\n        kernel = pixelAt(texKernel, ivec2(${e+n}, 0));\n        value = dot(kernel, magic) * scale + offset;\n        result += ${o}(image, ivec2(0, ${e})) * value;\n    `,r.a.symmetricRange(n).map(c).join("\n")}\n\n        result = clamp(result, 0.0f, 1.0f);\n        color = vec4(result.rgb, alpha);\n    }\n    `;var c;return Object(i.a)(a).withArguments("image","texKernel","scale","offset")}},function(e,t){e.exports={MatrixType:
//! No imports here
//! MatrixType is exported to a WebWorker
class{static isValid(e){return Object.prototype.hasOwnProperty.call(this._classOf,e)}static createTypedArray(e,...t){if(!this.isValid(e))throw new Error(`Invalid matrix type: "${e}"`);return Reflect.construct(this._classOf[e],t)}static get default(){return"float32"}static get _classOf(){return this._dataType||(this._dataType=Object.freeze({float32:Float32Array,float64:Float64Array,int32:Int32Array,uint8:Uint8Array}))}static freeze(){const e=(this._classOf,this);return Object.freeze(e)}}.freeze()}},function(e,t,n){const{MatrixType:i}=n(7),r={...n(68),...n(69),...n(70),...n(71),...n(72),...n(73),...n(74),...n(75),...n(76),...n(77)},s=function(){"use strict";function e(){}e.lib=Object.create(null);const t=Object.create(null);return e.register=function(n,i){if("function"!=typeof i)throw new Error("Not a function: "+n);if("string"!=typeof n||!n.match(/^[a-z_][0-9a-z_]*$/i))throw new Error("Undesirable identifier: "+n);if(e.hasMethod(n))throw new Error("Can't redefine method "+n);const r={enumerable:!0,writable:!1,configurable:!1};Object.defineProperty(e.lib,n,{value:i.bind(e.lib),...r}),Object.defineProperty(t,n,{value:i.toString(),...r})},e.hasMethod=function(t){return Object.prototype.hasOwnProperty.call(e.lib,t)},e.toString=function(){const e=Object.keys(t).map(e=>`LinAlg.lib.${e} = (${t[e]}).bind(LinAlg.lib);`).join("\n");return`(function() {\n'use strict';\nfunction LinAlg() { }\nLinAlg.lib = Object.create(null);\nLinAlg.lib.MatrixType = (${i.toString()}).freeze();\n\n${e}\n\nObject.freeze(LinAlg.lib);\nreturn Object.freeze(LinAlg);\n})()`},Object.defineProperty(e.lib,"MatrixType",{value:i.freeze(),writable:!1,configurable:!1,enumerable:!1}),Object.keys(r).forEach(t=>{e.register(t,r[t])}),Object.freeze(e)}();e.exports={LinAlg:s}},function(e,t){e.exports="#ifndef _COLORS_GLSL\n#define _COLORS_GLSL\n#define PIXELCOMPONENT_RED   @PIXELCOMPONENT_RED@\n#define PIXELCOMPONENT_GREEN @PIXELCOMPONENT_GREEN@\n#define PIXELCOMPONENT_BLUE  @PIXELCOMPONENT_BLUE@\n#define PIXELCOMPONENT_ALPHA @PIXELCOMPONENT_ALPHA@\n#endif"},function(e,t){e.exports="#ifndef _FIXEDPOINT_GLSL\n#define _FIXEDPOINT_GLSL\n#define fixed_t int\n#define fixed2_t ivec2\nconst int FIX_BITS = int(@FIX_BITS@);\nconst float FIX_RESOLUTION = float(@FIX_RESOLUTION@);\n#define itofix(x) fixed_t((x) << FIX_BITS)\n#define fixtoi(f) int((x) >> FIX_BITS)\n#define ftofix(x) fixed_t((x) * FIX_RESOLUTION + 0.5f)\n#define fixtof(f) (float(f) / FIX_RESOLUTION)\n#define ivec2tofix(x) fixed2_t((x) << FIX_BITS)\n#define fixtoivec2(f) ivec2((f) >> FIX_BITS)\n#define vec2tofix(v) fixed2_t((v) * FIX_RESOLUTION + vec2(0.5f))\n#define fixtovec2(f) (vec2(f) / FIX_RESOLUTION)\n#endif"},function(e,t){e.exports="#ifndef _FLOAT16_GLSL\n#define _FLOAT16_GLSL\n#define encodeFloat16(f) (vec2(packf16(f)) / 255.0f)\n#define decodeFloat16(v) unpackf16(uvec2((v) * 255.0f))\nuvec2 packf16( float f)\n{\nuint y = packHalf2x16(vec2(f, 0.0f));\nreturn uvec2(y, y >> 8) & 0xFFu;\n}\nfloat unpackf16(uvec2 v)\n{\nv &= 0xFFu;\nreturn unpackHalf2x16(v.x | (v.y << 8)).x;\n}\n#endif"},function(e,t){e.exports="#ifndef _GLOBAL_GLSL\n#define _GLOBAL_GLSL\n#define threadLocation() ivec2(texCoord * texSize)\n#define outputSize() ivec2(texSize)\n#define threadPixel(img) textureLod((img), texCoord, 0.0f)\n#define pixelAt(img, pos) texelFetch((img), (pos), 0)\n#define pixelAtShortOffset(img, offset) textureLodOffset((img), texCoord, 0.0f, (offset))\n#define pixelAtLongOffset(img, offset) textureLod((img), texCoord + vec2(offset) / texSize, 0.0f)\n#endif"},function(e,t){e.exports='#ifndef _KEYPOINTS_GLSL\n#define _KEYPOINTS_GLSL\n@include "pyramids.glsl"\n@include "orientation.glsl"\n@include "fixed-point.glsl"\nstruct Keypoint\n{\nvec2 position;\nfloat orientation;\nfloat lod;\nfloat score;\nint flags;\n};\nstruct KeypointAddress\n{\nint base;\nint offset;\n};\nconst int MAX_DESCRIPTOR_SIZE = int(@MAX_DESCRIPTOR_SIZE@);\nconst int MIN_KEYPOINT_SIZE = int(@MIN_KEYPOINT_SIZE@);\nconst int KPF_NONE = int(@KPF_NONE@);\nconst int KPF_ORIENTED = int(@KPF_ORIENTED@);\nconst int KPF_DISCARD = int(@KPF_DISCARD@);\nvec4 readKeypointData(sampler2D encodedKeypoints, int encoderLength, KeypointAddress address)\n{\nint rasterIndex = address.base + address.offset;\nreturn pixelAt(encodedKeypoints, ivec2(rasterIndex % encoderLength, rasterIndex / encoderLength));\n}\n#define sizeofEncodedKeypoint(descriptorSize, extraSize) (MIN_KEYPOINT_SIZE + (descriptorSize) + (extraSize))\n#define findKeypointIndex(address, descriptorSize, extraSize) ((address).base / ((sizeofEncodedKeypoint((descriptorSize), (extraSize))) / 4))\nKeypointAddress findKeypointAddress(ivec2 thread, int encoderLength, int descriptorSize, int extraSize)\n{\nint threadRaster = thread.y * encoderLength + thread.x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nint keypointIndex = int(threadRaster / pixelsPerKeypoint);\nKeypointAddress address = KeypointAddress(\nkeypointIndex * pixelsPerKeypoint,\nthreadRaster % pixelsPerKeypoint\n);\nreturn address;\n}\nKeypoint decodeKeypoint(sampler2D encodedKeypoints, int encoderLength, KeypointAddress address)\n{\nconst vec4 ones = vec4(1.0f);\nKeypoint keypoint;\nKeypointAddress positionAddress = KeypointAddress(address.base, 0);\nKeypointAddress propertiesAddress = KeypointAddress(address.base, 1);\nvec4 rawEncodedPosition = readKeypointData(encodedKeypoints, encoderLength, positionAddress);\nivec4 encodedPosition = ivec4(rawEncodedPosition * 255.0f);\nkeypoint.position = fixtovec2(fixed2_t(\nencodedPosition.r | (encodedPosition.g << 8),\nencodedPosition.b | (encodedPosition.a << 8)\n));\nvec4 encodedProperties = readKeypointData(encodedKeypoints, encoderLength, propertiesAddress);\nkeypoint.orientation = decodeOrientation(encodedProperties.g);\nkeypoint.lod = decodeLod(encodedProperties.r);\nkeypoint.score = encodedProperties.b;\nkeypoint.flags = int(encodedProperties.a * 255.0f);\nbool isNull = all(greaterThanEqual(rawEncodedPosition, ones));\nkeypoint.score = keypoint.score * float(!isNull) - float(isNull);\nkeypoint.score -= float(keypoint.score == 0.0f) * float(all(equal(keypoint.position, vec2(0.0f))));\nreturn keypoint;\n}\nvec4 encodeKeypointPosition(vec2 position)\n{\nconst vec2 zeros = vec2(0.0f);\nfixed2_t pos = vec2tofix(max(position, zeros));\nfixed2_t lo = pos & 255;\nfixed2_t hi = pos >> 8;\nreturn vec4(lo.x, hi.x, lo.y, hi.y) / 255.0f;\n}\n#define encodeNullKeypoint() (vec4(1.0f))\n#define isBadKeypoint(keypoint) ((keypoint).score < 0.0f)\n#define encodeKeypointPositionAtInfinity() (vec4(254.0f / 255.0f, vec3(1.0f)))\nbool isKeypointAtInfinity(Keypoint keypoint)\n{\nconst vec2 V2_MAX_TEXTURE_LENGTH = vec2(@MAX_TEXTURE_LENGTH@);\nreturn any(greaterThan(keypoint.position, V2_MAX_TEXTURE_LENGTH));\n}\n#define encodeKeypointFlags(flags) (float(flags) / 255.0f)\n#endif'},function(e,t){e.exports="#ifndef _MATH_GLSL\n#define _MATH_GLSL\n#define TWO_PI          6.28318530718f\n#define PI              3.14159265359f\n#define PI_OVER_2       1.57079632679f\n#define PI_OVER_4       0.78539816339f\n#define INV_PI          0.3183098861837907f\n#define USE_FAST_ATAN\n#ifdef USE_FAST_ATAN\nfloat fastAtan(float x)\n{\nfloat w = 1.0f - abs(x);\nreturn (w >= 0.0f) ? ((PI_OVER_4 + 0.273 * w) * x) :\n(sign(x) * PI_OVER_2 - (PI_OVER_4 + 0.273 * (1.0f - abs(1.0f / x))) / x);\n}\n#else\n#define fastAtan(x) atan(x)\n#endif\n#ifdef USE_FAST_ATAN\nfloat fastAtan2(float y, float x)\n{\nreturn (x == 0.0f) ? PI_OVER_2 * sign(y) : fastAtan(y / x) + float(x < 0.0f) * PI * sign(y);\n}\n#else\n#define fastAtan2(y, x) atan((y), (x))\n#endif\n#endif"},function(e,t){e.exports='#ifndef _ORIENTATION_GLSL\n#define _ORIENTATION_GLSL\n@include "math.glsl"\n#define encodeOrientation(angle) ((angle) * INV_PI + 1.0f) * 0.5f\n#define decodeOrientation(value) ((value) * 2.0f - 1.0f) * PI\n#endif'},function(e,t){e.exports="#ifndef _PYRAMIDS_GLSL\n#define _PYRAMIDS_GLSL\n#define pyrPixel(pyr, lod) textureLod((pyr), texCoord, (lod))\n#define pyrPixelAtOffset(pyr, lod, pot, offset) textureLod((pyr), texCoord + ((pot) * vec2(offset)) / texSize, (lod))\n#define pyrPixelAt(pyr, pos, lod) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / texSize, (lod))\n#define pyrPixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), (vec2(pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtEx(pyr, pos, lod, pyrBaseSize) textureLod((pyr), ((pos) + vec2(0.5f)) / vec2(pyrBaseSize), (lod))\n#define pyrSubpixelAtExOffset(pyr, pos, lod, pot, offset, pyrBaseSize) textureLod((pyr), (((pos) + vec2(0.5f)) + ((pot) * vec2(offset))) / vec2(pyrBaseSize), (lod))\nconst int PYRAMID_MAX_LEVELS = int(@PYRAMID_MAX_LEVELS@);\nconst float F_PYRAMID_MAX_LEVELS = float(@PYRAMID_MAX_LEVELS@);\nconst float LOG2_PYRAMID_MAX_SCALE = float(@LOG2_PYRAMID_MAX_SCALE@);\nfloat encodeLod(float lod)\n{\nreturn (LOG2_PYRAMID_MAX_SCALE + lod) / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS);\n}\nfloat decodeLod(float encodedLod)\n{\nfloat lod = encodedLod * (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS) - LOG2_PYRAMID_MAX_SCALE;\nreturn lod * float(encodedLod < 1.0f);\n}\n#define isSameEncodedLod(alpha1, alpha2) (abs((alpha1) - (alpha2)) < encodedLodEps)\nconst float encodedLodEps = 0.2f / (LOG2_PYRAMID_MAX_SCALE + F_PYRAMID_MAX_LEVELS);\n#endif"},function(e,t){e.exports="#ifndef _QUICKSELECT_GLSL\n#define _QUICKSELECT_GLSL\n#if defined(QUICKSELECT_UNSIGNED) && !defined(QUICKSELECT_SIGNED)\n#define QS_TYPE uint\n#define QS_TYPE4 uvec4\n#elif !defined(QUICKSELECT_UNSIGNED) && defined(QUICKSELECT_SIGNED)\n#define QS_TYPE int\n#define QS_TYPE4 ivec4\n#else\n#error Must define either QUICKSELECT_SIGNED or QUICKSELECT_UNSIGNED before including quickselect\n#endif\n#if defined(QUICKSELECT_ASCENDING) && !defined(QUICKSELECT_DESCENDING)\n#define QS_ORD(element,pivot) ((element) < (pivot))\n#elif defined(QUICKSELECT_DESCENDING) && !defined(QUICKSELECT_ASCENDING)\n#define QS_ORD(element,pivot) ((element) > (pivot))\n#else\n#error Must define either QUICKSELECT_ASCENDING or QUICKSELECT_DESCENDING before including quickselect\n#endif\n#ifdef QUICKSELECT_ARRAY\n#define QS_ARRAY QUICKSELECT_ARRAY\n#else\n#error Must define QUICKSELECT_ARRAY before including quickselect\n#endif\nint qspart(int l, int r, int p)\n{\n#define QS_SWAP(a,b) t = QS_ARRAY[(a)]; QS_ARRAY[(a)] = QS_ARRAY[(b)]; QS_ARRAY[(b)] = t\nhighp QS_TYPE e, t, mask, pivot = QS_ARRAY[p];\nhighp QS_TYPE4 tmp;\nint q, cond;\nQS_SWAP(p, r);\nq = l;\nfor(int i = l; i < r; i++) {\ne = QS_ARRAY[i];\nt = QS_ARRAY[q];\ncond = int(QS_ORD(e, pivot));\nmask = QS_TYPE(-cond);\ntmp = QS_TYPE4(mask & t, (~mask) & e, mask & e, (~mask) & t);\nQS_ARRAY[i] = tmp.x | tmp.y;\nQS_ARRAY[q] = tmp.z | tmp.w;\nq += cond;\n}\nQS_SWAP(q, r);\nreturn q;\n}\nhighp QS_TYPE quickselect(int l, int r, int k)\n{\nint p = -1337;\nivec2 idx = ivec2(l, r);\nwhile(idx.s < idx.t && p != k) {\np = qspart(idx.s, idx.t, (idx.s + idx.t) / 2);\nidx = int(k < p) * ivec2(idx.s, p-1) + int(k >= p) * ivec2(p+1, idx.t);\n}\nreturn (p == k) ? QS_ARRAY[k] : QS_ARRAY[idx.s];\n}\n#endif"},function(e,t){e.exports="#ifndef _SOBEL_GLSL\n#define _SOBEL_GLSL\nvec4 encodeSobel(vec2 df)\n{\n#ifdef SOBEL_USE_LOG\nconst vec2 zero = vec2(0.0f);\nvec2 dmax = -max(df, zero);\nvec2 dmin = min(df, zero);\nreturn exp2(vec4(dmax, dmin));\n#else\nuint data = packHalf2x16(df);\nuvec4 bytes = uvec4(data, data >> 8, data >> 16, data >> 24) & 255u;\nreturn vec4(bytes) / 255.0f;\n#endif\n}\nvec2 decodeSobel(vec4 encodedSobel)\n{\n#ifdef SOBEL_USE_LOG\nvec4 lg = log2(encodedSobel);\nreturn vec2(lg.b - lg.r, lg.a - lg.g);\n#else\nuvec4 bytes = uvec4(encodedSobel * 255.0f);\nuint data = bytes.r | (bytes.g << 8) | (bytes.b << 16) | (bytes.a << 24);\nreturn unpackHalf2x16(data);\n#endif\n}\n#endif"},function(e,t){e.exports="#ifndef _SUBPIXEL_GLSL\n#define _SUBPIXEL_GLSL\n#define subpixelAtHW(image, pos) textureLod((image), ((pos) + vec2(0.5f)) / texSize, 0.0f)\nvec4 subpixelAtBI(sampler2D image, vec2 pos)\n{\nvec2 frc = fract(pos);\nvec2 ifrc = vec2(1.0f) - frc;\nvec2 p = (floor(pos) + vec2(0.5f)) / vec2(textureSize(image, 0));\nvec4 pix00 = textureLod(image, p, 0.0f);\nvec4 pix10 = textureLodOffset(image, p, 0.0f, ivec2(1,0));\nvec4 pix01 = textureLodOffset(image, p, 0.0f, ivec2(0,1));\nvec4 pix11 = textureLodOffset(image, p, 0.0f, ivec2(1,1));\nmat4 pix = mat4(pix00, pix10, pix01, pix11);\nvec4 mul = vec4(ifrc.x * ifrc.y, frc.x * ifrc.y, ifrc.x * frc.y, frc.x * frc.y);\nreturn pix * mul;\n}\n#endif"},function(e,t,n){e.exports=n(78).Speedy},function(e,t){var n,i,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(e){i=o}}();var c,l=[],h=!1,d=-1;function u(){h&&c&&(h=!1,c.length?l=c.concat(l):d=-1,l.length&&p())}function p(){if(!h){var e=a(u);h=!0;for(var t=l.length;t;){for(c=l,l=[];++d<t;)c&&c[d].run();d=-1,t=l.length}c=null,h=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new f(e,t)),1!==l.length||h||a(p)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){var i={"./colors.glsl":9,"./fixed-point.glsl":10,"./float16.glsl":11,"./global.glsl":12,"./keypoints.glsl":13,"./math.glsl":14,"./orientation.glsl":15,"./pyramids.glsl":16,"./quickselect.glsl":17,"./sobel.glsl":18,"./subpixel.glsl":19};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=22},function(e,t,n){var i={"./colors/rgb2grey.glsl":24,"./encoders/encode-keypoint-long-offsets.glsl":25,"./encoders/encode-keypoint-offsets.glsl":26,"./encoders/encode-keypoints.glsl":27,"./encoders/resize-encoded-keypoints.glsl":28,"./encoders/upload-keypoints.glsl":29,"./enhancements/nightvision.glsl":30,"./enhancements/normalize-image.glsl":31,"./filters/convolution":6,"./filters/convolution.js":6,"./filters/convolution1d.glsl":32,"./filters/convolution2d.glsl":33,"./filters/fast-median.glsl":34,"./include/colors.glsl":9,"./include/fixed-point.glsl":10,"./include/float16.glsl":11,"./include/global.glsl":12,"./include/keypoints.glsl":13,"./include/math.glsl":14,"./include/orientation.glsl":15,"./include/pyramids.glsl":16,"./include/quickselect.glsl":17,"./include/sobel.glsl":18,"./include/subpixel.glsl":19,"./keypoints/brisk.glsl":35,"./keypoints/fast/encode-fast-score.glsl":36,"./keypoints/fast/fast-score12.glsl":37,"./keypoints/fast/fast-score16.glsl":38,"./keypoints/fast/fast-score8.glsl":39,"./keypoints/fast/fast5.glsl":40,"./keypoints/fast/fast7.glsl":41,"./keypoints/fast/fast9.glsl":42,"./keypoints/fast/multiscale-fast.glsl":43,"./keypoints/harris/encode-harris-score.glsl":44,"./keypoints/harris/harris-cutoff.glsl":45,"./keypoints/harris/max-harris-score.glsl":46,"./keypoints/harris/multiscale-harris.glsl":47,"./keypoints/harris/multiscale-sobel.glsl":48,"./keypoints/nonmax-suppression.glsl":49,"./keypoints/orb/orb-descriptor.glsl":50,"./keypoints/orb/orb-orientation.glsl":51,"./keypoints/sort-by-score.glsl":52,"./keypoints/suppress-descriptors.glsl":53,"./keypoints/transfer-orientation.glsl":54,"./pyramids/downsample2.glsl":55,"./pyramids/upsample2.glsl":56,"./trackers/lk-discard.glsl":57,"./trackers/lk.glsl":58,"./trackers/transfer-flow.glsl":59,"./transforms/resize.glsl":60,"./transforms/warp-perspective.glsl":61,"./utils/copy-components.glsl":62,"./utils/fill-components.glsl":63,"./utils/fill.glsl":64,"./utils/flip-y.glsl":65,"./utils/identity.glsl":66,"./utils/scan-minmax2d.glsl":67};function r(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}r.keys=function(){return Object.keys(i)},r.resolve=s,e.exports=r,r.id=23},function(e,t){e.exports="const vec4 grey = vec4(0.299f, 0.587f, 0.114f, 0.0f);\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat g = dot(pixel, grey);\ncolor = vec4(g, g, g, 1.0f);\n}"},function(e,t){e.exports="uniform sampler2D offsetsImage;\nuniform ivec2 imageSize;\n#ifndef MAX_ITERATIONS\n#error Must define MAX_ITERATIONS\n#endif\n#define decodeSkipOffset(pixel) int((pixel).b * 255.0f) | (int((pixel).a * 255.0f) << 8)\n#define encodeSkipOffset(offset) vec2((offset) & 255, (offset) >> 8) / 255.0f\nvoid main()\n{\nvec4 pixel = threadPixel(offsetsImage);\nivec2 thread = threadLocation();\nvec2 prefix = pixel.rg;\nint rasterIndex = thread.y * imageSize.x + thread.x;\nint offset = decodeSkipOffset(pixel);\nint totalOffset = offset;\nivec2 pos = thread;\n#if 0\nwhile(offset < MAX_ITERATIONS && pos.y < imageSize.y && pixel.r == 0.0f) {\nrasterIndex += offset;\npos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = pixelAt(offsetsImage, pos);\noffset = decodeSkipOffset(pixel);\ntotalOffset += offset;\n}\n#else\nint allow = 1;\nfor(int i = 0; i < MAX_ITERATIONS; i++) {\nallow *= int(pos.y < imageSize.y) * int(pixel.r == 0.0f);\nrasterIndex += allow * offset;\npos = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = pixelAt(offsetsImage, pos);\noffset = decodeSkipOffset(pixel);\ntotalOffset += allow * offset;\n}\n#endif\ntotalOffset = min(totalOffset, 65535);\ncolor = vec4(prefix, encodeSkipOffset(totalOffset));\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform ivec2 imageSize;\n#if !defined(MAX_ITERATIONS)\n#error Must define MAX_ITERATIONS\n#elif MAX_ITERATIONS > 255\n#error MAX_ITERATIONS must be less than 256\n#endif\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 pos = threadLocation();\nvec2 prefix = pixel.ra;\nint offset = 0;\n#if 0\nwhile(offset < MAX_ITERATIONS && pos.y < imageSize.y && pixelAt(image, pos).r == 0.0f) {\n++offset;\npos.x = (pos.x + 1) % imageSize.x;\npos.y += int(pos.x == 0);\n}\n#else\nint allow = 1;\nfor(int i = 0; i < MAX_ITERATIONS; i++) {\nallow *= int(pos.y < imageSize.y) * int(pixel.r == 0.0f);\noffset += allow;\npos.x = (pos.x + 1) % imageSize.x;\npos.y += int(pos.x == 0);\npixel = pixelAt(image, pos);\n}\n#endif\ncolor = vec4(prefix, float(offset) / 255.0f, 0.0f);\n}"},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D offsetsImage;\nuniform sampler2D encodedKeypoints;\nuniform ivec2 imageSize;\nuniform int passId;\nuniform int numPasses;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#define decodeSkipOffset(pixel) int((pixel).b * 255.0f) | (int((pixel).a * 255.0f) << 8)\nbool findQthKeypoint(int q, int p, inout ivec2 position, out vec4 pixel)\n{\nint notFirstPass = int(passId > 0);\nposition *= notFirstPass;\np |= -(1 - notFirstPass);\np -= notFirstPass;\nint rasterIndex = position.y * imageSize.x + position.x;\nwhile(position.y < imageSize.y && p != q) {\nposition = ivec2(rasterIndex % imageSize.x, rasterIndex / imageSize.x);\npixel = texelFetch(offsetsImage, position, 0);\np += int(pixel.r > 0.0f);\nrasterIndex += max(1, decodeSkipOffset(pixel));\n}\nreturn (p == q);\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = vec4(0.0f);\nif(address.offset > 1)\nreturn;\ncolor = threadPixel(encodedKeypoints);\nint numPixels = encoderLength * encoderLength;\nint maxKeypoints = numPixels / pixelsPerKeypoint;\nint maxKeypointsPerPass = maxKeypoints / numPasses + int(maxKeypoints % numPasses != 0);\nint targetPassId = q / maxKeypointsPerPass;\nif(passId != targetPassId)\nreturn;\n#if 1\nint lastIndexFromPrevPass = passId * maxKeypointsPerPass - 1;\nKeypointAddress lastAddressFromPrevPass = KeypointAddress(max(0, lastIndexFromPrevPass) * pixelsPerKeypoint, 0);\nKeypoint lastKeypointFromPrevPass = decodeKeypoint(encodedKeypoints, encoderLength, lastAddressFromPrevPass);\nivec2 position = ivec2(lastKeypointFromPrevPass.position);\n#else\nint lastIndexFromPrevPass = -1; ivec2 position = ivec2(0);\n#endif\nvec4 pixel;\ncolor = encodeNullKeypoint();\nif(q >= maxKeypoints || !findQthKeypoint(q, lastIndexFromPrevPass, position, pixel))\nreturn;\ncolor = (address.offset == 1) ? vec4(\npixel.g,\n0.0f,\npixel.r,\nencodeKeypointFlags(KPF_NONE)\n) : encodeKeypointPosition(\nvec2(position)\n);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D inputTexture;\nuniform int inputDescriptorSize;\nuniform int inputExtraSize;\nuniform int inputEncoderLength;\nuniform int outputDescriptorSize;\nuniform int outputExtraSize;\nuniform int outputEncoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(inputTexture);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(\nthread,\noutputEncoderLength,\noutputDescriptorSize,\noutputExtraSize\n);\nint myIndex = findKeypointIndex(\nmyAddress,\noutputDescriptorSize,\noutputExtraSize\n);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(inputDescriptorSize, inputExtraSize) / 4;\nKeypointAddress otherAddress = KeypointAddress(\nmyIndex * pixelsPerKeypoint,\nmyAddress.offset\n);\nint head = MIN_KEYPOINT_SIZE / 4;\ncolor = (myAddress.offset >= head) ? vec4(0.0f) :\nreadKeypointData(inputTexture, inputEncoderLength, otherAddress);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform int keypointCount;\nuniform int encoderLength;\nuniform int descriptorSize;\nuniform int extraSize;\n#ifndef KEYPOINT_BUFFER_LENGTH\n#error Must specify KEYPOINT_BUFFER_LENGTH\n#endif\nlayout(std140) uniform KeypointBuffer\n{\nvec4 keypointBuffer[KEYPOINT_BUFFER_LENGTH];\n};\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint q = findKeypointIndex(address, descriptorSize, extraSize);\ncolor = vec4(1.0f);\nif(q >= keypointCount)\nreturn;\nvec4 data = keypointBuffer[q];\nswitch(address.offset) {\ncase 0: {\nfixed2_t pos = vec2tofix(data.xy);\nfixed2_t lo = pos & 255;\nfixed2_t hi = pos >> 8;\ncolor = vec4(float(lo.x), float(hi.x), float(lo.y), float(hi.y)) / 255.0f;\nbreak;\n}\ncase 1: {\nfloat score = data.w;\nfloat scale = encodeLod(data.z);\nfloat rotation = encodeOrientation(0.0f);\ncolor = vec4(scale, rotation, score, 0.0f);\nbreak;\n}\ndefault: {\ncolor = vec4(0.0f);\nbreak;\n}\n}\n}'},function(e,t){e.exports="uniform sampler2D image;\nuniform sampler2D illuminationMap;\nuniform float gain;\nuniform float offset;\nuniform float decay;\nconst mat3 rgb2yuv = mat3(\n0.299f, -0.14713f, 0.615f,\n0.587f, -0.28886f, -0.51499f,\n0.114f, 0.436f, -0.10001f\n);\nconst mat3 yuv2rgb = mat3(\n1.0f, 1.0f, 1.0f,\n0.0f, -0.39465f, 2.03211f,\n1.13983f, -0.58060f, 0.0f\n);\nconst float eps = 0.0001f;\nconst float sqrt2 = 1.4142135623730951f;\nconst float magic = 20.0f;\nconst vec2 center = vec2(0.5f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nvec4 imapPixel = threadPixel(illuminationMap);\nfloat lambda = -sqrt2 * log(max(1.0f - decay, eps));\nfloat dist = length(texCoord - center);\nfloat vgain = gain * exp(-lambda * dist);\nfloat normalizedGain = 2.0f * vgain;\nfloat normalizedOffset = 2.0f * offset - 1.0f;\n#ifdef GREYSCALE\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (pixel.g - imapPixel.g)));\nluma = clamp(luma + normalizedOffset, 0.0f, 1.0f);\ncolor = vec4(luma, luma, luma, 1.0f);\n#else\nvec3 yuvPixel = rgb2yuv * pixel.rgb;\nvec3 yuvImapPixel = rgb2yuv * imapPixel.rgb;\nfloat luma = 1.0 / (1.0 + exp(-normalizedGain * magic * (yuvPixel.r - yuvImapPixel.r)));\nluma += normalizedOffset;\nvec3 rgbCorrectedPixel = yuv2rgb * vec3(luma, yuvPixel.gb);\nrgbCorrectedPixel = clamp(rgbCorrectedPixel, 0.0f, 1.0f);\ncolor = vec4(rgbCorrectedPixel, 1.0f);\n#endif\n}"},function(e,t){e.exports="#ifdef GREYSCALE\nuniform sampler2D minmax2d;\n#else\nuniform sampler2D minmax2dRGB[3];\n#endif\nuniform float minValue;\nuniform float maxValue;\nconst float eps = 1.0f / 255.0f;\nvoid main()\n{\nvec2 minmax = clamp(vec2(minValue, maxValue), 0.0f, 255.0f) / 255.0f;\nvec4 newMin = vec4(minmax.x);\nvec4 newRange = vec4(minmax.y - minmax.x);\nvec4 alpha = vec4(1.0f, newMin.x, newRange.x, 1.0f);\n#ifdef GREYSCALE\nvec4 pixel = threadPixel(minmax2d);\nmat4 channel = mat4(pixel, pixel, pixel, alpha);\n#else\nmat4 channel = mat4(\nthreadPixel(minmax2dRGB[0]),\nthreadPixel(minmax2dRGB[1]),\nthreadPixel(minmax2dRGB[2]),\nalpha\n);\n#endif\nvec4 oldMin = vec4(channel[0].g, channel[1].g, channel[2].g, channel[3].g);\nvec4 oldRange = max(vec4(channel[0].b, channel[1].b, channel[2].b, channel[3].b), eps);\nvec4 oldIntensity = vec4(channel[0].a, channel[1].a, channel[2].a, channel[3].a);\nvec4 newIntensity = (oldIntensity - oldMin) * newRange / oldRange + newMin;\ncolor = newIntensity;\n}"},function(e,t){e.exports="#if !defined(KERNEL_SIZE) || !defined(AXIS)\n#define Must define KERNEL_SIZE and AXIS\n#endif\nuniform sampler2D image;\nuniform float kernel[@KERNEL_SIZE@];\n#define S(x,y,k) result += pixelAtShortOffset(image, ivec2((x),(y))) * kernel[k]\nvoid main()\n{\nvec4 result = vec4(0.0f);\n#if AXIS == 0 && KERNEL_SIZE == 3\nS(-1, 0, 2);\nS( 0, 0, 1);\nS( 1, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 3\nS( 0,-1, 2);\nS( 0, 0, 1);\nS( 0, 1, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 5\nS(-2, 0, 4);\nS(-1, 0, 3);\nS( 0, 0, 2);\nS( 1, 0, 1);\nS( 2, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 5\nS(0,-2, 4);\nS(0,-1, 3);\nS(0, 0, 2);\nS(0, 1, 1);\nS(0, 2, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 7\nS(-3, 0, 6);\nS(-2, 0, 5);\nS(-1, 0, 4);\nS( 0, 0, 3);\nS( 1, 0, 2);\nS( 2, 0, 1);\nS( 3, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 7\nS(0,-3, 6);\nS(0,-2, 5);\nS(0,-1, 4);\nS(0, 0, 3);\nS(0, 1, 2);\nS(0, 2, 1);\nS(0, 3, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 9\nS(-4, 0, 8);\nS(-3, 0, 7);\nS(-2, 0, 6);\nS(-1, 0, 5);\nS( 0, 0, 4);\nS( 1, 0, 3);\nS( 2, 0, 2);\nS( 3, 0, 1);\nS( 4, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 9\nS(0,-4, 8);\nS(0,-3, 7);\nS(0,-2, 6);\nS(0,-1, 5);\nS(0, 0, 4);\nS(0, 1, 3);\nS(0, 2, 2);\nS(0, 3, 1);\nS(0, 4, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 11\nS(-5, 0, 10);\nS(-4, 0, 9);\nS(-3, 0, 8);\nS(-2, 0, 7);\nS(-1, 0, 6);\nS( 0, 0, 5);\nS( 1, 0, 4);\nS( 2, 0, 3);\nS( 3, 0, 2);\nS( 4, 0, 1);\nS( 5, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 11\nS(0,-5, 10);\nS(0,-4, 9);\nS(0,-3, 8);\nS(0,-2, 7);\nS(0,-1, 6);\nS(0, 0, 5);\nS(0, 1, 4);\nS(0, 2, 3);\nS(0, 3, 2);\nS(0, 4, 1);\nS(0, 5, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 13\nS(-6, 0, 12);\nS(-5, 0, 11);\nS(-4, 0, 10);\nS(-3, 0, 9);\nS(-2, 0, 8);\nS(-1, 0, 7);\nS( 0, 0, 6);\nS( 1, 0, 5);\nS( 2, 0, 4);\nS( 3, 0, 3);\nS( 4, 0, 2);\nS( 5, 0, 1);\nS( 6, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 13\nS(0,-6, 12);\nS(0,-5, 11);\nS(0,-4, 10);\nS(0,-3, 9);\nS(0,-2, 8);\nS(0,-1, 7);\nS(0, 0, 6);\nS(0, 1, 5);\nS(0, 2, 4);\nS(0, 3, 3);\nS(0, 4, 2);\nS(0, 5, 1);\nS(0, 6, 0);\n#elif AXIS == 0 && KERNEL_SIZE == 15\nS(-7, 0, 14);\nS(-6, 0, 13);\nS(-5, 0, 12);\nS(-4, 0, 11);\nS(-3, 0, 10);\nS(-2, 0, 9);\nS(-1, 0, 8);\nS( 0, 0, 7);\nS( 1, 0, 6);\nS( 2, 0, 5);\nS( 3, 0, 4);\nS( 4, 0, 3);\nS( 5, 0, 2);\nS( 6, 0, 1);\nS( 7, 0, 0);\n#elif AXIS == 1 && KERNEL_SIZE == 15\nS(0,-7, 14);\nS(0,-6, 13);\nS(0,-5, 12);\nS(0,-4, 11);\nS(0,-3, 10);\nS(0,-2, 9);\nS(0,-1, 8);\nS(0, 0, 7);\nS(0, 1, 6);\nS(0, 2, 5);\nS(0, 3, 4);\nS(0, 4, 3);\nS(0, 5, 2);\nS(0, 6, 1);\nS(0, 7, 0);\n#else\n#error Invalid parameters\n#endif\ncolor = vec4(result.rgb, 1.0f);\n}"},function(e,t){e.exports="#ifndef KERNEL_SIZE_SQUARED\n#define Must define KERNEL_SIZE_SQUARED\n#endif\nuniform sampler2D image;\nuniform float kernel[@KERNEL_SIZE_SQUARED@];\n#define S(x,y,k) result += pixelAtShortOffset(image, ivec2((x),(y))) * kernel[k]\nvoid main()\n{\nvec4 result = vec4(0.0f);\n#if KERNEL_SIZE_SQUARED == 9\nS(-1,-1, 8);\nS(-1, 0, 7);\nS(-1, 1, 6);\nS( 0,-1, 5);\nS( 0, 0, 4);\nS( 0, 1, 3);\nS( 1,-1, 2);\nS( 1, 0, 1);\nS( 1, 1, 0);\n#elif KERNEL_SIZE_SQUARED == 25\nS(-2,-2, 24);\nS(-2,-1, 23);\nS(-2, 0, 22);\nS(-2, 1, 21);\nS(-2, 2, 20);\nS(-1,-2, 19);\nS(-1,-1, 18);\nS(-1, 0, 17);\nS(-1, 1, 16);\nS(-1, 2, 15);\nS( 0,-2, 14);\nS( 0,-1, 13);\nS( 0, 0, 12);\nS( 0, 1, 11);\nS( 0, 2, 10);\nS( 1,-2, 9);\nS( 1,-1, 8);\nS( 1, 0, 7);\nS( 1, 1, 6);\nS( 1, 2, 5);\nS( 2,-2, 4);\nS( 2,-1, 3);\nS( 2, 0, 2);\nS( 2, 1, 1);\nS( 2, 2, 0);\n#elif KERNEL_SIZE_SQUARED == 49\nS(-3,-3, 48);\nS(-3,-2, 47);\nS(-3,-1, 46);\nS(-3, 0, 45);\nS(-3, 1, 44);\nS(-3, 2, 43);\nS(-3, 3, 42);\nS(-2,-3, 41);\nS(-2,-2, 40);\nS(-2,-1, 39);\nS(-2, 0, 38);\nS(-2, 1, 37);\nS(-2, 2, 36);\nS(-2, 3, 35);\nS(-1,-3, 34);\nS(-1,-2, 33);\nS(-1,-1, 32);\nS(-1, 0, 31);\nS(-1, 1, 30);\nS(-1, 2, 29);\nS(-1, 3, 28);\nS( 0,-3, 27);\nS( 0,-2, 26);\nS( 0,-1, 25);\nS( 0, 0, 24);\nS( 0, 1, 23);\nS( 0, 2, 22);\nS( 0, 3, 21);\nS( 1,-3, 20);\nS( 1,-2, 19);\nS( 1,-1, 18);\nS( 1, 0, 17);\nS( 1, 1, 16);\nS( 1, 2, 15);\nS( 1, 3, 14);\nS( 2,-3, 13);\nS( 2,-2, 12);\nS( 2,-1, 11);\nS( 2, 0, 10);\nS( 2, 1, 9);\nS( 2, 2, 8);\nS( 2, 3, 7);\nS( 3,-3, 6);\nS( 3,-2, 5);\nS( 3,-1, 4);\nS( 3, 0, 3);\nS( 3, 1, 2);\nS( 3, 2, 1);\nS( 3, 3, 0);\n#else\n#error Invalid KERNEL_SIZE_SQUARED\n#endif\ncolor = vec4(result.rgb, 1.0f);\n}"},function(e,t){e.exports="uniform sampler2D image;\n#define X(i,j) t = vec2(min(p[i], p[j]), max(p[i], p[j])); p[i] = t.x; p[j] = t.y;\n#define S(i,x,y) p[i] = pixelAtShortOffset(image, ivec2((x),(y))).g\nvoid main()\n{\nfloat median;\nvec2 t;\n#if !defined(KERNEL_SIZE)\n#error Must define KERNEL_SIZE\n#elif KERNEL_SIZE == 3\nfloat p[9];\nS(0,-1,-1);\nS(1, 0,-1);\nS(2, 1,-1);\nS(3,-1, 0);\nS(4, 0, 0);\nS(5, 1, 0);\nS(6,-1, 1);\nS(7, 0, 1);\nS(8, 1, 1);\nX(1,2);X(4,5);X(7,8);X(0,1);X(3,4);X(6,7);X(1,2);X(4,5);X(7,8);X(0,3);X(5,8);X(4,7);X(3,6);X(1,4);X(2,5);X(4,7);X(4,2);X(6,4);X(4,2);\nmedian = p[4];\n#elif KERNEL_SIZE == 5\nfloat p[25];\nS( 0,-2,-2);\nS( 1,-1,-2);\nS( 2, 0,-2);\nS( 3, 1,-2);\nS( 4, 2,-2);\nS( 5,-2,-1);\nS( 6,-1,-1);\nS( 7, 0,-1);\nS( 8, 1,-1);\nS( 9, 2,-1);\nS(10,-2, 0);\nS(11,-1, 0);\nS(12, 0, 0);\nS(13, 1, 0);\nS(14, 2, 0);\nS(15,-2, 1);\nS(16,-1, 1);\nS(17, 0, 1);\nS(18, 1, 1);\nS(19, 2, 1);\nS(20,-2, 2);\nS(21,-1, 2);\nS(22, 0, 2);\nS(23, 1, 2);\nS(24, 2, 2);\nX(0,1);X(3,4);X(2,4);X(2,3);X(6,7);X(5,7);X(5,6);X(9,10);X(8,10);X(8,9);X(12,13);X(11,13);X(11,12);X(15,16);X(14,16);X(14,15);X(18,19);X(17,19);X(17,18);X(21,22);X(20,22);X(20,21);X(23,24);X(2,5);X(3,6);X(0,6);X(0,3);X(4,7);X(1,7);X(1,4);X(11,14);X(8,14);X(8,11);X(12,15);X(9,15);X(9,12);X(13,16);X(10,16);X(10,13);X(20,23);X(17,23);X(17,20);X(21,24);X(18,24);X(18,21);X(19,22);X(8,17);X(9,18);X(0,18);X(0,9);X(10,19);X(1,19);X(1,10);X(11,20);X(2,20);X(2,11);X(12,21);X(3,21);X(3,12);X(13,22);X(4,22);X(4,13);X(14,23);X(5,23);X(5,14);X(15,24);X(6,24);X(6,15);X(7,16);X(7,19);X(13,21);X(15,23);X(7,13);X(7,15);X(1,9);X(3,11);X(5,17);X(11,17);X(9,17);X(4,10);X(6,12);X(7,14);X(4,6);X(4,7);X(12,14);X(10,14);X(6,7);X(10,12);X(6,10);X(6,17);X(12,17);X(7,17);X(7,10);X(12,18);X(7,12);X(10,18);X(12,20);X(10,20);X(10,12);\nmedian = p[12];\n#elif KERNEL_SIZE == 7\nfloat p[49];\nS( 0,-3,-3);\nS( 1,-2,-3);\nS( 2,-1,-3);\nS( 3, 0,-3);\nS( 4, 1,-3);\nS( 5, 2,-3);\nS( 6, 3,-3);\nS( 7,-3,-2);\nS( 8,-2,-2);\nS( 9,-1,-2);\nS(10, 0,-2);\nS(11, 1,-2);\nS(12, 2,-2);\nS(13, 3,-2);\nS(14,-3,-1);\nS(15,-2,-1);\nS(16,-1,-1);\nS(17, 0,-1);\nS(18, 1,-1);\nS(19, 2,-1);\nS(20, 3,-1);\nS(21,-3, 0);\nS(22,-2, 0);\nS(23,-1, 0);\nS(24, 0, 0);\nS(25, 1, 0);\nS(26, 2, 0);\nS(27, 3, 0);\nS(28,-3, 1);\nS(29,-2, 1);\nS(30,-1, 1);\nS(31, 0, 1);\nS(32, 1, 1);\nS(33, 2, 1);\nS(34, 3, 1);\nS(35,-3, 2);\nS(36,-2, 2);\nS(37,-1, 2);\nS(38, 0, 2);\nS(39, 1, 2);\nS(40, 2, 2);\nS(41, 3, 2);\nS(42,-3, 3);\nS(43,-2, 3);\nS(44,-1, 3);\nS(45, 0, 3);\nS(46, 1, 3);\nS(47, 2, 3);\nS(48, 3, 3);\nX(0,1);X(2,3);X(0,2);X(1,3);X(1,2);X(4,5);X(6,7);X(4,6);X(5,7);X(5,6);X(0,4);X(2,6);X(2,4);X(1,5);X(3,7);X(3,5);X(1,2);X(3,4);X(5,6);X(8,9);X(10,11);X(8,10);X(9,11);X(9,10);X(12,13);X(14,15);X(12,14);X(13,15);X(13,14);X(8,12);X(10,14);X(10,12);X(9,13);X(11,15);X(11,13);X(9,10);X(11,12);X(13,14);X(0,8);X(4,12);X(4,8);X(2,10);X(6,14);X(6,10);X(2,4);X(6,8);X(10,12);X(1,9);X(5,13);X(5,9);X(3,11);X(7,15);X(7,11);X(3,5);X(7,9);X(11,13);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(16,17);X(18,19);X(16,18);X(17,19);X(17,18);X(20,21);X(22,23);X(20,22);X(21,23);X(21,22);X(16,20);X(18,22);X(18,20);X(17,21);X(19,23);X(19,21);X(17,18);X(19,20);X(21,22);X(24,25);X(26,27);X(24,26);X(25,27);X(25,26);X(28,29);X(30,31);X(28,30);X(29,31);X(29,30);X(24,28);X(26,30);X(26,28);X(25,29);X(27,31);X(27,29);X(25,26);X(27,28);X(29,30);X(16,24);X(20,28);X(20,24);X(18,26);X(22,30);X(22,26);X(18,20);X(22,24);X(26,28);X(17,25);X(21,29);X(21,25);X(19,27);X(23,31);X(23,27);X(19,21);X(23,25);X(27,29);X(17,18);X(19,20);X(21,22);X(23,24);X(25,26);X(27,28);X(29,30);X(0,16);X(8,24);X(8,16);X(4,20);X(12,28);X(12,20);X(4,8);X(12,16);X(20,24);X(2,18);X(10,26);X(10,18);X(6,22);X(14,30);X(14,22);X(6,10);X(14,18);X(22,26);X(2,4);X(6,8);X(10,12);X(14,16);X(18,20);X(22,24);X(26,28);X(1,17);X(9,25);X(9,17);X(5,21);X(13,29);X(13,21);X(5,9);X(13,17);X(21,25);X(3,19);X(11,27);X(11,19);X(7,23);X(15,31);X(15,23);X(7,11);X(15,19);X(23,27);X(3,5);X(7,9);X(11,13);X(15,17);X(19,21);X(23,25);X(27,29);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(15,16);X(17,18);X(19,20);X(21,22);X(23,24);X(25,26);X(27,28);X(29,30);X(32,33);X(34,35);X(32,34);X(33,35);X(33,34);X(36,37);X(38,39);X(36,38);X(37,39);X(37,38);X(32,36);X(34,38);X(34,36);X(33,37);X(35,39);X(35,37);X(33,34);X(35,36);X(37,38);X(40,41);X(42,43);X(40,42);X(41,43);X(41,42);X(44,45);X(46,47);X(44,46);X(45,47);X(45,46);X(40,44);X(42,46);X(42,44);X(41,45);X(43,47);X(43,45);X(41,42);X(43,44);X(45,46);X(32,40);X(36,44);X(36,40);X(34,42);X(38,46);X(38,42);X(34,36);X(38,40);X(42,44);X(33,41);X(37,45);X(37,41);X(35,43);X(39,47);X(39,43);X(35,37);X(39,41);X(43,45);X(33,34);X(35,36);X(37,38);X(39,40);X(41,42);X(43,44);X(45,46);X(32,48);X(40,48);X(36,40);X(44,48);X(38,42);X(34,36);X(38,40);X(42,44);X(46,48);X(37,41);X(39,43);X(35,37);X(39,41);X(43,45);X(33,34);X(35,36);X(37,38);X(39,40);X(41,42);X(43,44);X(45,46);X(47,48);X(0,32);X(16,48);X(16,32);X(8,40);X(24,40);X(8,16);X(24,32);X(40,48);X(4,36);X(20,36);X(12,44);X(28,44);X(12,20);X(28,36);X(4,8);X(12,16);X(20,24);X(28,32);X(36,40);X(44,48);X(2,34);X(18,34);X(10,42);X(26,42);X(10,18);X(26,34);X(6,38);X(22,38);X(14,46);X(30,46);X(14,22);X(30,38);X(6,10);X(14,18);X(22,26);X(30,34);X(38,42);X(2,4);X(6,8);X(10,12);X(14,16);X(18,20);X(22,24);X(26,28);X(30,32);X(34,36);X(38,40);X(42,44);X(46,48);X(1,33);X(17,33);X(9,41);X(25,41);X(9,17);X(25,33);X(5,37);X(21,37);X(13,45);X(29,45);X(13,21);X(29,37);X(5,9);X(13,17);X(21,25);X(29,33);X(37,41);X(3,35);X(19,35);X(11,43);X(27,43);X(11,19);X(27,35);X(7,39);X(23,39);X(15,47);X(31,47);X(15,23);X(31,39);X(7,11);X(15,19);X(23,27);X(31,35);X(39,43);X(3,5);X(7,9);X(11,13);X(15,17);X(19,21);X(23,25);X(27,29);X(31,33);X(35,37);X(39,41);X(43,45);X(1,2);X(3,4);X(5,6);X(7,8);X(9,10);X(11,12);X(13,14);X(15,16);X(17,18);X(19,20);X(21,22);X(23,24);\nmedian = p[24];\n#else\n#error Unsupported kernel size\n#endif\ncolor = vec4(median, median, median, 1.0f);\n}"},function(e,t){e.exports="uniform sampler2D image, layerA, layerB;\nuniform float scaleA, scaleB, lgM, h;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat score = pixel.r;\nivec2 zero = ivec2(0, 0);\nivec2 sizeA = textureSize(layerA, 0);\nivec2 sizeB = textureSize(layerB, 0);\nvec2 mid = (texCoord * texSize) + vec2(0.5f, 0.5f);\nivec2 pa = clamp(ivec2(ceil(mid * scaleA - 1.0f)), zero, sizeA - 2);\nivec2 pb = clamp(ivec2(ceil(mid * scaleB - 1.0f)), zero, sizeB - 2);\nvec4 a00 = pixelAt(layerA, pa);\nvec4 a10 = pixelAt(layerA, pa + ivec2(1, 0));\nvec4 a01 = pixelAt(layerA, pa + ivec2(0, 1));\nvec4 a11 = pixelAt(layerA, pa + ivec2(1, 1));\nvec4 b00 = pixelAt(layerB, pb);\nvec4 b10 = pixelAt(layerB, pb + ivec2(1, 0));\nvec4 b01 = pixelAt(layerB, pb + ivec2(0, 1));\nvec4 b11 = pixelAt(layerB, pb + ivec2(1, 1));\nfloat maxScore = max(\nmax(max(a00.r, a10.r), max(a01.r, a11.r)),\nmax(max(b00.r, b10.r), max(b01.r, b11.r))\n);\ncolor = vec4(0.0f, pixel.gba);\nif(score < maxScore || score == 0.0f)\nreturn;\nvec2 ea = fract(mid * scaleA);\nvec2 eb = fract(mid * scaleB);\nfloat isa = a00.b * (1.0f - ea.x) * (1.0f - ea.y) +\na10.b * ea.x * (1.0f - ea.y) +\na01.b * (1.0f - ea.x) * ea.y +\na11.b * ea.x * ea.y;\nfloat isb = b00.b * (1.0f - eb.x) * (1.0f - eb.y) +\nb10.b * eb.x * (1.0f - eb.y) +\nb01.b * (1.0f - eb.x) * eb.y +\nb11.b * eb.x * eb.y;\ncolor = (isa > score && isa > isb) ? vec4(isa, pixel.gb, a00.a) : pixel;\ncolor = (isb > score && isb > isa) ? vec4(isb, pixel.gb, b00.a) : pixel;\nfloat y1 = isa, y2 = isb, y3 = score;\nfloat x1 = lgM - (lgM + h) * a00.a;\nfloat x2 = lgM - (lgM + h) * b00.a;\nfloat x3 = lgM - (lgM + h) * pixel.a;\nfloat dn = (x1 - x2) * (x1 - x3) * (x2 - x3);\nif(abs(dn) < 0.00001f)\nreturn;\nfloat a = (x3 * (y2 - y1) + x2 * (y1 - y3) + x1 * (y3 - y2)) / dn;\nif(a >= 0.0f)\nreturn;\nfloat b = (x3 * x3 * (y1 - y2) + x2 * x2 * (y3 - y1) + x1 * x1 * (y2 - y3)) / dn;\nfloat c = (x2 * x3 * (x2 - x3) * y1 + x3 * x1 * (x3 - x1) * y2 + x1 * x2 * (x1 - x2) * y3) / dn;\nfloat xv = -b / (2.0f * a);\nfloat yv = c - (b * b) / (4.0f * a);\nif(xv < min(x1, min(x2, x3)) || xv > max(x1, max(x2, x3)))\nreturn;\nfloat interpolatedScale = (lgM - xv) / (lgM + h);\nfloat interpolatedScore = clamp(yv, 0.0f, 1.0f);\ncolor = vec4(interpolatedScore, pixel.gb, interpolatedScale);\n}"},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat score = decodeFloat16(pixel.rb);\nconst float mul = 6.0f;\nfloat score8 = clamp(score * mul, 0.0f, 1.0f);\ncolor = vec4(score8, pixel.g, 0.0f, pixel.a);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nscores += vec2(max(c_t - p8, 0.0f), max(p8 - ct, 0.0f));\nscores += vec2(max(c_t - p9, 0.0f), max(p9 - ct, 0.0f));\nscores += vec2(max(c_t - p10, 0.0f), max(p10 - ct, 0.0f));\nscores += vec2(max(c_t - p11, 0.0f), max(p11 - ct, 0.0f));\nscores /= 12.0f;\nfloat score = max(scores.x, scores.y) * step(1.0f, pixel.r);\ncolor = pixel;\ncolor.rb = encodeFloat16(score);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D image;\nuniform float threshold;\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nmat4 mp = mat4(\npixelAtShortOffset(image, ivec2(0, 3)).g,\npixelAtShortOffset(image, ivec2(1, 3)).g,\npixelAtShortOffset(image, ivec2(2, 2)).g,\npixelAtShortOffset(image, ivec2(3, 1)).g,\npixelAtShortOffset(image, ivec2(3, 0)).g,\npixelAtShortOffset(image, ivec2(3, -1)).g,\npixelAtShortOffset(image, ivec2(2, -2)).g,\npixelAtShortOffset(image, ivec2(1, -3)).g,\npixelAtShortOffset(image, ivec2(0, -3)).g,\npixelAtShortOffset(image, ivec2(-1, -3)).g,\npixelAtShortOffset(image, ivec2(-2, -2)).g,\npixelAtShortOffset(image, ivec2(-3, -1)).g,\npixelAtShortOffset(image, ivec2(-3, 0)).g,\npixelAtShortOffset(image, ivec2(-3, 1)).g,\npixelAtShortOffset(image, ivec2(-2, 2)).g,\npixelAtShortOffset(image, ivec2(-1, 3)).g\n);\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nfloat score = max(dot(bs, ones), dot(ds, ones)) * step(1.0f, pixel.r);\nscore /= 16.0f;\ncolor = pixel;\ncolor.rb = encodeFloat16(score);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nvec2 scores = vec2(0.0f, 0.0f);\nscores += vec2(max(c_t - p0, 0.0f), max(p0 - ct, 0.0f));\nscores += vec2(max(c_t - p1, 0.0f), max(p1 - ct, 0.0f));\nscores += vec2(max(c_t - p2, 0.0f), max(p2 - ct, 0.0f));\nscores += vec2(max(c_t - p3, 0.0f), max(p3 - ct, 0.0f));\nscores += vec2(max(c_t - p4, 0.0f), max(p4 - ct, 0.0f));\nscores += vec2(max(c_t - p5, 0.0f), max(p5 - ct, 0.0f));\nscores += vec2(max(c_t - p6, 0.0f), max(p6 - ct, 0.0f));\nscores += vec2(max(c_t - p7, 0.0f), max(p7 - ct, 0.0f));\nscores /= 8.0f;\nfloat score = max(scores.x, scores.y) * step(1.0f, pixel.r);\ncolor = pixel;\ncolor.rb = encodeFloat16(score);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.g, 0.0f, encodeLod(0.0f));\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 1)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 1)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(1, 0)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(1, -1)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(0, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(-1, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(-1, 0)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, 1)).g;\nbool possibleCorner =\n((c_t > p1 || c_t > p5) && (c_t > p3 || c_t > p7)) ||\n((ct < p1  || ct < p5)  && (ct < p3  || ct < p7))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 5 && dark < 5) {\nif(bc > 0 && bc < 5) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 5) bc += 1; else break;\nif(c_t > p2 && bc < 5) bc += 1; else break;\nif(c_t > p3 && bc < 5) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 5) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 5) dc += 1; else break;\nif(ct < p2 && dc < 5) dc += 1; else break;\nif(ct < p3 && dc < 5) dc += 1; else break;\n} while(false);\nif(bc >= 5 || dc >= 5)\ncolor.r = 1.0f;\n}\nelse {\ncolor.r = 1.0f;\n}\n}\n}\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nuniform float threshold;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nvec4 pixel = threadPixel(image);\ncolor = vec4(0.0f, pixel.g, 0.0f, encodeLod(0.0f));\nif(\nthread.x >= 3 && thread.x < size.x - 3 &&\nthread.y >= 3 && thread.y < size.y - 3\n) {\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat c = pixel.g;\nfloat ct = c + t, c_t = c - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 2)).g;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 2)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 1)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(2, 0)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(2, -1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(1, -2)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(0, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(-1, -2)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(-2, -1)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-2, 0)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, 1)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-1, 2)).g;\nbool possibleCorner =\n((c_t > p0 || c_t > p6) && (c_t > p3 || c_t > p9)) ||\n((ct < p0  || ct < p6)  && (ct < p3  || ct < p9))  ;\nif(possibleCorner) {\nint bright = 0, dark = 0, bc = 0, dc = 0;\nif(c_t > p0) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p0) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p1) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p1) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p2) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p2) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p3) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p3) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p4) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p4) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p5) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p5) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p6) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p6) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p7) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p7) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p8) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p8) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p9) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p9) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p10) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p10) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(c_t > p11) { dc = 0; bc += 1; if(bc > bright) bright = bc; }\nelse { bc = 0; if(ct < p11) { dc += 1; if(dc > dark) dark = dc; } else dc = 0; }\nif(bright < 7 && dark < 7) {\nif(bc > 0 && bc < 7) do {\nif(c_t > p0)           bc += 1; else break;\nif(c_t > p1 && bc < 7) bc += 1; else break;\nif(c_t > p2 && bc < 7) bc += 1; else break;\nif(c_t > p3 && bc < 7) bc += 1; else break;\nif(c_t > p4 && bc < 7) bc += 1; else break;\nif(c_t > p5 && bc < 7) bc += 1; else break;\n} while(false);\nif(dc > 0 && dc < 7) do {\nif(ct < p0)           dc += 1; else break;\nif(ct < p1 && dc < 7) dc += 1; else break;\nif(ct < p2 && dc < 7) dc += 1; else break;\nif(ct < p3 && dc < 7) dc += 1; else break;\nif(ct < p4 && dc < 7) dc += 1; else break;\nif(ct < p5 && dc < 7) dc += 1; else break;\n} while(false);\nif(bc >= 7 || dc >= 7)\ncolor.r = 1.0f;\n}\nelse {\ncolor.r = 1.0f;\n}\n}\n}\n}'},function(e,t){e.exports='@include "pyramids.glsl"\nuniform sampler2D image;\nuniform float threshold;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\ncolor = vec4(0.0f, pixel.g, 0.0f, encodeLod(0.0f));\nif(any(lessThan(ivec4(thread, size - thread), margin)))\nreturn;\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nfloat p0 = pixelAtShortOffset(image, ivec2(0, 3)).g;\nfloat p4 = pixelAtShortOffset(image, ivec2(3, 0)).g;\nfloat p8 = pixelAtShortOffset(image, ivec2(0, -3)).g;\nfloat p12 = pixelAtShortOffset(image, ivec2(-3, 0)).g;\nif(!(\n((c_t > p0 || c_t > p8) && (c_t > p4 || c_t > p12)) ||\n((ct < p0  || ct < p8)  && (ct < p4  || ct < p12))\n))\nreturn;\nfloat p1 = pixelAtShortOffset(image, ivec2(1, 3)).g;\nfloat p2 = pixelAtShortOffset(image, ivec2(2, 2)).g;\nfloat p3 = pixelAtShortOffset(image, ivec2(3, 1)).g;\nfloat p5 = pixelAtShortOffset(image, ivec2(3, -1)).g;\nfloat p6 = pixelAtShortOffset(image, ivec2(2, -2)).g;\nfloat p7 = pixelAtShortOffset(image, ivec2(1, -3)).g;\nfloat p9 = pixelAtShortOffset(image, ivec2(-1, -3)).g;\nfloat p10 = pixelAtShortOffset(image, ivec2(-2, -2)).g;\nfloat p11 = pixelAtShortOffset(image, ivec2(-3, -1)).g;\nfloat p13 = pixelAtShortOffset(image, ivec2(-3, 1)).g;\nfloat p14 = pixelAtShortOffset(image, ivec2(-2, 2)).g;\nfloat p15 = pixelAtShortOffset(image, ivec2(-1, 3)).g;\nbool A=(p0>ct),B=(p1>ct),C=(p2>ct),D=(p3>ct),E=(p4>ct),F=(p5>ct),G=(p6>ct),H=(p7>ct),I=(p8>ct),J=(p9>ct),K=(p10>ct),L=(p11>ct),M=(p12>ct),N=(p13>ct),O=(p14>ct),P=(p15>ct),a=(p0<c_t),b=(p1<c_t),c=(p2<c_t),d=(p3<c_t),e=(p4<c_t),f=(p5<c_t),g=(p6<c_t),h=(p7<c_t),i=(p8<c_t),j=(p9<c_t),k=(p10<c_t),l=(p11<c_t),m=(p12<c_t),n=(p13<c_t),o=(p14<c_t),p=(p15<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\ncolor.r = float(isCorner);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D pyramid;\nuniform float threshold;\nuniform int numberOfLayers;\nuniform float lodStep;\nconst ivec4 margin = ivec4(3, 3, 4, 4);\nconst vec4 zeroes = vec4(0.0f, 0.0f, 0.0f, 0.0f);\nconst vec4 ones = vec4(1.0f, 1.0f, 1.0f, 1.0f);\nvoid main()\n{\nvec4 pixel = threadPixel(pyramid);\nivec2 thread = threadLocation();\nivec2 size = outputSize();\nfloat t = clamp(threshold, 0.0f, 1.0f);\nfloat ct = pixel.g + t, c_t = pixel.g - t;\nvec2 best = vec2(0.0f);\ncolor = vec4(0.0f, pixel.g, 0.0f, pixel.a);\nfloat lod = 0.0f, pot = 1.0f;\nfor(int layer = 0; layer < numberOfLayers; layer++) {\npixel = pyrPixel(pyramid, lod);\nct = pixel.g + t;\nc_t = pixel.g - t;\nvec4 p4k = vec4(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 0)).g\n);\nmat4 mp = mat4(\np4k.x,\np4k.y,\np4k.z,\np4k.w,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, -2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-2, 2)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(3, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -3)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-3, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 3)).g\n);\nbool A=(mp[0][0]>ct),B=(mp[1][0]>ct),C=(mp[2][0]>ct),D=(mp[3][0]>ct),E=(mp[0][1]>ct),F=(mp[1][1]>ct),G=(mp[2][1]>ct),H=(mp[3][1]>ct),I=(mp[0][2]>ct),J=(mp[1][2]>ct),K=(mp[2][2]>ct),L=(mp[3][2]>ct),M=(mp[0][3]>ct),N=(mp[1][3]>ct),O=(mp[2][3]>ct),P=(mp[3][3]>ct),a=(mp[0][0]<c_t),b=(mp[1][0]<c_t),c=(mp[2][0]<c_t),d=(mp[3][0]<c_t),e=(mp[0][1]<c_t),f=(mp[1][1]<c_t),g=(mp[2][1]<c_t),h=(mp[3][1]<c_t),i=(mp[0][2]<c_t),j=(mp[1][2]<c_t),k=(mp[2][2]<c_t),l=(mp[3][2]<c_t),m=(mp[0][3]<c_t),n=(mp[1][3]<c_t),o=(mp[2][3]<c_t),p=(mp[3][3]<c_t);\nbool isCorner=A&&(B&&(K&&L&&J&&(M&&N&&O&&P||G&&H&&I&&(M&&N&&O||F&&(M&&N||E&&(M||D))))||C&&(K&&L&&M&&(N&&O&&P||G&&H&&I&&J&&(N&&O||F&&(N||E)))||D&&(N&&(L&&M&&(K&&G&&H&&I&&J&&(O||F)||O&&P)||k&&l&&m&&e&&f&&g&&h&&i&&j)||E&&(O&&(M&&N&&(K&&L&&G&&H&&I&&J||P)||k&&l&&m&&n&&f&&g&&h&&i&&j)||F&&(P&&(N&&O||k&&l&&m&&n&&o&&g&&h&&i&&j)||G&&(O&&P||H&&(P||I)||k&&l&&m&&n&&o&&p&&h&&i&&j)||k&&l&&m&&n&&o&&h&&i&&j&&(p||g))||k&&l&&m&&n&&h&&i&&j&&(o&&(p||g)||f&&(o&&p||g)))||k&&l&&m&&h&&i&&j&&(n&&(o&&p||g&&(o||f))||e&&(n&&o&&p||g&&(n&&o||f))))||k&&l&&h&&i&&j&&(m&&(n&&o&&p||g&&(n&&o||f&&(n||e)))||d&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e)))))||k&&h&&i&&j&&(l&&(m&&n&&o&&p||g&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d))))))||K&&I&&J&&(L&&M&&N&&O&&P||G&&H&&(L&&M&&N&&O||F&&(L&&M&&N||E&&(L&&M||D&&(L||C)))))||h&&i&&j&&(b&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c)))))||k&&(l&&m&&n&&o&&p||g&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c)))))))||B&&(H&&I&&J&&(K&&L&&M&&N&&O&&P&&a||G&&(K&&L&&M&&N&&O&&a||F&&(K&&L&&M&&N&&a||E&&(K&&L&&M&&a||D&&(K&&L&&a||C)))))||a&&k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||C&&(K&&H&&I&&J&&(L&&M&&N&&O&&P&&a&&b||G&&(L&&M&&N&&O&&a&&b||F&&(L&&M&&N&&a&&b||E&&(L&&M&&a&&b||D))))||a&&b&&k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d)))))||D&&(K&&L&&H&&I&&J&&(M&&N&&O&&P&&a&&b&&c||G&&(M&&N&&O&&a&&b&&c||F&&(M&&N&&a&&b&&c||E)))||a&&b&&k&&l&&m&&c&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e))))||E&&(K&&L&&M&&H&&I&&J&&(N&&O&&P&&a&&b&&c&&d||G&&(N&&O&&a&&b&&c&&d||F))||a&&b&&l&&m&&n&&c&&d&&(k&&g&&h&&i&&j&&(o||f)||o&&p))||F&&(K&&L&&M&&N&&H&&I&&J&&(O&&P&&a&&b&&c&&d&&e||G)||a&&b&&m&&n&&o&&c&&d&&e&&(k&&l&&g&&h&&i&&j||p))||G&&(K&&L&&M&&N&&O&&H&&I&&J||a&&b&&n&&o&&p&&c&&d&&e&&f)||H&&(K&&L&&M&&N&&O&&P&&I&&J||a&&b&&o&&p&&c&&d&&e&&f&&g)||a&&(b&&(k&&l&&j&&(m&&n&&o&&p||g&&h&&i&&(m&&n&&o||f&&(m&&n||e&&(m||d))))||c&&(k&&l&&m&&(n&&o&&p||g&&h&&i&&j&&(n&&o||f&&(n||e)))||d&&(l&&m&&n&&(k&&g&&h&&i&&j&&(o||f)||o&&p)||e&&(m&&n&&o&&(k&&l&&g&&h&&i&&j||p)||f&&(n&&o&&p||g&&(o&&p||h&&(p||i)))))))||k&&i&&j&&(l&&m&&n&&o&&p||g&&h&&(l&&m&&n&&o||f&&(l&&m&&n||e&&(l&&m||d&&(l||c))))))||h&&i&&j&&(k&&l&&m&&n&&o&&p||g&&(k&&l&&m&&n&&o||f&&(k&&l&&m&&n||e&&(k&&l&&m||d&&(k&&l||c&&(b||k))))));\nmat4 mct = mp - mat4(\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct,\nct, ct, ct, ct\n), mc_t = mat4(\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t,\nc_t, c_t, c_t, c_t\n) - mp;\nvec4 bs = max(mc_t[0], zeroes), ds = max(mct[0], zeroes);\nbs += max(mc_t[1], zeroes); ds += max(mct[1], zeroes);\nbs += max(mc_t[2], zeroes); ds += max(mct[2], zeroes);\nbs += max(mc_t[3], zeroes); ds += max(mct[3], zeroes);\nfloat score = max(dot(bs, ones), dot(ds, ones)) / 16.0f;\nscore *= float(isCorner);\nbest = (score > best.x) ? vec2(score, lod) : best;\nlod += lodStep;\npot = exp2(lod);\n}\ncolor.rb = encodeFloat16(best.x);\ncolor.a = encodeLod(best.y);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat score = decodeFloat16(pixel.rb);\nfloat score8 = 1.0f - exp2(-score);\ncolor = vec4(score8, pixel.g, 0.0f, pixel.a);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D corners;\nuniform sampler2D maxScore;\nuniform float quality;\nvoid main()\n{\nvec4 pixel = threadPixel(corners);\nfloat maxval = decodeFloat16(threadPixel(maxScore).rb);\nfloat score = decodeFloat16(pixel.rb);\nfloat threshold = maxval * clamp(quality, 0.0f, 1.0f);\ncolor = pixel;\ncolor.rb = score >= threshold ? color.rb : encodeFloat16(0.0f);\n}'},function(e,t){e.exports='@include "float16.glsl"\nuniform sampler2D self;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 last = outputSize() - ivec2(1);\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = texelFetch(self, thread, 0);\nvec4 p1 = texelFetch(self, min(next1, last), 0);\nvec4 p2 = texelFetch(self, min(next2, last), 0);\nvec4 p3 = texelFetch(self, min(next3, last), 0);\nfloat s0 = decodeFloat16(p0.rb);\nfloat s1 = decodeFloat16(p1.rb);\nfloat s2 = decodeFloat16(p2.rb);\nfloat s3 = decodeFloat16(p3.rb);\nbool b0 = s0 >= s1 && s0 >= s2 && s0 >= s3;\nbool b1 = s1 >= s0 && s1 >= s2 && s1 >= s3;\nbool b2 = s2 >= s0 && s2 >= s1 && s2 >= s3;\ncolor = vec4(0.0f);\ncolor.rb = b0 ? p0.rb : (\nb1 ? p1.rb : (\nb2 ? p2.rb : p3.rb\n)\n);\n}'},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\n@include "float16.glsl"\n#if !defined(MAX_LAYERS) || MAX_LAYERS < 7 || MAX_LAYERS > 16 || MAX_LAYERS % 2 == 0\n#error Invalid MAX_LAYERS\n#endif\nuniform sampler2D pyramid;\nuniform int windowSize;\nuniform int numberOfLayers;\nuniform float lodStep;\nuniform sampler2D sobelDerivatives[@MAX_LAYERS@];\nvec4 pickSobelDerivatives(int index, ivec2 offset)\n{\n#define CASE(k) case k: return textureLod(sobelDerivatives[k], texCoord + vec2(offset) / texSize, 0.0f)\nswitch(index) {\n#if MAX_LAYERS > 15\nCASE(15);\n#elif MAX_LAYERS > 13\nCASE(14); CASE(13);\n#elif MAX_LAYERS > 11\nCASE(12); CASE(11);\n#elif MAX_LAYERS > 9\nCASE(10); CASE(9);\n#elif MAX_LAYERS > 7\nCASE(8); CASE(7);\n#endif\nCASE(6); CASE(5); CASE(4); CASE(3); CASE(2); CASE(1); CASE(0);\ndefault: return vec4(0.0f);\n}\n}\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = threadPixel(pyramid);\nint r = (windowSize - 1) / 2;\nfloat windowArea = float(windowSize * windowSize);\nvec2 tmp = vec2(0.0f);\nfor(int layer = 0; layer < numberOfLayers; layer++) {\nvec3 m = vec3(0.0f); vec2 df;\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\ndf = decodeSobel(pickSobelDerivatives(layer, ivec2(i-r, j-r)));\nm += vec3(df.x * df.x, df.x * df.y, df.y * df.y);\n}\n}\nfloat response = 0.5f * (m.x + m.z - sqrt((m.x - m.z) * (m.x - m.z) + 4.0f * m.y * m.y));\nfloat normalizer = 9.0f / windowArea;\nfloat score = response * normalizer;\nfloat lod = lodStep * float(layer);\ntmp = mix(tmp, vec2(score, lod), bvec2(score > tmp.x));\n}\nvec2 encodedScore = encodeFloat16(tmp.x);\nfloat encodedScale = encodeLod(tmp.y);\ncolor = vec4(0.0f, pixel.g, 0.0f, encodedScale);\ncolor.rb = encodedScore;\n}'},function(e,t){e.exports='@include "sobel.glsl"\n@include "pyramids.glsl"\nuniform sampler2D pyramid;\nuniform float lod;\nconst mat3 horizontalKernel = mat3(\n-1.0f, 0.0f, 1.0f,\n-2.0f, 0.0f, 2.0f,\n-1.0f, 0.0f, 1.0f\n);\nconst mat3 verticalKernel = mat3(\n1.0f, 2.0f, 1.0f,\n0.0f, 0.0f, 0.0f,\n-1.0f,-2.0f,-1.0f\n);\nconst vec3 ones = vec3(1.0f, 1.0f, 1.0f);\nvoid main()\n{\nfloat pot = exp2(lod);\nmat3 neighbors = mat3(\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, -1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 0)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(-1, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(0, 1)).g,\npyrPixelAtOffset(pyramid, lod, pot, ivec2(1, 1)).g\n);\nmat3 sobelX = matrixCompMult(horizontalKernel, neighbors);\nmat3 sobelY = matrixCompMult(verticalKernel, neighbors);\nvec2 df = vec2(\ndot(sobelX[0] + sobelX[1] + sobelX[2], ones),\ndot(sobelY[0] + sobelY[1] + sobelY[2], ones)\n);\ncolor = encodeSobel(df);\n}'},function(e,t){e.exports='@include "pyramids.glsl"\n@include "float16.glsl"\nuniform sampler2D image;\nuniform float lodStep;\n#if defined(MULTISCALE) && MULTISCALE != 0\n# define ENABLE_INNER_RING\n# define ENABLE_MIDDLE_RING\n# define ENABLE_OUTER_RING\n# define LOD_STEP (lodStep)\n#else\n# define ENABLE_INNER_RING\n# define LOD_STEP (0.0f)\n#endif\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nfloat lod = decodeLod(pixel.a);\nfloat score = decodeFloat16(pixel.rb);\ncolor = pixel;\nif(score == 0.0f)\nreturn;\n#ifdef ENABLE_INNER_RING\nvec4 p0 = pixelAtShortOffset(image, ivec2(0, 1));\nvec4 p1 = pixelAtShortOffset(image, ivec2(1, 1));\nvec4 p2 = pixelAtShortOffset(image, ivec2(1, 0));\nvec4 p3 = pixelAtShortOffset(image, ivec2(1, -1));\nvec4 p4 = pixelAtShortOffset(image, ivec2(0, -1));\nvec4 p5 = pixelAtShortOffset(image, ivec2(-1, -1));\nvec4 p6 = pixelAtShortOffset(image, ivec2(-1, 0));\nvec4 p7 = pixelAtShortOffset(image, ivec2(-1, 1));\n#else\nvec4 p0, p1, p2, p3, p4, p5, p6, p7;\np0 = p1 = p2 = p3 = p4 = p5 = p6 = p7 = vec4(0.0f);\n#endif\n#ifdef ENABLE_MIDDLE_RING\nvec4 q0 = pixelAtShortOffset(image, ivec2(0, 2));\nvec4 q1 = pixelAtShortOffset(image, ivec2(1, 2));\nvec4 q2 = pixelAtShortOffset(image, ivec2(2, 2));\nvec4 q3 = pixelAtShortOffset(image, ivec2(2, 1));\nvec4 q4 = pixelAtShortOffset(image, ivec2(2, 0));\nvec4 q5 = pixelAtShortOffset(image, ivec2(2, -1));\nvec4 q6 = pixelAtShortOffset(image, ivec2(2, -2));\nvec4 q7 = pixelAtShortOffset(image, ivec2(1, -2));\nvec4 q8 = pixelAtShortOffset(image, ivec2(0, -2));\nvec4 q9 = pixelAtShortOffset(image, ivec2(-1, -2));\nvec4 q10 = pixelAtShortOffset(image, ivec2(-2, -2));\nvec4 q11 = pixelAtShortOffset(image, ivec2(-2, -1));\nvec4 q12 = pixelAtShortOffset(image, ivec2(-2, 0));\nvec4 q13 = pixelAtShortOffset(image, ivec2(-2, 1));\nvec4 q14 = pixelAtShortOffset(image, ivec2(-2, 2));\nvec4 q15 = pixelAtShortOffset(image, ivec2(-1, 2));\n#else\nvec4 q0, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15;\nq0 = q1 = q2 = q3 = q4 = q5 = q6 = q7 = q8 = q9 = q10 =\nq11 = q12 = q13 = q14 = q15 = vec4(0.0f);\n#endif\n#ifdef ENABLE_OUTER_RING\nvec4 r0 = pixelAtShortOffset(image, ivec2(0, 3));\nvec4 r1 = pixelAtShortOffset(image, ivec2(1, 3));\nvec4 r2 = pixelAtShortOffset(image, ivec2(3, 1));\nvec4 r3 = pixelAtShortOffset(image, ivec2(3, 0));\nvec4 r4 = pixelAtShortOffset(image, ivec2(3, -1));\nvec4 r5 = pixelAtShortOffset(image, ivec2(1, -3));\nvec4 r6 = pixelAtShortOffset(image, ivec2(0, -3));\nvec4 r7 = pixelAtShortOffset(image, ivec2(-1, -3));\nvec4 r8 = pixelAtShortOffset(image, ivec2(-3, -1));\nvec4 r9 = pixelAtShortOffset(image, ivec2(-3, 0));\nvec4 r10 = pixelAtShortOffset(image, ivec2(-3, 1));\nvec4 r11 = pixelAtShortOffset(image, ivec2(-1, 3));\nvec4 r12 = pixelAtShortOffset(image, ivec2(0, 4));\nvec4 r13 = pixelAtShortOffset(image, ivec2(4, 0));\nvec4 r14 = pixelAtShortOffset(image, ivec2(0, -4));\nvec4 r15 = pixelAtShortOffset(image, ivec2(-4, 0));\n#else\nvec4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;\nr0 = r1 = r2 = r3 = r4 = r5 = r6 = r7 = r8 = r9 = r10 =\nr11 = r12 = r13 = r14 = r15 = vec4(0.0f);\n#endif\nfloat lodPlus = lod + LOD_STEP;\nfloat lodMinus = lod - LOD_STEP;\nfloat alphaPlus = encodeLod(lodPlus);\nfloat alphaMinus = encodeLod(lodMinus);\nfloat alpha = encodeLod(lod);\nmat3 innerScore = mat3(\ndecodeFloat16(p0.rb) * float(isSameEncodedLod(p0.a, alpha) || isSameEncodedLod(p0.a, alphaPlus) || isSameEncodedLod(p0.a, alphaMinus)),\ndecodeFloat16(p1.rb) * float(isSameEncodedLod(p1.a, alpha) || isSameEncodedLod(p1.a, alphaPlus) || isSameEncodedLod(p1.a, alphaMinus)),\ndecodeFloat16(p2.rb) * float(isSameEncodedLod(p2.a, alpha) || isSameEncodedLod(p2.a, alphaPlus) || isSameEncodedLod(p2.a, alphaMinus)),\ndecodeFloat16(p3.rb) * float(isSameEncodedLod(p3.a, alpha) || isSameEncodedLod(p3.a, alphaPlus) || isSameEncodedLod(p3.a, alphaMinus)),\ndecodeFloat16(p4.rb) * float(isSameEncodedLod(p4.a, alpha) || isSameEncodedLod(p4.a, alphaPlus) || isSameEncodedLod(p4.a, alphaMinus)),\ndecodeFloat16(p5.rb) * float(isSameEncodedLod(p5.a, alpha) || isSameEncodedLod(p5.a, alphaPlus) || isSameEncodedLod(p5.a, alphaMinus)),\ndecodeFloat16(p6.rb) * float(isSameEncodedLod(p6.a, alpha) || isSameEncodedLod(p6.a, alphaPlus) || isSameEncodedLod(p6.a, alphaMinus)),\ndecodeFloat16(p7.rb) * float(isSameEncodedLod(p7.a, alpha) || isSameEncodedLod(p7.a, alphaPlus) || isSameEncodedLod(p7.a, alphaMinus)),\n0.0f\n);\nmat4 middleScore = mat4(\ndecodeFloat16(q0.rb) * float(isSameEncodedLod(q0.a, alphaPlus) || isSameEncodedLod(q0.a, alphaMinus)),\ndecodeFloat16(q1.rb) * float(isSameEncodedLod(q1.a, alphaPlus) || isSameEncodedLod(q1.a, alphaMinus)),\ndecodeFloat16(q2.rb) * float(isSameEncodedLod(q2.a, alphaPlus) || isSameEncodedLod(q2.a, alphaMinus)),\ndecodeFloat16(q3.rb) * float(isSameEncodedLod(q3.a, alphaPlus) || isSameEncodedLod(q3.a, alphaMinus)),\ndecodeFloat16(q4.rb) * float(isSameEncodedLod(q4.a, alphaPlus) || isSameEncodedLod(q4.a, alphaMinus)),\ndecodeFloat16(q5.rb) * float(isSameEncodedLod(q5.a, alphaPlus) || isSameEncodedLod(q5.a, alphaMinus)),\ndecodeFloat16(q6.rb) * float(isSameEncodedLod(q6.a, alphaPlus) || isSameEncodedLod(q6.a, alphaMinus)),\ndecodeFloat16(q7.rb) * float(isSameEncodedLod(q7.a, alphaPlus) || isSameEncodedLod(q7.a, alphaMinus)),\ndecodeFloat16(q8.rb) * float(isSameEncodedLod(q8.a, alphaPlus) || isSameEncodedLod(q8.a, alphaMinus)),\ndecodeFloat16(q9.rb) * float(isSameEncodedLod(q9.a, alphaPlus) || isSameEncodedLod(q9.a, alphaMinus)),\ndecodeFloat16(q10.rb) * float(isSameEncodedLod(q10.a, alphaPlus) || isSameEncodedLod(q10.a, alphaMinus)),\ndecodeFloat16(q11.rb) * float(isSameEncodedLod(q11.a, alphaPlus) || isSameEncodedLod(q11.a, alphaMinus)),\ndecodeFloat16(q12.rb) * float(isSameEncodedLod(q12.a, alphaPlus) || isSameEncodedLod(q12.a, alphaMinus)),\ndecodeFloat16(q13.rb) * float(isSameEncodedLod(q13.a, alphaPlus) || isSameEncodedLod(q13.a, alphaMinus)),\ndecodeFloat16(q14.rb) * float(isSameEncodedLod(q14.a, alphaPlus) || isSameEncodedLod(q14.a, alphaMinus)),\ndecodeFloat16(q15.rb) * float(isSameEncodedLod(q15.a, alphaPlus) || isSameEncodedLod(q15.a, alphaMinus))\n);\nmat4 outerScore = mat4(\ndecodeFloat16(r0.rb) * float(isSameEncodedLod(r0.a, alphaPlus) || isSameEncodedLod(r0.a, alphaMinus)),\ndecodeFloat16(r1.rb) * float(isSameEncodedLod(r1.a, alphaPlus) || isSameEncodedLod(r1.a, alphaMinus)),\ndecodeFloat16(r2.rb) * float(isSameEncodedLod(r2.a, alphaPlus) || isSameEncodedLod(r2.a, alphaMinus)),\ndecodeFloat16(r3.rb) * float(isSameEncodedLod(r3.a, alphaPlus) || isSameEncodedLod(r3.a, alphaMinus)),\ndecodeFloat16(r4.rb) * float(isSameEncodedLod(r4.a, alphaPlus) || isSameEncodedLod(r4.a, alphaMinus)),\ndecodeFloat16(r5.rb) * float(isSameEncodedLod(r5.a, alphaPlus) || isSameEncodedLod(r5.a, alphaMinus)),\ndecodeFloat16(r6.rb) * float(isSameEncodedLod(r6.a, alphaPlus) || isSameEncodedLod(r6.a, alphaMinus)),\ndecodeFloat16(r7.rb) * float(isSameEncodedLod(r7.a, alphaPlus) || isSameEncodedLod(r7.a, alphaMinus)),\ndecodeFloat16(r8.rb) * float(isSameEncodedLod(r8.a, alphaPlus) || isSameEncodedLod(r8.a, alphaMinus)),\ndecodeFloat16(r9.rb) * float(isSameEncodedLod(r9.a, alphaPlus) || isSameEncodedLod(r9.a, alphaMinus)),\ndecodeFloat16(r10.rb) * float(isSameEncodedLod(r10.a, alphaPlus) || isSameEncodedLod(r10.a, alphaMinus)),\ndecodeFloat16(r11.rb) * float(isSameEncodedLod(r11.a, alphaPlus) || isSameEncodedLod(r11.a, alphaMinus)),\ndecodeFloat16(r12.rb) * float(isSameEncodedLod(r12.a, alphaPlus) || isSameEncodedLod(r12.a, alphaMinus)),\ndecodeFloat16(r13.rb) * float(isSameEncodedLod(r13.a, alphaPlus) || isSameEncodedLod(r13.a, alphaMinus)),\ndecodeFloat16(r14.rb) * float(isSameEncodedLod(r14.a, alphaPlus) || isSameEncodedLod(r14.a, alphaMinus)),\ndecodeFloat16(r15.rb) * float(isSameEncodedLod(r15.a, alphaPlus) || isSameEncodedLod(r15.a, alphaMinus))\n);\nvec3 maxInnerScore3 = max(innerScore[0], max(innerScore[1], innerScore[2]));\nvec4 maxMiddleScore4 = max(max(middleScore[0], middleScore[1]), max(middleScore[2], middleScore[3]));\nvec4 maxOuterScore4 = max(max(outerScore[0], outerScore[1]), max(outerScore[2], outerScore[3]));\nfloat maxInnerScore = max(maxInnerScore3.x, max(maxInnerScore3.y, maxInnerScore3.z));\nfloat maxMiddleScore = max(max(maxMiddleScore4.x, maxMiddleScore4.y), max(maxMiddleScore4.z, maxMiddleScore4.w));\nfloat maxOuterScore = max(max(maxOuterScore4.x, maxOuterScore4.y), max(maxOuterScore4.z, maxOuterScore4.w));\nfloat maxScore = max(maxInnerScore, max(maxMiddleScore, maxOuterScore));\nfloat finalScore = step(maxScore, score) * score;\ncolor.rb = encodeFloat16(finalScore);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedCorners;\nuniform int encoderLength;\nuniform sampler2D pyramid;\nuniform int extraSize;\nconst int descriptorSize = 32;\nconst ivec4 pat31[256] = ivec4[256](\nivec4(8,-3,9,5),\nivec4(4,2,7,-12),\nivec4(-11,9,-8,2),\nivec4(7,-12,12,-13),\nivec4(2,-13,2,12),\nivec4(1,-7,1,6),\nivec4(-2,-10,-2,-4),\nivec4(-13,-13,-11,-8),\nivec4(-13,-3,-12,-9),\nivec4(10,4,11,9),\nivec4(-13,-8,-8,-9),\nivec4(-11,7,-9,12),\nivec4(7,7,12,6),\nivec4(-4,-5,-3,0),\nivec4(-13,2,-12,-3),\nivec4(-9,0,-7,5),\nivec4(12,-6,12,-1),\nivec4(-3,6,-2,12),\nivec4(-6,-13,-4,-8),\nivec4(11,-13,12,-8),\nivec4(4,7,5,1),\nivec4(5,-3,10,-3),\nivec4(3,-7,6,12),\nivec4(-8,-7,-6,-2),\nivec4(-2,11,-1,-10),\nivec4(-13,12,-8,10),\nivec4(-7,3,-5,-3),\nivec4(-4,2,-3,7),\nivec4(-10,-12,-6,11),\nivec4(5,-12,6,-7),\nivec4(5,-6,7,-1),\nivec4(1,0,4,-5),\nivec4(9,11,11,-13),\nivec4(4,7,4,12),\nivec4(2,-1,4,4),\nivec4(-4,-12,-2,7),\nivec4(-8,-5,-7,-10),\nivec4(4,11,9,12),\nivec4(0,-8,1,-13),\nivec4(-13,-2,-8,2),\nivec4(-3,-2,-2,3),\nivec4(-6,9,-4,-9),\nivec4(8,12,10,7),\nivec4(0,9,1,3),\nivec4(7,-5,11,-10),\nivec4(-13,-6,-11,0),\nivec4(10,7,12,1),\nivec4(-6,-3,-6,12),\nivec4(10,-9,12,-4),\nivec4(-13,8,-8,-12),\nivec4(-13,0,-8,-4),\nivec4(3,3,7,8),\nivec4(5,7,10,-7),\nivec4(-1,7,1,-12),\nivec4(3,-10,5,6),\nivec4(2,-4,3,-10),\nivec4(-13,0,-13,5),\nivec4(-13,-7,-12,12),\nivec4(-13,3,-11,8),\nivec4(-7,12,-4,7),\nivec4(6,-10,12,8),\nivec4(-9,-1,-7,-6),\nivec4(-2,-5,0,12),\nivec4(-12,5,-7,5),\nivec4(3,-10,8,-13),\nivec4(-7,-7,-4,5),\nivec4(-3,-2,-1,-7),\nivec4(2,9,5,-11),\nivec4(-11,-13,-5,-13),\nivec4(-1,6,0,-1),\nivec4(5,-3,5,2),\nivec4(-4,-13,-4,12),\nivec4(-9,-6,-9,6),\nivec4(-12,-10,-8,-4),\nivec4(10,2,12,-3),\nivec4(7,12,12,12),\nivec4(-7,-13,-6,5),\nivec4(-4,9,-3,4),\nivec4(7,-1,12,2),\nivec4(-7,6,-5,1),\nivec4(-13,11,-12,5),\nivec4(-3,7,-2,-6),\nivec4(7,-8,12,-7),\nivec4(-13,-7,-11,-12),\nivec4(1,-3,12,12),\nivec4(2,-6,3,0),\nivec4(-4,3,-2,-13),\nivec4(-1,-13,1,9),\nivec4(7,1,8,-6),\nivec4(1,-1,3,12),\nivec4(9,1,12,6),\nivec4(-1,-9,-1,3),\nivec4(-13,-13,-10,5),\nivec4(7,7,10,12),\nivec4(12,-5,12,9),\nivec4(6,3,7,11),\nivec4(5,-13,6,10),\nivec4(2,-12,2,3),\nivec4(3,8,4,-6),\nivec4(2,6,12,-13),\nivec4(9,-12,10,3),\nivec4(-8,4,-7,9),\nivec4(-11,12,-4,-6),\nivec4(1,12,2,-8),\nivec4(6,-9,7,-4),\nivec4(2,3,3,-2),\nivec4(6,3,11,0),\nivec4(3,-3,8,-8),\nivec4(7,8,9,3),\nivec4(-11,-5,-6,-4),\nivec4(-10,11,-5,10),\nivec4(-5,-8,-3,12),\nivec4(-10,5,-9,0),\nivec4(8,-1,12,-6),\nivec4(4,-6,6,-11),\nivec4(-10,12,-8,7),\nivec4(4,-2,6,7),\nivec4(-2,0,-2,12),\nivec4(-5,-8,-5,2),\nivec4(7,-6,10,12),\nivec4(-9,-13,-8,-8),\nivec4(-5,-13,-5,-2),\nivec4(8,-8,9,-13),\nivec4(-9,-11,-9,0),\nivec4(1,-8,1,-2),\nivec4(7,-4,9,1),\nivec4(-2,1,-1,-4),\nivec4(11,-6,12,-11),\nivec4(-12,-9,-6,4),\nivec4(3,7,7,12),\nivec4(5,5,10,8),\nivec4(0,-4,2,8),\nivec4(-9,12,-5,-13),\nivec4(0,7,2,12),\nivec4(-1,2,1,7),\nivec4(5,11,7,-9),\nivec4(3,5,6,-8),\nivec4(-13,-4,-8,9),\nivec4(-5,9,-3,-3),\nivec4(-4,-7,-3,-12),\nivec4(6,5,8,0),\nivec4(-7,6,-6,12),\nivec4(-13,6,-5,-2),\nivec4(1,-10,3,10),\nivec4(4,1,8,-4),\nivec4(-2,-2,2,-13),\nivec4(2,-12,12,12),\nivec4(-2,-13,0,-6),\nivec4(4,1,9,3),\nivec4(-6,-10,-3,-5),\nivec4(-3,-13,-1,1),\nivec4(7,5,12,-11),\nivec4(4,-2,5,-7),\nivec4(-13,9,-9,-5),\nivec4(7,1,8,6),\nivec4(7,-8,7,6),\nivec4(-7,-4,-7,1),\nivec4(-8,11,-7,-8),\nivec4(-13,6,-12,-8),\nivec4(2,4,3,9),\nivec4(10,-5,12,3),\nivec4(-6,-5,-6,7),\nivec4(8,-3,9,-8),\nivec4(2,-12,2,8),\nivec4(-11,-2,-10,3),\nivec4(-12,-13,-7,-9),\nivec4(-11,0,-10,-5),\nivec4(5,-3,11,8),\nivec4(-2,-13,-1,12),\nivec4(-1,-8,0,9),\nivec4(-13,-11,-12,-5),\nivec4(-10,-2,-10,11),\nivec4(-3,9,-2,-13),\nivec4(2,-3,3,2),\nivec4(-9,-13,-4,0),\nivec4(-4,6,-3,-10),\nivec4(-4,12,-2,-7),\nivec4(-6,-11,-4,9),\nivec4(6,-3,6,11),\nivec4(-13,11,-5,5),\nivec4(11,11,12,6),\nivec4(7,-5,12,-2),\nivec4(-1,12,0,7),\nivec4(-4,-8,-3,-2),\nivec4(-7,1,-6,7),\nivec4(-13,-12,-8,-13),\nivec4(-7,-2,-6,-8),\nivec4(-8,5,-6,-9),\nivec4(-5,-1,-4,5),\nivec4(-13,7,-8,10),\nivec4(1,5,5,-13),\nivec4(1,0,10,-13),\nivec4(9,12,10,-1),\nivec4(5,-8,10,-9),\nivec4(-1,11,1,-13),\nivec4(-9,-3,-6,2),\nivec4(-1,-10,1,12),\nivec4(-13,1,-8,-10),\nivec4(8,-11,10,-6),\nivec4(2,-13,3,-6),\nivec4(7,-13,12,-9),\nivec4(-10,-10,-5,-7),\nivec4(-10,-8,-8,-13),\nivec4(4,-6,8,5),\nivec4(3,12,8,-13),\nivec4(-4,2,-3,-3),\nivec4(5,-13,10,-12),\nivec4(4,-13,5,-1),\nivec4(-9,9,-4,3),\nivec4(0,3,3,-9),\nivec4(-12,1,-6,1),\nivec4(3,2,4,-8),\nivec4(-10,-10,-10,9),\nivec4(8,-13,12,12),\nivec4(-8,-12,-6,-5),\nivec4(2,2,3,7),\nivec4(10,6,11,-8),\nivec4(6,8,8,-12),\nivec4(-7,10,-6,5),\nivec4(-3,-9,-3,9),\nivec4(-1,-13,-1,5),\nivec4(-3,-7,-3,4),\nivec4(-8,-2,-8,3),\nivec4(4,2,12,12),\nivec4(2,-5,3,11),\nivec4(6,-9,11,-13),\nivec4(3,-1,7,12),\nivec4(11,-1,12,4),\nivec4(-3,0,-3,6),\nivec4(4,-11,4,12),\nivec4(2,-4,2,1),\nivec4(-10,-6,-8,1),\nivec4(-13,7,-11,1),\nivec4(-13,12,-11,-13),\nivec4(6,0,11,-13),\nivec4(0,-1,1,4),\nivec4(-13,3,-9,-2),\nivec4(-9,8,-6,-3),\nivec4(-13,-6,-8,-2),\nivec4(5,-9,8,10),\nivec4(2,7,3,-9),\nivec4(-1,-6,-1,-1),\nivec4(9,5,11,-2),\nivec4(11,-3,12,-8),\nivec4(3,0,3,5),\nivec4(-1,4,0,10),\nivec4(3,-6,4,5),\nivec4(-13,0,-10,5),\nivec4(5,8,12,11),\nivec4(8,9,9,-6),\nivec4(7,-4,8,-12),\nivec4(-10,4,-10,9),\nivec4(7,3,12,4),\nivec4(9,-7,10,-2),\nivec4(7,0,12,-2),\nivec4(-1,-6,0,-11)\n);\nvoid getPair(int index, mat2 rot, out vec2 p, out vec2 q)\n{\nivec4 data = pat31[index];\nvec2 op = vec2(data.xy);\nvec2 oq = vec2(data.zw);\np = rot * op;\nq = rot * oq;\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedCorners);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint descriptorCell = address.offset - sizeofEncodedKeypoint(0, extraSize) / 4;\ncolor = pixel;\nif(descriptorCell < 0)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedCorners, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nfloat degreesOrientation = round(360.0f + degrees(keypoint.orientation));\nfloat orientation = radians(degreesOrientation - mod(degreesOrientation, 12.0f));\nfloat kcos = cos(orientation);\nfloat ksin = sin(orientation);\nmat2 rot = mat2(kcos, ksin, -ksin, kcos);\nfloat pot = exp2(keypoint.lod);\nvec2 imageSize = vec2(textureSize(pyramid, 0));\nint patternStart = 32 * descriptorCell;\nuint test[4] = uint[4](0u, 0u, 0u, 0u);\nfor(int t = 0; t < 4; t++) {\nuint bits = 0u;\nvec2 p, q;\nvec4 a, b;\nint i = t * 8;\n@unroll\nfor(int j = 0; j < 8; j++) {\ngetPair(patternStart + i + j, rot, p, q);\na = pyrPixelAtEx(pyramid, round(keypoint.position + pot * p), keypoint.lod, imageSize);\nb = pyrPixelAtEx(pyramid, round(keypoint.position + pot * q), keypoint.lod, imageSize);\nbits |= uint(a.g < b.g) << j;\n}\ntest[t] = bits;\n}\ncolor = vec4(test[0], test[1], test[2], test[3]) / 255.0f;\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D pyramid;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nconst int diskPointCount[16] = int[16](0, 4, 12, 28, 48, 80, 112, 148, 196, 252, 316, 376, 440, 528, 612, 708);\nconst ivec2 diskPoint[708] = ivec2[708](\nivec2(0,-1),ivec2(-1,0),ivec2(1,0),ivec2(0,1),\nivec2(-1,-1),ivec2(1,-1),ivec2(-1,1),ivec2(1,1),ivec2(0,-2),ivec2(-2,0),ivec2(2,0),ivec2(0,2),\nivec2(-1,-2),ivec2(1,-2),ivec2(-2,-1),ivec2(2,-1),ivec2(-2,1),ivec2(2,1),ivec2(-1,2),ivec2(1,2),ivec2(-2,-2),ivec2(2,-2),ivec2(-2,2),ivec2(2,2),ivec2(0,-3),ivec2(-3,0),ivec2(3,0),ivec2(0,3),\nivec2(-1,-3),ivec2(1,-3),ivec2(-3,-1),ivec2(3,-1),ivec2(-3,1),ivec2(3,1),ivec2(-1,3),ivec2(1,3),ivec2(-2,-3),ivec2(2,-3),ivec2(-3,-2),ivec2(3,-2),ivec2(-3,2),ivec2(3,2),ivec2(-2,3),ivec2(2,3),ivec2(0,-4),ivec2(-4,0),ivec2(4,0),ivec2(0,4),\nivec2(-1,-4),ivec2(1,-4),ivec2(-4,-1),ivec2(4,-1),ivec2(-4,1),ivec2(4,1),ivec2(-1,4),ivec2(1,4),ivec2(-3,-3),ivec2(3,-3),ivec2(-3,3),ivec2(3,3),ivec2(-2,-4),ivec2(2,-4),ivec2(-4,-2),ivec2(4,-2),ivec2(-4,2),ivec2(4,2),ivec2(-2,4),ivec2(2,4),ivec2(0,-5),ivec2(-3,-4),ivec2(3,-4),ivec2(-4,-3),ivec2(4,-3),ivec2(-5,0),ivec2(5,0),ivec2(-4,3),ivec2(4,3),ivec2(-3,4),ivec2(3,4),ivec2(0,5),\nivec2(-1,-5),ivec2(1,-5),ivec2(-5,-1),ivec2(5,-1),ivec2(-5,1),ivec2(5,1),ivec2(-1,5),ivec2(1,5),ivec2(-2,-5),ivec2(2,-5),ivec2(-5,-2),ivec2(5,-2),ivec2(-5,2),ivec2(5,2),ivec2(-2,5),ivec2(2,5),ivec2(-4,-4),ivec2(4,-4),ivec2(-4,4),ivec2(4,4),ivec2(-3,-5),ivec2(3,-5),ivec2(-5,-3),ivec2(5,-3),ivec2(-5,3),ivec2(5,3),ivec2(-3,5),ivec2(3,5),ivec2(0,-6),ivec2(-6,0),ivec2(6,0),ivec2(0,6),\nivec2(-1,-6),ivec2(1,-6),ivec2(-6,-1),ivec2(6,-1),ivec2(-6,1),ivec2(6,1),ivec2(-1,6),ivec2(1,6),ivec2(-2,-6),ivec2(2,-6),ivec2(-6,-2),ivec2(6,-2),ivec2(-6,2),ivec2(6,2),ivec2(-2,6),ivec2(2,6),ivec2(-4,-5),ivec2(4,-5),ivec2(-5,-4),ivec2(5,-4),ivec2(-5,4),ivec2(5,4),ivec2(-4,5),ivec2(4,5),ivec2(-3,-6),ivec2(3,-6),ivec2(-6,-3),ivec2(6,-3),ivec2(-6,3),ivec2(6,3),ivec2(-3,6),ivec2(3,6),ivec2(0,-7),ivec2(-7,0),ivec2(7,0),ivec2(0,7),\nivec2(-1,-7),ivec2(1,-7),ivec2(-5,-5),ivec2(5,-5),ivec2(-7,-1),ivec2(7,-1),ivec2(-7,1),ivec2(7,1),ivec2(-5,5),ivec2(5,5),ivec2(-1,7),ivec2(1,7),ivec2(-4,-6),ivec2(4,-6),ivec2(-6,-4),ivec2(6,-4),ivec2(-6,4),ivec2(6,4),ivec2(-4,6),ivec2(4,6),ivec2(-2,-7),ivec2(2,-7),ivec2(-7,-2),ivec2(7,-2),ivec2(-7,2),ivec2(7,2),ivec2(-2,7),ivec2(2,7),ivec2(-3,-7),ivec2(3,-7),ivec2(-7,-3),ivec2(7,-3),ivec2(-7,3),ivec2(7,3),ivec2(-3,7),ivec2(3,7),ivec2(-5,-6),ivec2(5,-6),ivec2(-6,-5),ivec2(6,-5),ivec2(-6,5),ivec2(6,5),ivec2(-5,6),ivec2(5,6),ivec2(0,-8),ivec2(-8,0),ivec2(8,0),ivec2(0,8),\nivec2(-1,-8),ivec2(1,-8),ivec2(-4,-7),ivec2(4,-7),ivec2(-7,-4),ivec2(7,-4),ivec2(-8,-1),ivec2(8,-1),ivec2(-8,1),ivec2(8,1),ivec2(-7,4),ivec2(7,4),ivec2(-4,7),ivec2(4,7),ivec2(-1,8),ivec2(1,8),ivec2(-2,-8),ivec2(2,-8),ivec2(-8,-2),ivec2(8,-2),ivec2(-8,2),ivec2(8,2),ivec2(-2,8),ivec2(2,8),ivec2(-6,-6),ivec2(6,-6),ivec2(-6,6),ivec2(6,6),ivec2(-3,-8),ivec2(3,-8),ivec2(-8,-3),ivec2(8,-3),ivec2(-8,3),ivec2(8,3),ivec2(-3,8),ivec2(3,8),ivec2(-5,-7),ivec2(5,-7),ivec2(-7,-5),ivec2(7,-5),ivec2(-7,5),ivec2(7,5),ivec2(-5,7),ivec2(5,7),ivec2(-4,-8),ivec2(4,-8),ivec2(-8,-4),ivec2(8,-4),ivec2(-8,4),ivec2(8,4),ivec2(-4,8),ivec2(4,8),ivec2(0,-9),ivec2(-9,0),ivec2(9,0),ivec2(0,9),\nivec2(-1,-9),ivec2(1,-9),ivec2(-9,-1),ivec2(9,-1),ivec2(-9,1),ivec2(9,1),ivec2(-1,9),ivec2(1,9),ivec2(-2,-9),ivec2(2,-9),ivec2(-6,-7),ivec2(6,-7),ivec2(-7,-6),ivec2(7,-6),ivec2(-9,-2),ivec2(9,-2),ivec2(-9,2),ivec2(9,2),ivec2(-7,6),ivec2(7,6),ivec2(-6,7),ivec2(6,7),ivec2(-2,9),ivec2(2,9),ivec2(-5,-8),ivec2(5,-8),ivec2(-8,-5),ivec2(8,-5),ivec2(-8,5),ivec2(8,5),ivec2(-5,8),ivec2(5,8),ivec2(-3,-9),ivec2(3,-9),ivec2(-9,-3),ivec2(9,-3),ivec2(-9,3),ivec2(9,3),ivec2(-3,9),ivec2(3,9),ivec2(-4,-9),ivec2(4,-9),ivec2(-9,-4),ivec2(9,-4),ivec2(-9,4),ivec2(9,4),ivec2(-4,9),ivec2(4,9),ivec2(-7,-7),ivec2(7,-7),ivec2(-7,7),ivec2(7,7),ivec2(0,-10),ivec2(-6,-8),ivec2(6,-8),ivec2(-8,-6),ivec2(8,-6),ivec2(-10,0),ivec2(10,0),ivec2(-8,6),ivec2(8,6),ivec2(-6,8),ivec2(6,8),ivec2(0,10),\nivec2(-1,-10),ivec2(1,-10),ivec2(-10,-1),ivec2(10,-1),ivec2(-10,1),ivec2(10,1),ivec2(-1,10),ivec2(1,10),ivec2(-2,-10),ivec2(2,-10),ivec2(-10,-2),ivec2(10,-2),ivec2(-10,2),ivec2(10,2),ivec2(-2,10),ivec2(2,10),ivec2(-5,-9),ivec2(5,-9),ivec2(-9,-5),ivec2(9,-5),ivec2(-9,5),ivec2(9,5),ivec2(-5,9),ivec2(5,9),ivec2(-3,-10),ivec2(3,-10),ivec2(-10,-3),ivec2(10,-3),ivec2(-10,3),ivec2(10,3),ivec2(-3,10),ivec2(3,10),ivec2(-7,-8),ivec2(7,-8),ivec2(-8,-7),ivec2(8,-7),ivec2(-8,7),ivec2(8,7),ivec2(-7,8),ivec2(7,8),ivec2(-4,-10),ivec2(4,-10),ivec2(-10,-4),ivec2(10,-4),ivec2(-10,4),ivec2(10,4),ivec2(-4,10),ivec2(4,10),ivec2(-6,-9),ivec2(6,-9),ivec2(-9,-6),ivec2(9,-6),ivec2(-9,6),ivec2(9,6),ivec2(-6,9),ivec2(6,9),ivec2(0,-11),ivec2(-11,0),ivec2(11,0),ivec2(0,11),\nivec2(-1,-11),ivec2(1,-11),ivec2(-11,-1),ivec2(11,-1),ivec2(-11,1),ivec2(11,1),ivec2(-1,11),ivec2(1,11),ivec2(-2,-11),ivec2(2,-11),ivec2(-5,-10),ivec2(5,-10),ivec2(-10,-5),ivec2(10,-5),ivec2(-11,-2),ivec2(11,-2),ivec2(-11,2),ivec2(11,2),ivec2(-10,5),ivec2(10,5),ivec2(-5,10),ivec2(5,10),ivec2(-2,11),ivec2(2,11),ivec2(-8,-8),ivec2(8,-8),ivec2(-8,8),ivec2(8,8),ivec2(-3,-11),ivec2(3,-11),ivec2(-7,-9),ivec2(7,-9),ivec2(-9,-7),ivec2(9,-7),ivec2(-11,-3),ivec2(11,-3),ivec2(-11,3),ivec2(11,3),ivec2(-9,7),ivec2(9,7),ivec2(-7,9),ivec2(7,9),ivec2(-3,11),ivec2(3,11),ivec2(-6,-10),ivec2(6,-10),ivec2(-10,-6),ivec2(10,-6),ivec2(-10,6),ivec2(10,6),ivec2(-6,10),ivec2(6,10),ivec2(-4,-11),ivec2(4,-11),ivec2(-11,-4),ivec2(11,-4),ivec2(-11,4),ivec2(11,4),ivec2(-4,11),ivec2(4,11),ivec2(0,-12),ivec2(-12,0),ivec2(12,0),ivec2(0,12),\nivec2(-1,-12),ivec2(1,-12),ivec2(-8,-9),ivec2(8,-9),ivec2(-9,-8),ivec2(9,-8),ivec2(-12,-1),ivec2(12,-1),ivec2(-12,1),ivec2(12,1),ivec2(-9,8),ivec2(9,8),ivec2(-8,9),ivec2(8,9),ivec2(-1,12),ivec2(1,12),ivec2(-5,-11),ivec2(5,-11),ivec2(-11,-5),ivec2(11,-5),ivec2(-11,5),ivec2(11,5),ivec2(-5,11),ivec2(5,11),ivec2(-2,-12),ivec2(2,-12),ivec2(-12,-2),ivec2(12,-2),ivec2(-12,2),ivec2(12,2),ivec2(-2,12),ivec2(2,12),ivec2(-7,-10),ivec2(7,-10),ivec2(-10,-7),ivec2(10,-7),ivec2(-10,7),ivec2(10,7),ivec2(-7,10),ivec2(7,10),ivec2(-3,-12),ivec2(3,-12),ivec2(-12,-3),ivec2(12,-3),ivec2(-12,3),ivec2(12,3),ivec2(-3,12),ivec2(3,12),ivec2(-6,-11),ivec2(6,-11),ivec2(-11,-6),ivec2(11,-6),ivec2(-11,6),ivec2(11,6),ivec2(-6,11),ivec2(6,11),ivec2(-4,-12),ivec2(4,-12),ivec2(-12,-4),ivec2(12,-4),ivec2(-12,4),ivec2(12,4),ivec2(-4,12),ivec2(4,12),ivec2(-9,-9),ivec2(9,-9),ivec2(-9,9),ivec2(9,9),ivec2(-8,-10),ivec2(8,-10),ivec2(-10,-8),ivec2(10,-8),ivec2(-10,8),ivec2(10,8),ivec2(-8,10),ivec2(8,10),ivec2(0,-13),ivec2(-5,-12),ivec2(5,-12),ivec2(-12,-5),ivec2(12,-5),ivec2(-13,0),ivec2(13,0),ivec2(-12,5),ivec2(12,5),ivec2(-5,12),ivec2(5,12),ivec2(0,13),\nivec2(-1,-13),ivec2(1,-13),ivec2(-7,-11),ivec2(7,-11),ivec2(-11,-7),ivec2(11,-7),ivec2(-13,-1),ivec2(13,-1),ivec2(-13,1),ivec2(13,1),ivec2(-11,7),ivec2(11,7),ivec2(-7,11),ivec2(7,11),ivec2(-1,13),ivec2(1,13),ivec2(-2,-13),ivec2(2,-13),ivec2(-13,-2),ivec2(13,-2),ivec2(-13,2),ivec2(13,2),ivec2(-2,13),ivec2(2,13),ivec2(-3,-13),ivec2(3,-13),ivec2(-13,-3),ivec2(13,-3),ivec2(-13,3),ivec2(13,3),ivec2(-3,13),ivec2(3,13),ivec2(-6,-12),ivec2(6,-12),ivec2(-12,-6),ivec2(12,-6),ivec2(-12,6),ivec2(12,6),ivec2(-6,12),ivec2(6,12),ivec2(-9,-10),ivec2(9,-10),ivec2(-10,-9),ivec2(10,-9),ivec2(-10,9),ivec2(10,9),ivec2(-9,10),ivec2(9,10),ivec2(-4,-13),ivec2(4,-13),ivec2(-8,-11),ivec2(8,-11),ivec2(-11,-8),ivec2(11,-8),ivec2(-13,-4),ivec2(13,-4),ivec2(-13,4),ivec2(13,4),ivec2(-11,8),ivec2(11,8),ivec2(-8,11),ivec2(8,11),ivec2(-4,13),ivec2(4,13),ivec2(-7,-12),ivec2(7,-12),ivec2(-12,-7),ivec2(12,-7),ivec2(-12,7),ivec2(12,7),ivec2(-7,12),ivec2(7,12),ivec2(-5,-13),ivec2(5,-13),ivec2(-13,-5),ivec2(13,-5),ivec2(-13,5),ivec2(13,5),ivec2(-5,13),ivec2(5,13),ivec2(0,-14),ivec2(-14,0),ivec2(14,0),ivec2(0,14),\nivec2(-1,-14),ivec2(1,-14),ivec2(-14,-1),ivec2(14,-1),ivec2(-14,1),ivec2(14,1),ivec2(-1,14),ivec2(1,14),ivec2(-2,-14),ivec2(2,-14),ivec2(-10,-10),ivec2(10,-10),ivec2(-14,-2),ivec2(14,-2),ivec2(-14,2),ivec2(14,2),ivec2(-10,10),ivec2(10,10),ivec2(-2,14),ivec2(2,14),ivec2(-9,-11),ivec2(9,-11),ivec2(-11,-9),ivec2(11,-9),ivec2(-11,9),ivec2(11,9),ivec2(-9,11),ivec2(9,11),ivec2(-3,-14),ivec2(3,-14),ivec2(-6,-13),ivec2(6,-13),ivec2(-13,-6),ivec2(13,-6),ivec2(-14,-3),ivec2(14,-3),ivec2(-14,3),ivec2(14,3),ivec2(-13,6),ivec2(13,6),ivec2(-6,13),ivec2(6,13),ivec2(-3,14),ivec2(3,14),ivec2(-8,-12),ivec2(8,-12),ivec2(-12,-8),ivec2(12,-8),ivec2(-12,8),ivec2(12,8),ivec2(-8,12),ivec2(8,12),ivec2(-4,-14),ivec2(4,-14),ivec2(-14,-4),ivec2(14,-4),ivec2(-14,4),ivec2(14,4),ivec2(-4,14),ivec2(4,14),ivec2(-7,-13),ivec2(7,-13),ivec2(-13,-7),ivec2(13,-7),ivec2(-13,7),ivec2(13,7),ivec2(-7,13),ivec2(7,13),ivec2(-5,-14),ivec2(5,-14),ivec2(-10,-11),ivec2(10,-11),ivec2(-11,-10),ivec2(11,-10),ivec2(-14,-5),ivec2(14,-5),ivec2(-14,5),ivec2(14,5),ivec2(-11,10),ivec2(11,10),ivec2(-10,11),ivec2(10,11),ivec2(-5,14),ivec2(5,14),ivec2(0,-15),ivec2(-9,-12),ivec2(9,-12),ivec2(-12,-9),ivec2(12,-9),ivec2(-15,0),ivec2(15,0),ivec2(-12,9),ivec2(12,9),ivec2(-9,12),ivec2(9,12),ivec2(0,15)\n);\nconst int DEFAULT_PATCH_RADIUS = 15;\nconst int MIN_PATCH_RADIUS = 2;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nint keypointIndex = thread.x + thread.y * outputSize().x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nvec2 m = vec2(0.0f);\nfloat pot = exp2(keypoint.lod);\nivec2 pyrBaseSize = textureSize(pyramid, 0);\nint scaledRadius = int(ceil(float(DEFAULT_PATCH_RADIUS) / pot));\nint radius = max(scaledRadius, MIN_PATCH_RADIUS);\nint count = diskPointCount[radius];\nfor(int j = 0; j < count; j++) {\nvec2 offset = vec2(diskPoint[j]);\nvec2 position = keypoint.position + round(pot * offset);\nvec4 patchPixel = pyrPixelAtEx(pyramid, position, keypoint.lod, pyrBaseSize);\nm += offset * patchPixel.g;\n}\nfloat angle = fastAtan2(m.y, m.x);\nfloat encodedOrientation = encodeOrientation(angle);\nfloat encodedFlags = encodeKeypointFlags(keypoint.flags | KPF_ORIENTED);\ncolor = vec4(0.0f, encodedOrientation, 0.0f, encodedFlags);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int estimatedKeypointCount;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#if !defined(MAX_KEYPOINTS)\n#error Must define MAX_KEYPOINTS\n#elif MAX_KEYPOINTS >= 65536\n#error MAX_KEYPOINTS is too large!\n#endif\nuint tuple[1 + MAX_KEYPOINTS];\nuint encodeTuple(Keypoint keypoint, int index)\n{\nuint mask = uint(-int(!isBadKeypoint(keypoint)));\nuint score = uint(clamp(keypoint.score, 0.0f, 1.0f) * 65535.0f);\nuint data = (uint(index) & 65535u) | (score << 16u);\nreturn data & mask;\n}\n#define decodeTupleIndex(tuple) int((tuple) & 16777215u)\n#define QUICKSELECT_UNSIGNED\n#define QUICKSELECT_DESCENDING\n#define QUICKSELECT_ARRAY tuple\n@include "quickselect.glsl"\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\ncolor = pixel;\nif(myIndex >= estimatedKeypointCount)\nreturn;\nKeypoint keypoint;\nKeypointAddress address = KeypointAddress(0, 0);\nint actualKeypointCount = estimatedKeypointCount;\nfor(int i = 0; i < estimatedKeypointCount; i++) {\nkeypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\ntuple[min(i, MAX_KEYPOINTS)] = encodeTuple(keypoint, i);\nactualKeypointCount = isBadKeypoint(keypoint) ? min(actualKeypointCount, i) : actualKeypointCount;\naddress.base += pixelsPerKeypoint;\n}\nint desiredTuple = quickselect(0, min(MAX_KEYPOINTS, actualKeypointCount - 1), myIndex);\nint desiredIndex = decodeTupleIndex(desiredTuple);\nKeypointAddress desiredAddress = KeypointAddress(desiredIndex * pixelsPerKeypoint, myAddress.offset);\nvec4 desiredPixel = readKeypointData(encodedKeypoints, encoderLength, desiredAddress);\ncolor = myIndex < actualKeypointCount ? desiredPixel : encodeNullKeypoint();\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nuniform int suppressedEncoderLength;\nvoid main()\n{\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, suppressedEncoderLength, 0, extraSize);\nint myIndex = findKeypointIndex(myAddress, 0, extraSize);\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress otherAddress = KeypointAddress(myIndex * pixelsPerKeypoint, myAddress.offset);\ncolor = readKeypointData(encodedKeypoints, encoderLength, otherAddress);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D encodedOrientations;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint orientationEncoderLength = textureSize(encodedOrientations, 0).x;\nivec2 location = ivec2(myIndex % orientationEncoderLength, myIndex / orientationEncoderLength);\nvec4 targetPixel = pixelAt(encodedOrientations, location);\nfloat encodedOrientation = targetPixel.g;\nfloat encodedFlags = targetPixel.a;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nbool isValid = !isBadKeypoint(keypoint);\ncolor = isValid && myAddress.offset == 1 ? vec4(pixel.r, encodedOrientation, pixel.b, encodedFlags) : pixel;\n}'},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 pos = min(thread * 2, textureSize(image, 0) - ivec2(1));\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\nivec2 thread = threadLocation();\nvec4 pixel = pixelAt(image, thread / 2);\ncolor = (((thread.x + thread.y) & 1) == 0) ? pixel : vec4(0.0f, 0.0f, 0.0f, pixel.a);\n}"},function(e,t){e.exports='@include "keypoints.glsl"\nuniform sampler2D pyramid;\nuniform sampler2D encodedKeypoints;\nuniform int windowSize;\nuniform float discardThreshold;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nbool isInsideImage(vec2 position)\n{\nvec2 imageSize = vec2(textureSize(pyramid, 0));\nfloat border = float(windowSize);\nreturn (\nposition.x > border && position.x < imageSize.x - border &&\nposition.y > border && position.y < imageSize.y - border\n);\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress address = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\ncolor = pixel;\nif(address.offset != 1)\nreturn;\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, address);\nif(isBadKeypoint(keypoint))\nreturn;\nbool shouldDiscard = isKeypointAtInfinity(keypoint) || !isInsideImage(keypoint.position);\nint newFlag = shouldDiscard ? KPF_DISCARD : 0;\ncolor.a = encodeKeypointFlags(keypoint.flags | newFlag);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\n@include "float16.glsl"\nuniform sampler2D nextPyramid;\nuniform sampler2D prevPyramid;\nuniform sampler2D encodedFlow;\nuniform sampler2D prevKeypoints;\nuniform int windowSize;\nuniform int level;\nuniform int depth;\nuniform int numberOfIterations;\nuniform float discardThreshold;\nuniform float epsilon;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\n#ifndef MAX_WINDOW_SIZE\n#error Must define MAX_WINDOW_SIZE\n#endif\n#define NEXT_IMAGE 1\n#define PREV_IMAGE 0\nconst int MAX_WINDOW_SIZE_SQUARED = (MAX_WINDOW_SIZE) * (MAX_WINDOW_SIZE);\nconst int MAX_WINDOW_SIZE_PLUS = (MAX_WINDOW_SIZE) + 2;\nconst int MAX_WINDOW_SIZE_PLUS_SQUARED = MAX_WINDOW_SIZE_PLUS * MAX_WINDOW_SIZE_PLUS;\nconst int DBL_MAX_WINDOW_SIZE_PLUS_SQUARED = 2 * MAX_WINDOW_SIZE_PLUS_SQUARED;\nconst int MAX_WINDOW_RADIUS_PLUS = (MAX_WINDOW_SIZE_PLUS - 1) / 2;\nconst int MAX_WINDOW_RADIUS = ((MAX_WINDOW_SIZE) - 1) / 2;\nconst highp float FLT_SCALE = 0.00000095367431640625f;\nconst highp float FLT_EPSILON = 0.00000011920929f;\nconst highp float INFINITY = 1.0f / 0.0f;\n#define windowRadius() ((windowSize - 1) / 2)\nfloat pixelBuffer[DBL_MAX_WINDOW_SIZE_PLUS_SQUARED];\n#define prevPixel(index) pixelBuffer[(index)]\n#define nextPixel(index) pixelBuffer[MAX_WINDOW_SIZE_PLUS_SQUARED + (index)]\n#define pixelIndex(i, j) (((j) + MAX_WINDOW_RADIUS_PLUS) * MAX_WINDOW_SIZE_PLUS + ((i) + MAX_WINDOW_RADIUS_PLUS))\nivec2 derivBuffer[MAX_WINDOW_SIZE_SQUARED];\n#define derivativesAt(x, y) derivBuffer[((y) + MAX_WINDOW_RADIUS) * MAX_WINDOW_SIZE + ((x) + MAX_WINDOW_RADIUS)]\nvoid readWindow(vec2 center, float lod)\n{\nivec2 pyrBaseSize = textureSize(prevPyramid, 0);\nfloat pot = exp2(lod);\nint r = windowRadius();\nivec2 offset; int idx;\n#define readPixelsAt(ox, oy) offset = ivec2((ox), (oy)); \\\nidx = pixelIndex(offset.x, offset.y); \\\nnextPixel(idx) = pyrSubpixelAtExOffset(nextPyramid, center, lod, pot, offset, pyrBaseSize).g; \\\nprevPixel(idx) = pyrSubpixelAtExOffset(prevPyramid, center, lod, pot, offset, pyrBaseSize).g\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nreadPixelsAt(i-r, j-r);\n}\n}\nint r1 = r+1;\nfor(int k = 0; k < windowSize; k++) {\nreadPixelsAt(-r1, k-r);\nreadPixelsAt( r1, k-r);\nreadPixelsAt(k-r,-r1);\nreadPixelsAt(k-r, r1);\n}\nreadPixelsAt(-r1,-r1);\nreadPixelsAt( r1,-r1);\nreadPixelsAt(-r1, r1);\nreadPixelsAt( r1, r1);\n}\nvec2 computeDerivatives(int imageCode, ivec2 offset)\n{\nconst mat3 dx = mat3(\n3, 0, -3,\n10, 0, -10,\n3, 0, -3\n);\nconst mat3 dy = mat3(\n3, 10, 3,\n0, 0, 0,\n-3, -10, -3\n);\nint indexOffset = imageCode * MAX_WINDOW_SIZE_PLUS_SQUARED;\nmat3 window = mat3(\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y-1)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+0)],\n0.0f,\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+0)],\npixelBuffer[indexOffset + pixelIndex(offset.x-1, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+0, offset.y+1)],\npixelBuffer[indexOffset + pixelIndex(offset.x+1, offset.y+1)]\n);\nmat3 fx = matrixCompMult(dx, window);\nmat3 fy = matrixCompMult(dy, window);\nconst vec3 ones = vec3(1.0f);\nreturn vec2(\ndot(fx[0], ones) + dot(fx[1], ones) + dot(fx[2], ones),\ndot(fy[0], ones) + dot(fy[1], ones) + dot(fy[2], ones)\n);\n}\nfloat readBufferedPixel(int imageCode, ivec2 offset)\n{\nivec2 limit = ivec2(windowRadius());\noffset = clamp(offset, -limit, limit);\nint indexOffset = imageCode * MAX_WINDOW_SIZE_PLUS_SQUARED;\nreturn pixelBuffer[indexOffset + pixelIndex(offset.x, offset.y)];\n}\nfloat readBufferedSubpixel(int imageCode, vec2 offset)\n{\nivec2 p = ivec2(floor(offset));\nvec2 frc = fract(offset);\nvec2 ifrc = vec2(1.0f) - frc;\nvec4 pix4 = vec4(\nreadBufferedPixel(imageCode, p),\nreadBufferedPixel(imageCode, ivec2(p.x + 1, p.y)),\nreadBufferedPixel(imageCode, ivec2(p.x, p.y + 1)),\nreadBufferedPixel(imageCode, ivec2(p.x + 1, p.y + 1))\n);\nreturn dot(vec4(\npix4.x * ifrc.x * ifrc.y,\npix4.y * frc.x * ifrc.y,\npix4.z * ifrc.x * frc.y,\npix4.w * frc.x * frc.y\n), vec4(1.0f));\n}\nivec2 computeMismatch(highp vec2 pyrGuess, highp vec2 localGuess)\n{\nint timeDerivative;\nivec2 mismatch = ivec2(0);\nint x, y, r = windowRadius();\nhighp vec2 d = pyrGuess + localGuess;\nfor(int _y = 0; _y < windowSize; _y++) {\nfor(int _x = 0; _x < windowSize; _x++) {\nx = _x - r; y = _y - r;\ntimeDerivative = int(round(255.0f * (\nreadBufferedSubpixel(NEXT_IMAGE, vec2(x, y) + d) -\nreadBufferedPixel(PREV_IMAGE, ivec2(x, y))\n)));\nmismatch += derivativesAt(x, y) * timeDerivative;\n}\n}\nreturn mismatch;\n}\nvec4 encodeFlow(vec2 flow)\n{\nreturn vec4(encodeFloat16(flow.x), encodeFloat16(flow.y));\n}\nvec2 decodeFlow(vec4 pix)\n{\nreturn vec2(decodeFloat16(pix.rg), decodeFloat16(pix.ba));\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedFlow);\nivec2 thread = threadLocation();\nfloat windowArea = float(windowSize * windowSize);\nint r = windowRadius();\nint keypointIndex = thread.x + thread.y * outputSize().x;\nint pixelsPerKeypoint = sizeofEncodedKeypoint(descriptorSize, extraSize) / 4;\nKeypointAddress address = KeypointAddress(keypointIndex * pixelsPerKeypoint, 0);\nKeypoint keypoint = decodeKeypoint(prevKeypoints, encoderLength, address);\ncolor = encodeFlow(vec2(0.0f));\nif(isBadKeypoint(keypoint))\nreturn;\nhighp vec2 pyrGuess = (level < depth - 1) ? decodeFlow(pixel) : vec2(0.0f);\nreadWindow(keypoint.position, float(level));\nivec2 derivatives;\nivec3 harris3i = ivec3(0);\nfor(int j = 0; j < windowSize; j++) {\nfor(int i = 0; i < windowSize; i++) {\nderivatives = ivec2(floor(255.0f * computeDerivatives(PREV_IMAGE, ivec2(i-r, j-r))));\nharris3i += ivec3(\nderivatives.x * derivatives.x,\nderivatives.x * derivatives.y,\nderivatives.y * derivatives.y\n);\nderivativesAt(i-r, j-r) = derivatives;\n}\n}\nhighp vec3 harris = vec3(harris3i) * FLT_SCALE;\nhighp float det = harris.x * harris.z - harris.y * harris.y;\nhighp float invDet = 1.0f / det;\nhighp mat2 invHarris = mat2(harris.z, -harris.y, -harris.y, harris.x);\nhighp float minEigenvalue = 0.5f * ((harris.x + harris.z) - sqrt(\n(harris.x - harris.z) * (harris.x - harris.z) + 4.0f * (harris.y * harris.y)\n));\nint niceNumbers = int(det >= FLT_EPSILON && minEigenvalue >= discardThreshold * windowArea);\nbool goodKeypoint = (level > 0) || (niceNumbers != 0);\nhighp float eps2 = epsilon * epsilon;\nhighp vec2 mismatch, delta, localGuess = vec2(0.0f);\nfor(int k = 0; k < numberOfIterations; k++) {\nmismatch = vec2(computeMismatch(pyrGuess, localGuess)) * FLT_SCALE;\ndelta = mismatch * invHarris * invDet;\nniceNumbers &= int(step(eps2, dot(delta, delta)));\nlocalGuess += niceNumbers != 0 ? delta : vec2(0.0f);\n}\npyrGuess = 2.0f * (pyrGuess + localGuess);\nvec2 opticalFlow = goodKeypoint ? pyrGuess : vec2(INFINITY);\ncolor = encodeFlow(opticalFlow);\n}'},function(e,t){e.exports='@include "keypoints.glsl"\n@include "float16.glsl"\nuniform sampler2D encodedFlow;\nuniform sampler2D encodedKeypoints;\nuniform int descriptorSize;\nuniform int extraSize;\nuniform int encoderLength;\nvec2 decodeFlow(vec4 pix)\n{\nreturn vec2(decodeFloat16(pix.rg), decodeFloat16(pix.ba));\n}\nvoid main()\n{\nvec4 pixel = threadPixel(encodedKeypoints);\nivec2 thread = threadLocation();\nKeypointAddress myAddress = findKeypointAddress(thread, encoderLength, descriptorSize, extraSize);\nKeypoint keypoint = decodeKeypoint(encodedKeypoints, encoderLength, myAddress);\nint myIndex = findKeypointIndex(myAddress, descriptorSize, extraSize);\nint len = textureSize(encodedFlow, 0).x;\nivec2 location = ivec2(myIndex % len, myIndex / len);\nvec4 targetPixel = pixelAt(encodedFlow, location);\nvec2 flow = decodeFlow(targetPixel);\nvec4 encodedPosition = any(isinf(flow)) ? encodeKeypointPositionAtInfinity() : encodeKeypointPosition(\nkeypoint.position + flow\n);\ncolor = myAddress.offset == 0 ? encodedPosition : pixel;\n}'},function(e,t){e.exports='@include "subpixel.glsl"\nuniform sampler2D image;\nvoid main()\n{\nvec2 imageSize = vec2(textureSize(image, 0));\n#if !defined(INTERPOLATION_METHOD)\n#error Must define INTERPOLATION_METHOD\n#elif INTERPOLATION_METHOD == 0\nvec2 pos = texCoord * imageSize;\ncolor = textureLod(image, (round(pos) + vec2(0.5f)) / imageSize, 0.0f);\n#elif INTERPOLATION_METHOD == 1\ncolor = subpixelAtBI(image, texCoord * imageSize);\n#else\n#error Invalid INTERPOLATION_METHOD\n#endif\n}'},function(e,t){e.exports='@include "subpixel.glsl"\nuniform sampler2D image;\nuniform mat3 inverseHomography;\nconst vec4 emptyColor = vec4(0.0f, 0.0f, 0.0f, 1.0f);\nvec2 perspectiveWarp(mat3 homography, vec2 p)\n{\nvec3 q = homography * vec3(p, 1.0f);\nreturn q.xy / q.z;\n}\nvoid main()\n{\nivec2 location = threadLocation();\nivec2 size = outputSize();\nconst vec2 zero = vec2(0.0f);\nvec2 target = perspectiveWarp(inverseHomography, vec2(location));\nbool withinBounds = all(bvec4(greaterThanEqual(target, zero), lessThan(target, vec2(size))));\ncolor = withinBounds ? subpixelAtBI(image, target) : emptyColor;\n}'},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D dest, src;\nuniform int destComponents;\nuniform int srcComponentId;\nvoid main()\n{\nvec4 destPixel = threadPixel(dest);\nvec4 srcPixel = threadPixel(src);\nbvec4 flags = bvec4(\n(destComponents & PIXELCOMPONENT_RED) != 0,\n(destComponents & PIXELCOMPONENT_GREEN) != 0,\n(destComponents & PIXELCOMPONENT_BLUE) != 0,\n(destComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(destPixel, vec4(srcPixel[srcComponentId]), flags);\n}'},function(e,t){e.exports='@include "colors.glsl"\nuniform sampler2D image;\nuniform int pixelComponents;\nuniform float value;\nvoid main()\n{\nvec4 pixel = threadPixel(image);\nbvec4 flags = bvec4(\n(pixelComponents & PIXELCOMPONENT_RED) != 0,\n(pixelComponents & PIXELCOMPONENT_GREEN) != 0,\n(pixelComponents & PIXELCOMPONENT_BLUE) != 0,\n(pixelComponents & PIXELCOMPONENT_ALPHA) != 0\n);\ncolor = mix(pixel, vec4(value), flags);\n}'},function(e,t){e.exports="uniform float value;\nvoid main()\n{\ncolor = vec4(value);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main() {\nivec2 pos = threadLocation();\npos.y = int(texSize.y) - 1 - pos.y;\ncolor = pixelAt(image, pos);\n}"},function(e,t){e.exports="uniform sampler2D image;\nvoid main()\n{\ncolor = threadPixel(image);\n}"},function(e,t){e.exports="uniform sampler2D image;\nuniform int iterationNumber;\nvoid main()\n{\nivec2 thread = threadLocation();\nivec2 last = outputSize() - ivec2(1);\nint jump = (1 << iterationNumber);\nint clusterLength = jump << 1;\nint clusterMask = clusterLength - 1;\nivec2 clusterPos = ivec2(thread >> (1 + iterationNumber)) << (1 + iterationNumber);\nivec2 next1 = clusterPos + ((thread - clusterPos + ivec2(jump, 0)) & clusterMask);\nivec2 next2 = clusterPos + ((thread - clusterPos + ivec2(0, jump)) & clusterMask);\nivec2 next3 = clusterPos + ((thread - clusterPos + ivec2(jump, jump)) & clusterMask);\nvec4 p0 = texelFetch(image, thread, 0);\nvec4 p1 = texelFetch(image, min(next1, last), 0);\nvec4 p2 = texelFetch(image, min(next2, last), 0);\nvec4 p3 = texelFetch(image, min(next3, last), 0);\nvec4 pmax = max(max(p0, p1), max(p2, p3));\nvec4 pmin = min(min(p0, p1), min(p2, p3));\ncolor = vec4(pmax.r, pmin.g, pmax.r - pmin.g, p0.a);\n}"},function(e,t,n){"use strict";function i(e,t,n){}function r(e,t,n){const{rows:i,columns:r,stride:s}=e,{value:o}=e.custom,a=t.length;if(i*r!=a)for(let e=0;e<r;e++)t.fill(o,e*s,e*s+i);else t.fill(o,0,a)}function s(e,t,n){const{rows:i,columns:r,stride:s}=e,[o]=e.strideOfInputs,[a]=n,c=t.length;if(c==e.lengthOfInputs[0]&&i*r==c)return void t.set(a,0,c);let l,h,d,u;for(d=u=h=0;h<r;h++,d+=s,u+=o)for(l=0;l<i;l++)t[d+l]=a[u+l]}function o(e,t,n){const{rows:i,columns:r,stride:s}=e,[o]=e.strideOfInputs,[a]=n;let c,l,h,d;for(h=c=0;c<i;c++,h+=o)for(d=l=0;l<r;l++,d+=s)t[d+c]=a[h+l]}function a(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=n;let h,d,u,p,f;for(p=f=u=d=0;d<r;d++,u+=s,f+=a,p+=o)for(h=0;h<i;h++)t[u+h]=c[p+h]+l[f+h]}function c(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=n;let h,d,u,p,f;for(p=f=u=d=0;d<r;d++,u+=s,f+=a,p+=o)for(h=0;h<i;h++)t[u+h]=c[p+h]-l[f+h]}function l(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.columnsOfInputs,[c,l]=e.strideOfInputs,[h,d]=n,u=t.length;if(i*r!=u)for(let e=0;e<r;e++)t.fill(0,e*s,e*s+i);else t.fill(0,0,u);let p,f,m,_,g,v,x;for(_=v=m=0;m<a;m++,_+=s,v+=l)for(g=f=0;f<o;f++,g+=c)for(x=d[v+f],p=0;p<i;p++)t[_+p]+=h[g+p]*x}function h(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.columnsOfInputs,[c,l]=e.rowsOfInputs,[h,d]=e.strideOfInputs,[u,p]=n;let f,m,_,g,v,x,y;for(x=v=_=0;_<a;_++,x+=s,v+=d)for(g=m=0;m<o;m++,g+=h)for(t[y=x+m]=0,f=0;f<l;f++)t[y]+=u[g+f]*p[v+f]}function d(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.columnsOfInputs,[c,l]=e.rowsOfInputs,[h,d]=e.strideOfInputs,[u,p]=n,f=t.length;if(i*r!=f)for(let e=0;e<r;e++)t.fill(0,e*s,e*s+i);else t.fill(0,0,f);let m,_,g,v,x,y,S;for(x=y=_=0;_<o;_++,x+=h,y+=d)for(v=g=0;g<l;g++,v+=s)for(S=p[y+g],m=0;m<i;m++)t[v+m]+=u[x+m]*S}function u(e,t,n){const{stride:i}=e,[r,s]=n,[o,a]=e.strideOfInputs,c=o+o,l=a+a,h=i+i,d=r[0],u=r[0+o],p=r[0+c],f=r[1],m=r[1+o],_=r[1+c],g=r[2],v=r[2+o],x=r[2+c],y=s[0],S=s[0+a],w=s[0+l],b=s[1],A=s[1+a],E=s[1+l],O=s[2],I=s[2+a],M=s[2+l];t[0]=d*y+u*b+p*O,t[1]=f*y+m*b+_*O,t[2]=g*y+v*b+x*O,t[0+i]=d*S+u*A+p*I,t[1+i]=f*S+m*A+_*I,t[2+i]=g*S+v*A+x*I,t[0+h]=d*w+u*E+p*M,t[1+h]=f*w+m*E+_*M,t[2+h]=g*w+v*E+x*M}function p(e,t,n){const[i]=e.rowsOfInputs,[r]=e.columnsOfInputs,[s]=e.strideOfInputs,[o,a]=n;let c,l,h,d;for(t.fill(0,0,i),h=l=0;l<r;l++,h+=s)for(d=a[l],c=0;c<i;c++)t[c]+=o[h+c]*d}function f(e,t,n){const{rows:i,columns:r,stride:s}=e,{scalar:o}=e.custom,[a]=n;let c,l,h;for(l=0;l<r;l++)for(h=l*s,c=0;c<i;c++)t[h+c]=a[h+c]*o}function m(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=n;let h,d,u,p,f;for(p=f=u=d=0;d<r;d++,u+=s,p+=o,f+=a)for(h=0;h<i;h++)t[u+h]=c[p+h]*l[f+h]}function _(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,[c,l]=n;let h,d,u,p,f;for(f=p=d=0;d<r;d++,p+=s,f+=a)for(u=l[f],h=0;h<i;h++)t[p+h]=c[h]*u}function g(e,t,n){const{rows:i,columns:r,stride:s}=e,[o,a]=e.strideOfInputs,{alpha:c,beta:l}=e.custom,[h,d]=n;let u,p,f,m,_;for(m=_=f=p=0;p<r;p++,f+=s,m+=o,_+=a)for(u=0;u<i;u++)t[f+u]=c*h[m+u]+l*d[_+u]}n.r(t),n.d(t,"nop",(function(){return i})),n.d(t,"fill",(function(){return r})),n.d(t,"copy",(function(){return s})),n.d(t,"transpose",(function(){return o})),n.d(t,"add",(function(){return a})),n.d(t,"subtract",(function(){return c})),n.d(t,"multiply",(function(){return l})),n.d(t,"multiplylt",(function(){return h})),n.d(t,"multiplyrt",(function(){return d})),n.d(t,"multiply3",(function(){return u})),n.d(t,"multiplyvec",(function(){return p})),n.d(t,"scale",(function(){return f})),n.d(t,"compmult",(function(){return m})),n.d(t,"outer",(function(){return _})),n.d(t,"addInPlace",(function(){return g}))},function(e,t,n){"use strict";function i(e,t,n){t[0]=1/n[0][0]}function r(e,t,n){const i=e.stride,r=e.strideOfInputs[0],s=n[0],o=s[0],a=s[1],c=s[0+r],l=s[1+r],h=1/(o*l-c*a);t[0]=l*h,t[1]=-a*h,t[0+i]=-c*h,t[1+i]=o*h}function s(e,t,n){const i=e.stride,r=e.strideOfInputs[0],s=n[0],o=s[0],a=s[1],c=s[2],l=s[0+r],h=s[1+r],d=s[2+r],u=s[0+r+r],p=s[1+r+r],f=s[2+r+r],m=f*h-d*p,_=f*l-d*u,g=p*l-h*u,v=1/(o*m-a*_+c*g),x=i+i;t[0]=m*v,t[1]=-(f*a-c*p)*v,t[2]=(d*a-c*h)*v,t[0+i]=-_*v,t[1+i]=(f*o-c*u)*v,t[2+i]=-(d*o-c*l)*v,t[0+x]=g*v,t[1+x]=-(p*o-a*u)*v,t[2+x]=(h*o-a*l)*v}n.r(t),n.d(t,"inverse1",(function(){return i})),n.d(t,"inverse2",(function(){return r})),n.d(t,"inverse3",(function(){return s}))},function(e,t,n){"use strict";function i(e,t,n){const{rows:i,columns:r}=e,[s]=n,[o]=e.rowsOfInputs,[a]=e.columnsOfInputs,[c]=e.strideOfInputs;if(a!==o+1)throw new Error(`Invalid input for backsub: expected ${o} x ${o+1} or ${a-1} x ${a} matrix, but found ${o} x ${a} matrix`);if(i!==o||1!==r)throw new Error(`Invalid output for backsub: expected ${o} x 1 matrix, but found ${i} x ${r} matrix`);const l=o,h=t,d=s.subarray(0,c),u=s.subarray(c);let p,f,m,_=(l-1)*c;for(h[l-1]=d[l-1]/u[_+(l-1)],f=l-2;f>=0;f--){for(h[f]=d[f],p=f+1;p<l;p++)h[f]-=h[p]*u[c*p+f];_-=c,m=u[_+f],h[f]/=m}}function r(e,t,n){const{stride:i,dtype:r}=e,[s,o]=[e.rowsOfInputs[0],e.columnsOfInputs[0]],[a,c]=n,[l,h]=e.strideOfInputs,d=this.createTypedArray(r,s*(o+1));this.run(this.qr,r,[s,o+1,s,s,o,l,s,1,h],[d,a,c],{mode:"reduced-Q'x"}),this.runWithBlocks(this.backsub,r,[0,o-1,0,0,i,0,o-1,0,o,s],[t,d])}n.r(t),n.d(t,"backsub",(function(){return i})),n.d(t,"lssolve",(function(){return r}))},function(e,t,n){"use strict";function i(e,t,n){const{stride:i,dtype:r}=e,[s,o]=[e.rows,e.columns],[a,c]=e.rowsOfInputs,[l,h]=e.columnsOfInputs,[d]=e.strideOfInputs,[u,p]=n,{mode:f}=e.custom,m="full-qr"==f||"reduced-qr"==f,_=this.createTypedArray(r,2*a*l+l),g=_.subarray(0,a*l),v=_.subarray(a*l,a*l+l),x=_.subarray(a*l+l,2*a*l+l),y=i,S=m?t.subarray(("reduced-qr"==f?l:a)*i):t.subarray(i);if(a<l)throw new Error(`Can't compute the QR decomposition of a ${a} x ${l} matrix`);if(s!=a)throw new Error(`Can't compute the QR decomposition of a ${a} x ${l} matrix: expected an output matrix of ${a} rows, but found a matrix of ${s} rows`);let w,b,A,E,O,I,M,X;for(u.length!=S.length?this.runWithBlocks(this.copy,r,[0,a-1,0,l-1,y,0,a-1,0,l-1,d],[S,u]):S.set(u,0,u.length),A=0;A<l;A++){for(M=A*a+A,X=A*y+A,E=a-A,I=+(S[X]>=0)-+(S[X]<0),w=0;w<E;w++)g[M+w]=S[X+w];for(g[M]+=I*this.norm2(g,M,E),O=this.norm2(g,M,E),w=M+E-1;w>=M;w--)g[w]/=O;this.runWithBlocks(this.multiplylt,r,[0,0,0,l-A-1,1,A,a-1,A,A,a,A,a-1,A,l-1,y],[v,g,S]),this.runWithBlocks(this.outer,r,[0,a-A-1,0,l-A-1,a,A,a-1,A,A,a,0,0,0,l-A-1,1],[x,g,v]),this.runWithBlocks(this.addInPlace,r,[A,a-1,A,l-1,y,A,a-1,A,l-1,y,0,a-A-1,0,l-A-1,a],[S,S,x],{alpha:1,beta:-2})}switch(f){case"full-qr":{const e=i,n=t.subarray(0,e*a).fill(0);let r,c,h;if(s!=a||o!=l+a)throw new Error(`Can't compute the full QR decomposition of a ${a} x ${l} matrix: expected an output matrix of size ${a} x ${l+a}, found ${s} x ${o}`);for(b=0;b<a;b++)for(c=b*e,n[c+b]=1,A=l-1;A>=0;A--)for(r=A*a,h=-2*this.dot(n,g,c+A,r+A,a-A),w=a-1;w>=A;w--)n[c+w]+=h*g[r+w];break}case"reduced-qr":{const e=i,n=t.subarray(0,e*l).fill(0);let r,c,h;if(s!=a||o!=l+l)throw new Error(`Can't compute the reduced QR decomposition of a ${a} x ${l} matrix: expected an output matrix of size ${a} x ${l+l}, found ${s} x ${o}`);for(b=0;b<l;b++)for(c=b*e,n[c+b]=1,A=l-1;A>=0;A--)for(r=A*a,h=-2*this.dot(n,g,c+A,r+A,a-A),w=a-1;w>=A;w--)n[c+w]+=h*g[r+w];break}case"Q'x":{const e=i,n=t.subarray(0,e),r=a,d=l;let u,f;if(r!=c||1!=h)throw new Error(`QR decomposition: the input vector is expected to be ${r} x 1, but is ${c} x ${h}`);if(r!=s||1+d!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${r} x ${1+d}, but is ${s} x ${o}`);for(w=0;w<r;w++)n[w]=p[w];for(A=0;A<d;A++)for(u=A*a,f=-2*this.dot(n,g,A,u+A,r-A),w=A;w<r;w++)n[w]+=f*g[u+w];break}case"Qx":{const e=i,n=t.subarray(0,e),r=a,d=l;let u,f;if(r!=c||1!=h)throw new Error(`QR decomposition: the input vector is expected to be ${r} x 1, but is ${c} x ${h}`);if(r!=s||1+d!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${r} x ${1+d}, but is ${s} x ${o}`);for(w=0;w<r;w++)n[w]=p[w];for(A=d-1;A>=0;A--)for(u=A*a,f=-2*this.dot(n,g,A,u+A,r-A),w=A;w<r;w++)n[w]+=f*g[u+w];break}case"reduced-Q'x":{const e=a,n=l,i=t.subarray(0,n),r=x.subarray(0,e);let d,u;if(e!=c||1!=h)throw new Error(`QR decomposition: the input vector is expected to be ${e} x 1, but is ${c} x ${h}`);if(e!=s||1+n!=o)throw new Error(`QR decomposition: the output matrix is expected to be ${e} x ${1+n}, but is ${s} x ${o}`);for(b=0;b<n;b++){for(r.fill(0),r[b]=1,A=n-1;A>=0;A--)for(d=A*a,u=-2*this.dot(r,g,A,d+A,e-A),w=e-1;w>=A;w--)r[w]+=u*g[d+w];i[b]=this.dot(p,r,0,0,e)}break}default:throw new Error(`QR decomposition: unknown mode "${f}"`)}}n.r(t),n.d(t,"qr",(function(){return i}))},function(e,t,n){"use strict";function i(e,t,n){this.subroutine("sequence",e,n)}n.r(t),n.d(t,"sequence",(function(){return i}))},function(e,t,n){"use strict";function i(e,t,n){const[i,r,s,o]=n,{rows:a,columns:c,stride:l}=e,[h,d,u]=e.strideOfInputs,[p,f]=[e.rowsOfInputs[1],e.columnsOfInputs[1]],[m,_]=[e.rowsOfInputs[2],e.columnsOfInputs[2]],[g,v]=[n[0].length,n[2].length],x=c/_,y=u===h&&v===g?Array.from({length:x},(e,t)=>i.subarray(t*h*_,(t+1)*h*_)):null;let S,w,b,A,E;for(S=0;S<x;S++){if(null!=y)n[2]=y[S];else for(E=0,A=S*h*_,b=0;b<_;b++,E+=u,A+=h)for(w=0;w<m;w++)s[E+w]=i[A+w];for(o[0]=S,this.subroutine("mapfn",e,n),E=S*f*l,A=0,b=0;b<f;b++,E+=l,A+=d)for(w=0;w<p;w++)t[E+w]=r[A+w]}n[2]=s}function r(e,t,n){const[i,r,s,o,a,c]=n,{rows:l,columns:h,stride:d}=e,[u,p,f,m,_,g]=e.strideOfInputs,[v,x,y,S,w,b]=n.map(e=>e.length),[A,E]=[e.rowsOfInputs[3],e.columnsOfInputs[3]],O=t.length,I=f===g&&y===b,M=f===p&&y===x,X=f===d&&y===O,L=m===u&&S===v,k=e.columnsOfInputs[0]/E,P=L?Array.from({length:k},(e,t)=>i.subarray(t*u*E,(t+1)*u*E)):null;let T,z,R,C,N;if(I)s.set(c);else for(N=0,C=0,R=0;R<h;R++,C+=g,N+=f)for(z=0;z<l;z++)s[N+z]=c[C+z];for(T=0;T<k;T++){if(null!=P)n[3]=P[T];else for(N=0,C=T*u*E,R=0;R<E;R++,N+=m,C+=u)for(z=0;z<A;z++)o[N+z]=i[C+z];if(a[0]=T,this.subroutine("reducefn",e,n),M)s.set(r);else for(N=0,C=0,R=0;R<h;R++,C+=p,N+=f)for(z=0;z<l;z++)s[N+z]=r[C+z]}if(X)t.set(s);else for(N=0,C=0,R=0;R<h;R++,C+=f,N+=d)for(z=0;z<l;z++)t[N+z]=s[C+z];n[3]=o}function s(e,t,n){const[i,r,s,o]=n,{rows:a,columns:c,stride:l}=e,[h,d,u,p]=e.strideOfInputs,[f,m,_,g]=n.map(e=>e.length),[v,x]=[e.rowsOfInputs[2],e.columnsOfInputs[2]],y=c/x,S=u===h&&_===f&&(p===h&&g===f)?Array.from({length:y},(e,t)=>i.subarray(t*h*x,(t+1)*h*x)):null,w=this.range(y),b=new Array(y).fill(0);let A,E,O,I,M,X,L,k,P=-1,T=0,z=0,R=0,C=0;for(b[++P]=0,b[++P]=y-1;P>=0;){if(z=b[P--],T=b[P--],R=T+z>>>1,C=w[R],null!=S)n[3]=S[C];else for(O=0,I=C*h*x,E=0;E<x;E++,O+=p,I+=h)for(A=0;A<v;A++)o[O+A]=i[I+A];for(M=T-1,X=z+1;;){do{if(M++,null!=S)n[2]=S[w[M]];else for(O=0,I=w[M]*h*x,E=0;E<x;E++,O+=u,I+=h)for(A=0;A<v;A++)s[O+A]=i[I+A];this.subroutine("cmp",e,n)}while(r[0]<0&&M<z);do{if(X--,null!=S)n[2]=S[w[X]];else for(O=0,I=w[X]*h*x,E=0;E<x;E++,O+=u,I+=h)for(A=0;A<v;A++)s[O+A]=i[I+A];this.subroutine("cmp",e,n)}while(r[0]>0&&X>T);if(!(M<X))break;k=w[M],w[M]=w[X],w[X]=k}R=X,T<R&&(b[++P]=T,b[++P]=R),z>R+1&&(b[++P]=R+1,b[++P]=z)}for(X=0;X<y;X++)for(L=w[X]*x,O=X*x*l,I=L*h,E=0;E<x;E++,O+=l,I+=h)for(A=0;A<v;A++)t[O+A]=i[I+A];n[2]=s,n[3]=o}n.r(t),n.d(t,"map",(function(){return i})),n.d(t,"reduce",(function(){return r})),n.d(t,"sort",(function(){return s}))},function(e,t,n){"use strict";function i(e,t,n){const i=e.stride,r=e.strideOfInputs[0],s=e.strideOfInputs[1],o=n[0],a=n[1],c=1e-6;let l,h,d,u,p,f,m,_,g,v,x,y,S,w,b,A,E,O,I,M,X,L,k,P,T,z,R,C,N,F,D,K,j,$,B;const q=o[0],U=o[1],G=o[0+r],Y=o[1+r],W=o[0+2*r],H=o[1+2*r],Q=o[0+3*r],V=o[1+3*r],Z=a[0],J=a[1],ee=a[0+s],te=a[1+s],ne=a[0+2*s],ie=a[1+2*s],re=a[0+3*s],se=a[1+3*s];R=C=N=F=D=K=j=$=B=Number.NaN;do{const e=(Q-q)*(Y-U)-(V-U)*(G-q),t=(Q-q)*(H-U)-(V-U)*(W-q),n=(G-q)*(H-U)-(Y-U)*(W-q),i=(Q-G)*(H-Y)-(V-Y)*(W-G),r=-e;if(Math.abs(e)<c||Math.abs(t)<c||Math.abs(n)<c||Math.abs(i)<c)break;if(l=W*e-G*t,h=H*e-Y*t,d=Q*n-W*r,u=V*n-H*r,p=t-e,f=r-n,m=l*u-h*d,Math.abs(m)<c)break;if(_=1/m,b=(u*p-h*f)*_,A=(l*f-d*p)*_,Math.abs(e)>Math.abs(t)?(g=(1+b*G+A*Y)*(V-U)/-e,v=(1+b*G+A*Y)*(Q-q)/e):(g=(1+b*W+A*H)*(V-U)/-t,v=(1+b*W+A*H)*(Q-q)/t),Math.abs(n)>Math.abs(r)?(y=(1+b*W+A*H)*(Y-U)/-n,S=(1+b*W+A*H)*(G-q)/n):(y=(1+b*Q+A*V)*(Y-U)/-r,S=(1+b*Q+A*V)*(G-q)/r),x=-g*q-v*U,w=-y*q-S*U,E=1,m=g*S*1+v*w*b+x*y*A-v*y*1-g*w*A-x*S*b,Math.abs(m)<c)break;if(l=ee-ne,h=re-ne,d=te-ie,u=se-ie,p=Z-ee+(ne-re),f=J-te+(ie-se),m=l*u-h*d,Math.abs(m)<c)break;if(_=1/m,P=(u*p-h*f)*_,T=(l*f-d*p)*_,O=P*ee+(ee-Z),I=T*re+(re-Z),M=Z,X=P*te+(te-J),L=T*se+(se-J),k=J,z=1,m=O*L*1+I*k*P+M*X*T-I*X*1-O*k*T-M*L*P,Math.abs(m)<c)break;R=O*g+I*y+M*b,C=O*v+I*S+M*A,N=O*x+I*w+1*M,F=X*g+L*y+k*b,D=X*v+L*S+k*A,K=X*x+L*w+1*k,j=P*g+T*y+1*b,$=P*v+T*S+1*A,B=P*x+T*w+1}while(0);t[0]=R,t[1]=F,t[2]=j,t[0+i]=C,t[1+i]=D,t[2+i]=$,t[0+2*i]=N,t[1+2*i]=K,t[2+2*i]=B}function r(e,t,n){const i=e.stride,r=e.strideOfInputs[0],s=e.strideOfInputs[1],o=2*i,a=2*r,c=3*r,l=2*s,h=3*s,d=n[0],u=n[1],p=d[0],f=d[1],m=d[0+r],_=d[1+r],g=d[0+a],v=d[1+a],x=d[0+c],y=d[1+c],S=u[0],w=u[1],b=u[0+s],A=u[1+s],E=u[0+l],O=u[1+l],I=u[0+h],M=u[1+h],X=.25*(p+m+g+x),L=.25*(f+_+v+y),k=.25*(S+b+E+I),P=.25*(w+A+O+M),T=(p-X)*(p-X)+(f-L)*(f-L)+(m-X)*(m-X)+(_-L)*(_-L)+(g-X)*(g-X)+(v-L)*(v-L)+(x-X)*(x-X)+(y-L)*(y-L),z=(S-k)*(S-k)+(w-P)*(w-P)+(b-k)*(b-k)+(A-P)*(A-P)+(E-k)*(E-k)+(O-P)*(O-P)+(I-k)*(I-k)+(M-P)*(M-P),R=Math.sqrt(8/T),C=Math.sqrt(8/z);d[0]=R*(p-X),d[1]=R*(f-L),d[0+r]=R*(m-X),d[1+r]=R*(_-L),d[0+a]=R*(g-X),d[1+a]=R*(v-L),d[0+c]=R*(x-X),d[1+c]=R*(y-L),u[0]=C*(S-k),u[1]=C*(w-P),u[0+s]=C*(b-k),u[1+s]=C*(A-P),u[0+l]=C*(E-k),u[1+l]=C*(O-P),u[0+h]=C*(I-k),u[1+h]=C*(M-P),this.homography4p(e,t,n),d[0]=p,d[1]=f,d[0+r]=m,d[1+r]=_,d[0+a]=g,d[1+a]=v,d[0+c]=x,d[1+c]=y,u[0]=S,u[1]=w,u[0+s]=b,u[1+s]=A,u[0+l]=E,u[1+l]=O,u[0+h]=I,u[1+h]=M;const N=t[0],F=t[0+i],D=t[0+o],K=t[1],j=t[1+i],$=t[1+o],B=t[2],q=t[2+i],U=R,G=1/C,Y=t[2+o]-U*(X*B+L*q);t[0]=U*(G*N+k*B),t[1]=U*(G*K+P*B),t[2]=U*B,t[0+i]=U*(G*F+k*q),t[1+i]=U*(G*j+P*q),t[2+i]=U*q,t[0+o]=k*Y+G*(D-U*(X*N+L*F)),t[1+o]=P*Y+G*($-U*(X*K+L*j)),t[2+o]=Y}function s(e,t,n){const i=e.dtype,r=e.columnsOfInputs[0],s=n[0],o=n[1],a=e.stride,c=e.strideOfInputs[0],l=e.strideOfInputs[1],h=2*r,d=this.createTypedArray(i,16*r).fill(0),u=this.createTypedArray(i,2*r),p=this.createTypedArray(i,8);let f,m,_,g,v,x,y,S,w,b,A,E,O,I,M,X,L,k;for(y=0,S=0,x=0,v=0;v<r;v++,x+=2,y+=c,S+=l)f=s[y+0],m=s[y+1],_=o[S+0],g=o[S+1],d[0+x]=f,d[h+0+x]=m,d[2*h+0+x]=1,d[3*h+1+x]=f,d[4*h+1+x]=m,d[5*h+1+x]=1,d[6*h+0+x]=-f*_,d[6*h+1+x]=-f*g,d[7*h+0+x]=-m*_,d[7*h+1+x]=-m*g,u[0+x]=_,u[1+x]=g;this.run(this.lssolve,i,[8,1,8,2*r,8,2*r,2*r,1,2*r],[p,d,u]),w=p[0],b=p[1],A=p[2],E=p[3],O=p[4],I=p[5],M=p[6],X=p[7],L=1,k=w*O*L+b*I*M+A*E*X-b*E*L-w*I*X-A*O*M,(Number.isNaN(k)||Math.abs(k)<1e-6)&&(w=b=A=E=O=I=M=X=L=Number.NaN);const P=a+a;t[0]=w,t[1]=E,t[2]=M,t[a+0]=b,t[a+1]=O,t[a+2]=X,t[P+0]=A,t[P+1]=I,t[P+2]=L}function o(e,t,n){const{dtype:i,stride:r}=e,s=e.columnsOfInputs[0],o=e.strideOfInputs[0],a=e.strideOfInputs[1],c=n[0],l=n[1],h=this.createTypedArray(i,4*s),d=this.createTypedArray(i,36),u=h.subarray(0,2*s),p=h.subarray(2*s,4*s),f=d.subarray(0,9),m=d.subarray(9,18),_=d.subarray(18,27),g=d.subarray(27,36),v=_,x=m;this.run(this.dltnorm2d,i,[2,s,2,2,s,o,3,3,3,3,3,3],[u,c,f,m]),this.run(this.dltnorm2d,i,[2,s,2,2,s,a,3,3,3,3,3,3],[p,l,_,g]),this.run(this.homographydlt,i,[3,3,3,2,s,2,2,s,2],[v,u,p]),this.run(this.multiply3,i,[3,3,3,3,3,3,3,3,3],[x,v,f]),this.run(this.multiply3,i,[3,3,r,3,3,3,3,3,3],[t,g,x])}function a(e,t,n){const i=e.stride,r=e.strideOfInputs[0],s=e.strideOfInputs[1],o=e.strideOfInputs[2],a=e.columnsOfInputs[0],c=n[0],l=n[1],h=n[2];let d=0,u=0,p=0,f=0,m=0,_=0,g=0,v=0,x=0,y=0;for(x=v=0;v<a;v++,x+=r)d+=c[x],u+=c[x+1];for(d/=a,u/=a,x=v=0;v<a;v++,x+=r)p=c[x]-d,f=c[x+1]-u,m+=p*p+f*f;m=Math.sqrt(m/a);const S=1.4142135623730951;_=S/m,g=m/S;const w=s+s;l[0]=_,l[0+s]=0,l[0+w]=-_*d,l[1]=0,l[1+s]=_,l[1+w]=-_*u,l[2]=0,l[2+s]=0,l[2+w]=1;const b=o+o;for(h[0]=g,h[0+o]=0,h[0+b]=d,h[1]=0,h[1+o]=g,h[1+b]=u,h[2]=0,h[2+o]=0,h[2+b]=1,y=0,x=0,v=0;v<a;v++,x+=r,y+=i)t[y]=_*(c[x]-d),t[y+1]=_*(c[x+1]-u)}n.r(t),n.d(t,"homography4p",(function(){return i})),n.d(t,"homographynorm4p",(function(){return r})),n.d(t,"homographydlt",(function(){return s})),n.d(t,"homographynormdlt",(function(){return o})),n.d(t,"dltnorm2d",(function(){return a}))},function(e,t,n){"use strict";function i(e,t,n){const{columns:i,stride:r}=e,[s,o]=n,[a,c]=e.strideOfInputs,l=a+a,h=s[0],d=s[1],u=s[2],p=s[0+a],f=s[1+a],m=s[2+a],_=s[0+l],g=s[1+l],v=s[2+l];let x,y,S,w,b,A;for(y=S=x=0;x<i;x++,y+=c,S+=r)w=o[y],b=o[y+1],A=u*w+m*b+v,t[S]=(h*w+p*b+_)/A,t[S+1]=(d*w+f*b+g)/A}function r(e,t,n){const{columns:i,stride:r}=e,[s,o]=n,[a,c]=e.strideOfInputs,l=a+a,h=s[0],d=s[1],u=s[0+a],p=s[1+a],f=s[0+l],m=s[1+l];let _,g,v,x,y;for(g=v=_=0;_<i;_++,g+=c,v+=r)x=o[g],y=o[g+1],t[v]=h*x+u*y+f,t[v+1]=d*x+p*y+m}function s(e,t,n){const{columns:i,stride:r}=e,[s,o]=n,[a,c]=e.strideOfInputs,l=s[0],h=s[1],d=s[0+a],u=s[1+a];let p,f,m,_,g;for(f=m=p=0;p<i;p++,f+=c,m+=r)_=o[f],g=o[f+1],t[m]=l*_+d*g,t[m+1]=h*_+u*g}n.r(t),n.d(t,"applyHomography",(function(){return i})),n.d(t,"applyAffine",(function(){return r})),n.d(t,"applyLinear2d",(function(){return s}))},function(e,t,n){"use strict";function i(e,t,n){const{dtype:i,rows:r,columns:s,stride:o}=e,a=n[0],c=n[1],l=n[2],h=e.columnsOfInputs[0],d=e.strideOfInputs[0],u=e.strideOfInputs[1],p=e.strideOfInputs[2],{numberOfHypotheses:f,bundleSize:m,reprojectionError:_}=e.custom,g=_*_,v=4*f,x=v+h-v%h,y=Array.from({length:x},(e,t)=>t%h),S=this.shuffle(this.range(h)),w=this.createTypedArray(i,9*f);function b(e){this.mat=e,this.err=0}const A=Array.from({length:f},(e,t)=>new b(w.subarray(9*t,9*(t+1)))),E=this.createTypedArray(i,8),O=this.createTypedArray(i,8),I=[E,O],M=this.run(null,i,[3,3,3,2,4,2,2,4,2],[A[0].mat,E,O]),X=(e,t)=>e.err-t.err,L=m;let k=f,P=0,T=0,z=0,R=0,C=0,N=0,F=0,D=0,K=0,j=0,$=0,B=0,q=0,U=0,G=0,Y=0,W=0,H=0,Q=0,V=A[0].mat,Z=0;for(T=0;T<x;T+=h)this.shuffle(y,T,T+h);for(P=0;P<k;P++)z=4*P,F=y[z],D=y[z+1],K=y[z+2],j=y[z+3],V=A[P].mat,E[0]=a[d*F+0],E[1]=a[d*F+1],E[2]=a[d*D+0],E[3]=a[d*D+1],E[4]=a[d*K+0],E[5]=a[d*K+1],E[6]=a[d*j+0],E[7]=a[d*j+1],O[0]=c[u*F+0],O[1]=c[u*F+1],O[2]=c[u*D+0],O[3]=c[u*D+1],O[4]=c[u*K+0],O[5]=c[u*K+1],O[6]=c[u*j+0],O[7]=c[u*j+1],this.homographynorm4p(M,V,I),Number.isNaN(V[0])&&(A[P].err=h,Z++);for(Z=Z<k?Z:k-1,A.sort(X),A.length=k-=Z,T=0;T<h&&(T%L==0&&k>1&&(A.sort(X),k>>>=1,A.length=k),1!=k);T++)for(F=S[T],Y=a[d*F+0],W=a[d*F+1],H=c[u*F+0],Q=c[u*F+1],P=0;P<k;P++)V=A[P].mat,q=V[2]*Y+V[5]*W+V[8],$=(V[0]*Y+V[3]*W+V[6])/q,B=(V[1]*Y+V[4]*W+V[7])/q,U=$-H,G=B-Q,A[P].err+=U*U+G*G>g|0;for(z=0,P=1;P<k;P++)A[P].err<A[z].err&&(z=P);V=A[z].mat;const J=V[0],ee=V[3],te=V[6],ne=V[1],ie=V[4],re=V[7],se=V[2],oe=V[5],ae=V[8],ce=[];for(R=0,C=0,N=0,z=0;z<h;z++,R+=d,C+=u,N+=p)Y=a[R+0],W=a[R+1],q=se*Y+oe*W+ae,$=(J*Y+ee*W+te)/q,B=(ne*Y+ie*W+re)/q,U=$-c[C+0],G=B-c[C+1],(l[N]=U*U+G*G<=g|0)&&ce.push(z);const le=o+o;if(t[0]=J,t[1]=ne,t[2]=se,t[0+o]=ee,t[1+o]=ie,t[2+o]=oe,t[0+le]=te,t[1+le]=re,t[2+le]=ae,ce.length>4){const e=ce.length,n=this.createTypedArray(i,4*e),l=n.subarray(0,2*e),h=n.subarray(2*e,4*e);for(T=z=0;z<e;z++,T+=2)F=ce[z],l[T+0]=a[d*F+0],l[T+1]=a[d*F+1],h[T+0]=c[u*F+0],h[T+1]=c[u*F+1];this.run(this.homographynormdlt,i,[r,s,o,2,e,2,2,e,2],[t,l,h])}else if(ce.length<4)for(T=0;T<3;T++)t[T]=t[T+o]=t[T+le]=Number.NaN}n.r(t),n.d(t,"pransacHomography",(function(){return i}))},function(e,t,n){"use strict";function i(e,t,n){const i=this.createTypedArray(e.dtype,t,e.byteOffset,e.length),r=n.map((t,n)=>this.createTypedArray(e.dtype,t,e.byteOffsetOfInputs[n],e.lengthOfInputs[n]));this[e.method](e,i,r)}function r(e,t,n,i,r={}){const s=i.length-1;if(3*s+3!==n.length||s<0)throw new Error("Can't run() routine with invalid input");const o=new Array(s),a=new Array(s),c=new Array(s),l=new Array(s);for(let e=3,t=0;t<s;t++,e+=3)o[t]=i[t+1],a[t]=n[e],c[t]=n[e+1],l[t]=n[e+2];const h={method:"",dtype:t,custom:r,rows:n[0],columns:n[1],stride:n[2],rowsOfInputs:a,columnsOfInputs:c,strideOfInputs:l,length:0,lengthOfInputs:[],byteOffset:0,byteOffsetOfInputs:[]};return null!=e&&e.call(this,h,i[0],o),h}function s(e,t,n,i,r={}){const s=i.length;if(n.length!==5*s)throw new Error("Can't runWithBlocks() with invalid input");const o=new Array(3*s),a=new Array(s);for(let e=0,t=0,r=0,c=0;c<s;c++,r+=3,e+=5)o[r+0]=n[e+1]-n[e+0]+1,o[r+1]=n[e+3]-n[e+2]+1,o[r+2]=t=n[e+4],a[c]=i[c].subarray(n[e+2]*t+n[e+0],n[e+3]*t+n[e+1]+1);return this.run(e,t,o,a,r)}function o(e,t,n){const i=t.custom.subroutine[e];for(let e=0,t=i.length;e<t;e++){const t=i[e],r=n[t.indexOfOutputMatrix],s=t.indicesOfInputMatrices.map(e=>n[e]);(0,this[t.header.method])(t.header,r,s)}}function a(e,...t){return this.MatrixType.createTypedArray(e,...t)}function c(e,t=0,n=e.length){let i,r=0,s=t+n;for(i=t;i<s;i++)r+=e[i]*e[i];return Math.sqrt(r)}function l(e,t,n=0,i=0,r=e.length){let s,o=0;for(s=0;s<r;s++)o+=e[n+s]*t[i+s];return o}function h(e,t=0,n=e.length){t=Math.max(t,0);for(let i,r,s=(n=Math.min(n,e.length))-1;s>t;s--)r=(Math.random()*(s+1-t)|0)+t,i=e[s],e[s]=e[r],e[r]=i;return e}function d(e){return Array.from({length:e},(e,t)=>t)}n.r(t),n.d(t,"execute",(function(){return i})),n.d(t,"run",(function(){return r})),n.d(t,"runWithBlocks",(function(){return s})),n.d(t,"subroutine",(function(){return o})),n.d(t,"createTypedArray",(function(){return a})),n.d(t,"norm2",(function(){return c})),n.d(t,"dot",(function(){return l})),n.d(t,"shuffle",(function(){return h})),n.d(t,"range",(function(){return d}))},function(e,t,n){"use strict";n.r(t),n.d(t,"Speedy",(function(){return sr}));var i=n(1);var r=n(2),s=n(0);const o=Symbol();let a=null;class c extends class{constructor(){this._subscribers=[]}subscribe(e){this._subscribers.indexOf(e)<0&&this._subscribers.push(e)}unsubscribe(e){this._subscribers=this._subscribers.filter(t=>t!==e)}_notify(e){for(const t of this._subscribers)t(e)}}{constructor(e){if(i.a.assert(e===o),super(),"undefined"==typeof WebGL2RenderingContext)throw new s.i("This application requires WebGL2. Please use a different browser.");this._canvas=this._createCanvas(this._reinitialize.bind(this)),this._gl=this._createContext(this._canvas),this._reinitializeOnContextLoss=!0}static get instance(){return a||(a=new c(o))}get gl(){return this._gl}get canvas(){return this._canvas}_createCanvas(e){const t=i.a.createCanvas(2048,2048);return t.addEventListener("webglcontextlost",t=>{i.a.warning("Lost WebGL2 context"),setTimeout(e,0),t.preventDefault()},!1),t}_createContext(e){const t=e.getContext("webgl2",{premultipliedAlpha:!1,preserveDrawingBuffer:!1,alpha:!0,antialias:!1,depth:!1,stencil:!1});if(!t)throw new s.i("Can't create a WebGL2 Rendering Context. Try a different browser!");return t}_reinitialize(){this._reinitializeOnContextLoss&&(i.a.warning("Reinitializing WebGL2..."),this._canvas.remove(),this._canvas=this._createCanvas(this._reinitialize.bind(this)),this._gl=this._createContext(this._canvas),this._notify(this._gl))}loseContext(){const e=this._gl;if(e.isContextLost())return;const t=e.getExtension("WEBGL_lose_context");if(!t)throw new s.i("WEBGL_lose_context extension is unavailable");return this._reinitializeOnContextLoss=!1,t.loseContext(),t}loseAndRestoreContext(e=1){const t=1e3*Math.max(e,0),n=this.loseContext();return new r.a(e=>{setTimeout(()=>{this._reinitializeOnContextLoss=!0,this._reinitialize(),setTimeout(()=>e(n),0)},t)})}}var l=n(5);class h{constructor(e,t,n){this._gl=e,this._width=Math.max(1,0|t),this._height=Math.max(1,0|n),this._glTexture=h._createTexture(this._gl,this._width,this._height),this._hasMipmaps=!1}release(){const e=this._gl;if(null==this._glTexture)throw new s.g("The SpeedyTexture has already been released");return this.discardMipmaps(),e.deleteTexture(this._glTexture),this._glTexture=null,this._width=this._height=0,null}upload(e,t=this._width,n=this._height){return i.a.assert(t>0&&n>0),this.discardMipmaps(),this._width=t,this._height=n,h._upload(this._gl,this._glTexture,t,n,e,0),this}generateMipmaps(e,t=!0){if(this._hasMipmaps)return this;if(h._generateDefaultMipmaps(this._gl,this._glTexture),this._hasMipmaps=!0,t){let t=this,n=null;for(let i=1;i<l.l&&!(Math.min(t.width,t.height)<2);i++)n=e.programs.pyramids(i-1),t=n.reduce(t),t.copyTo(this,i)}return this}clear(){const e=this._gl;return e.isContextLost()||(e.bindTexture(e.TEXTURE_2D,this._glTexture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA8,this._width,this._height,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_2D,null),this.discardMipmaps()),this}discardMipmaps(){this._hasMipmaps=!1}hasMipmaps(){return this._hasMipmaps}isReleased(){return null==this._glTexture}get glTexture(){return this._glTexture}get width(){return this._width}get height(){return this._height}get gl(){return this._gl}static _createTexture(e,t,n){i.a.assert(t>0&&n>0);const r=e.createTexture();return e.bindTexture(e.TEXTURE_2D,r),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.MIRRORED_REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.MIRRORED_REPEAT),e.texImage2D(e.TEXTURE_2D,0,e.RGBA8,t,n,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindTexture(e.TEXTURE_2D,null),r}static _upload(e,t,n,i,r,s=0){return e.bindTexture(e.TEXTURE_2D,t),e.texImage2D(e.TEXTURE_2D,s,e.RGBA8,n,i,0,e.RGBA,e.UNSIGNED_BYTE,r),e.bindTexture(e.TEXTURE_2D,null),t}static _generateDefaultMipmaps(e,t){return e.bindTexture(e.TEXTURE_2D,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D),e.bindTexture(e.TEXTURE_2D,null),t}}class d extends h{constructor(e,t,n){super(e,t,n),this._glFbo=d._createFramebuffer(e,this._glTexture)}release(){const e=this._gl;if(null==this._glFbo)throw new s.g("The SpeedyDrawableTexture has already been released");return e.deleteFramebuffer(this._glFbo),this._glFbo=null,super.release()}get glFbo(){return this._glFbo}copyTo(e,t=0){const n=this._gl;if(n.isContextLost())return;const r=1<<(t|=0),s=Math.max(1,Math.floor(e.width/r)),o=Math.max(1,Math.floor(e.height/r));i.a.assert(this._width===s&&this._height===o),e.discardMipmaps(),d._copyToTexture(n,this._glFbo,e.glTexture,0,0,this._width,this._height,t)}clone(){const e=new h(this._gl,this._width,this._height);return this.copyTo(e),e}resize(e,t,n=!1){const r=this._gl;if(this._width===e&&this._height===t)return this;if(e|=0,t|=0,i.a.assert(e>0&&t>0),r.isContextLost())return this;if(n){const n=h._createTexture(r,e,t),i=new Uint8Array(e*t*4);h._upload(r,n,e,t,i);const s=this._width,o=this._height;d._copyToTexture(r,this._glFbo,n,0,0,Math.min(e,s),Math.min(t,o)),r.bindFramebuffer(r.FRAMEBUFFER,this._glFbo),r.invalidateFramebuffer(r.FRAMEBUFFER,[r.COLOR_ATTACHMENT0]),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,n,0),r.bindFramebuffer(r.FRAMEBUFFER,null),r.deleteTexture(this._glTexture),this._glTexture=n}else r.bindTexture(r.TEXTURE_2D,this._glTexture),r.texImage2D(r.TEXTURE_2D,0,r.RGBA8,e,t,0,r.RGBA,r.UNSIGNED_BYTE,null),r.bindTexture(r.TEXTURE_2D,null);return this.discardMipmaps(),this._width=e,this._height=t,this}clearToColor(e=0,t=0,n=0,i=0){const r=this._gl;return r.isContextLost()||(e=Math.max(0,Math.min(+e,1)),t=Math.max(0,Math.min(+t,1)),n=Math.max(0,Math.min(+n,1)),i=Math.max(0,Math.min(+i,1)),this.discardMipmaps(),r.bindFramebuffer(r.FRAMEBUFFER,this._glFbo),r.viewport(0,0,this._width,this._height),r.clearColor(e,t,n,i),r.clear(r.COLOR_BUFFER_BIT),r.bindFramebuffer(r.FRAMEBUFFER,null)),this}static _createFramebuffer(e,t){const n=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,n),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER);if(i!=e.FRAMEBUFFER_COMPLETE){const t=["FRAMEBUFFER_UNSUPPORTED","FRAMEBUFFER_INCOMPLETE_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_DIMENSIONS","FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT","FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"].filter(t=>e[t]===i)[0]||"unknown error";throw new s.e(`Can't create framebuffer: ${t} (${i})`)}return e.bindFramebuffer(e.FRAMEBUFFER,null),n}static _copyToTexture(e,t,n,i,r,s,o,a=0){return e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,n),e.bindFramebuffer(e.FRAMEBUFFER,t),e.copyTexSubImage2D(e.TEXTURE_2D,a,0,0,i,r,s,o),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindTexture(e.TEXTURE_2D,null),n}}var u=n(3);const p=Object.freeze({sampler2D:"uniform1i",float:"uniform1f",int:"uniform1i",uint:"uniform1ui",bool:"uniform1i",vec2:"uniform2f",vec3:"uniform3f",vec4:"uniform4f",ivec2:"uniform2i",ivec3:"uniform3i",ivec4:"uniform4i",uvec2:"uniform2ui",uvec3:"uniform3ui",uvec4:"uniform4ui",bvec2:"uniform2i",bvec3:"uniform3i",bvec4:"uniform4i",mat2:"uniformMatrix2fv",mat3:"uniformMatrix3fv",mat4:"uniformMatrix4fv"});class f extends Function{constructor(e,t,n={}){return super("...args","return this._self._call(...args)"),this._self=this.bind(this),this._self._init(e,t,n),this._self}_init(e,t,n){if(e.isContextLost())throw new s.g("Can't initialize SpeedyProgram: lost context");n=Object.assign({output:[1,1],renderToTexture:!0,pingpong:!1},n),this._gl=e,this._program=f._compile(e,t.vertexSource,t.fragmentSource),this._geometry=new m(e,{position:t.locationOfAttributes.position,texCoord:t.locationOfAttributes.texCoord}),this._argnames=t.arguments,this._argIsArray=new Array(this._argnames.length).fill(!1),this._ubo=null,this._renderToTexture=Boolean(n.renderToTexture),this._width=0|n.output[0],this._height=0|n.output[1],this._ownTexture=Array.from({length:n.pingpong?2:1},()=>new d(e,this._width,this._height)),this._texture=[].concat(this._ownTexture),this._textureIndex=0,this._uniform=new Map,e.useProgram(this._program);for(const n of t.uniforms){const i=t.uniformType(n),r=e.getUniformLocation(this._program,n);this._uniform.set(n,new _(i,r))}for(let e=0;e<this._argnames.length;e++){const t=this._argnames[e];if(!this._uniform.has(t)&&(this._argIsArray[e]=this._uniform.has(t+"[0]"),!this._argIsArray[e]))throw new s.g(`Expected uniform "${t}", as declared in the argument list`)}}_call(...e){const t=this._gl,n=this._argnames;if(e.length!=n.length)throw new s.f(`Can't run shader: incorrect number of arguments (expected ${n.length}, got ${e.length})`);const i=e.flat();for(let e=i.length-1;e>=0;e--)if(i[e]===this._texture[this._textureIndex])throw new s.i("Can't run shader: don't use its output texture as an input to itself. Consider using pingpong rendering!");if(t.isContextLost())return this._texture[this._textureIndex];t.useProgram(this._program),t.bindVertexArray(this._geometry.vao);const r=this._uniform.get("texSize");t.uniform2f(r.location,this.width,this.height);for(let i=0,r=0;i<e.length;i++){const o=n[i];if(this._argIsArray[i]){const n=e[i];if(this._uniform.has(`${o}[${n.length}]`))throw new s.f(`Can't run shader: too few elements in the "${o}" array`);for(let e=0,i=void 0;void 0!==(i=this._uniform.get(`${o}[${e}]`));e++)r=i.setValue(t,n[e],r)}else{r=this._uniform.get(o).setValue(t,e[i],r)}}null!==this._ubo&&this._ubo.update();const o=this._texture[this._textureIndex],a=this._renderToTexture?o.glFbo:null;return t.bindFramebuffer(t.FRAMEBUFFER,a),t.viewport(0,0,this.width,this.height),t.drawArrays(t.TRIANGLES,0,6),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindVertexArray(null),o.discardMipmaps(),this._pingpong(),o}outputs(e,t,...n){return this.setOutputTexture(...n),this.setOutputSize(e,t),this}setOutputSize(e,t){i.a.assert(e>0&&t>0),this._width=0|e,this._height=0|t;for(let e=0;e<this._texture.length;e++)null!=this._texture[e]&&this._texture[e].resize(this._width,this._height);return this}setOutputTexture(...e){const t=this._texture.length;i.a.assert(e.length===t,`Incorrect number of textures (expected ${t})`);const n=this.width,r=this.height,s=e.every(e=>null===e);return this._texture=s?this._ownTexture:[].concat(e),this._textureIndex=0,this.setOutputSize(n,r),this}clear(){const e=this._texture[this._textureIndex];for(let e=0;e<this._texture.length;e++)this._texture[e].clear();return this._pingpong(),e}setUBO(e,t){null===this._ubo&&(this._ubo=new g(this._gl,this._program)),this._ubo.set(e,t)}release(){const e=this._gl;null!=this._ubo&&(this._ubo=this._ubo.release());for(let e=0;e<this._ownTexture.length;e++)this._ownTexture[e]=this._ownTexture[e].release();return this._texture.fill(null),this._geometry=this._geometry.release(),e.deleteProgram(this._program),this._program=null,null}get width(){return this._width}get height(){return this._height}_pingpong(){this._texture.length>1&&(this._textureIndex=1-this._textureIndex)}static _compile(e,t,n){const i=e.createProgram(),r=e.createShader(e.VERTEX_SHADER),o=e.createShader(e.FRAGMENT_SHADER);if(e.shaderSource(r,t),e.compileShader(r),e.attachShader(i,r),e.shaderSource(o,n),e.compileShader(o),e.attachShader(i,o),e.linkProgram(i),e.validateProgram(i),!e.getProgramParameter(i,e.LINK_STATUS)&&!e.isContextLost()){const t=[e.getShaderInfoLog(o),e.getShaderInfoLog(r),e.getProgramInfoLog(i)];e.deleteProgram(i),e.deleteShader(o),e.deleteShader(r);const a=e=>Math.max(0,2-Math.floor(Math.log10(e))),c=e=>Array(a(e)).fill(" ").join("")+e+". ",l=n.split("\n").map((e,t)=>c(1+t)+e).join("\n");throw new s.e("Can't create shader.\n\n---------- ERROR ----------\n"+t.join("\n")+"\n\n---------- SOURCE CODE ----------\n"+l)}return i}}function m(e,t){return this.vao=e.createVertexArray(),this.vbo=Object.freeze({position:e.createBuffer(),texCoord:e.createBuffer()}),this._gl=e,e.bindVertexArray(this.vao),e.bindBuffer(e.ARRAY_BUFFER,this.vbo.position),e.bufferData(e.ARRAY_BUFFER,new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(t.position),e.vertexAttribPointer(t.position,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,this.vbo.texCoord),e.bufferData(e.ARRAY_BUFFER,new Float32Array([0,0,1,0,0,1,0,1,1,0,1,1]),e.STATIC_DRAW),e.enableVertexAttribArray(t.texCoord),e.vertexAttribPointer(t.texCoord,2,e.FLOAT,!1,0,0),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindVertexArray(null),Object.freeze(this)}function _(e,t){if(this.type=String(e),!Object.prototype.hasOwnProperty.call(p,this.type))throw new s.i("Unsupported uniform type: "+this.type);this.location=t,this.setter=p[this.type];const n=0|Number(this.setter.match(/^uniform(Matrix)?(\d)/)[2]);return this.dim=this.type.startsWith("mat")?2:this.type.indexOf("vec")>=0|0,this.length=2==this.dim?n*n:n,Object.freeze(this)}function g(e,t){this._gl=e,this._program=t,this._nextIndex=0,this._ubo=Object.create(null)}m.prototype.release=function(){const e=this._gl;return e.deleteVertexArray(this.vao),e.deleteBuffer(this.vbo.position),e.deleteBuffer(this.vbo.texCoord),null},_.prototype.setValue=function(e,t,n){const i=e[this.setter];if("sampler2D"==this.type){if(n>e.MAX_COMBINED_TEXTURE_IMAGE_UNITS)throw new s.i(`Can't bind ${n} textures to a program: max is ${e.MAX_COMBINED_TEXTURE_IMAGE_UNITS}`);if(null==t)throw new s.f("Can't run shader: cannot use null as an input texture");e.activeTexture(e.TEXTURE0+n),e.bindTexture(e.TEXTURE_2D,t.glTexture),e.uniform1i(this.location,n),n++}else if("number"==typeof t||"boolean"==typeof t)i.call(e,this.location,t);else{if(!Array.isArray(t))throw new s.f(`Can't run shader: unrecognized argument "${t}"`);if(t.length!==this.length)throw new s.f(`Can't run shader: incorrect number of values for ${this.type}: "${t}"`);2==this.dim?i.call(e,this.location,!1,t):i.call(e,this.location,...t)}return n},g.prototype.set=function(e,t){const n=this._gl;void 0===this._ubo[e]&&(this._ubo[e]={buffer:n.createBuffer(),blockBindingIndex:this._nextIndex++,blockIndex:null,data:null});const i=this._ubo[e];if(null===i.blockIndex){const t=n.getUniformBlockIndex(this._program,e);n.uniformBlockBinding(this._program,t,i.blockBindingIndex),i.blockIndex=t}i.data=t},g.prototype.update=function(){const e=this._gl;for(const t in this._ubo){const n=this._ubo[t];e.bindBuffer(e.UNIFORM_BUFFER,n.buffer),e.bufferData(e.UNIFORM_BUFFER,n.data.byteLength,e.DYNAMIC_DRAW),e.bufferData(e.UNIFORM_BUFFER,n.data,e.DYNAMIC_DRAW),e.bindBufferBase(e.UNIFORM_BUFFER,n.blockBindingIndex,n.buffer),e.bindBuffer(e.UNIFORM_BUFFER,null)}},g.prototype.release=function(){const e=this._gl;for(const t in this._ubo){const n=this._ubo[t];e.deleteBuffer(n.buffer),n.data=null}return null};class v{constructor(e,t,n){this._gpu=e,this._width=t,this._height=n,this._helpers=null,this._programs=[]}declare(e,t,n={}){return Object.defineProperty(this,e,{get:(()=>{const i="__k_"+e;return function(){return this[i]||(this[i]=this._createProgram(t,n))}.bind(this)})()}),this}compose(e,...t){return Object.defineProperty(this,e,{get:(()=>{const n="__c_"+e;return function(){return this[n]||(this[n]=2==t.length?(()=>(t=t.map(e=>this[e]),function(e,...n){return t[1](t[0](e,...n),...n)}))():3==t.length?(()=>(t=t.map(e=>this[e]),function(e,...n){return t[2](t[1](t[0](e,...n),...n),...n)}))():4==t.length?(()=>(t=t.map(e=>this[e]),function(e,...n){return t[3](t[2](t[1](t[0](e,...n),...n),...n),...n)}))():(()=>(t=t.map(e=>this[e]),function(e,...n){return t.reduce((e,t)=>t(e,...n),e)}))())}.bind(this)})()}),this}get program(){return this._helpers||(this.helpers={hasTextureSize:(e,t)=>({output:[Math.max(1,0|e),Math.max(1,0|t)]}),rendersToCanvas:()=>({renderToTexture:!1}),usesPingpongRendering:()=>({pingpong:!0})})}release(){for(let e=0;e<this._programs.length;e++)this._programs[e].release();return null}_createProgram(e,t={}){const n=new f(this._gpu.gl,e,{output:[this._width,this._height],...t});return this._programs.push(n),n}}var x=n(4);const y=Object(u.b)("utils/identity.glsl").withArguments("image"),S=Object(u.b)("utils/flip-y.glsl").withArguments("image"),w=Object(u.b)("utils/fill.glsl").withArguments("value"),b=Object(u.b)("utils/fill-components.glsl").withArguments("image","pixelComponents","value"),A=Object(u.b)("utils/copy-components.glsl").withArguments("dest","src","destComponents","srcComponentId"),E=Object(u.b)("utils/scan-minmax2d.glsl").withArguments("image","iterationNumber");class O extends v{constructor(e,t,n){super(e,t,n),this.declare("identity",y).declare("_renderToCanvas",S,{...this.program.rendersToCanvas()}).declare("flipY",S).declare("fill",w).declare("fillComponents",b).declare("_copyComponents",A).declare("_scanMinMax2D",E,{...this.program.usesPingpongRendering()})}renderToCanvas(e){const t=e.width,n=e.height,r=this._gpu.canvas;return t==this._renderToCanvas.width&&n==this._renderToCanvas.height||this._renderToCanvas.setOutputSize(t,n),(t>r.width||n>r.height)&&(i.a.warning(`Resizing the canvas to ${t} x ${n}`),r.width=t,r.height=n),this._renderToCanvas(e),r}scanMax(e,t){const n=this._scanMinMax(e,t);return this.copyComponents(e,n,t,x.e.RED)}scanMin(e,t){const n=this._scanMinMax(e,t);return this.copyComponents(e,n,t,x.e.GREEN)}copyComponents(e,t,n,i){if(!Object.prototype.hasOwnProperty.call(x.a,i))throw new s.f("Invalid srcComponent: "+i);const r=x.a[i];return this._copyComponents(e,t,n,r)}_scanMinMax(e,t){const n=0|Math.ceil(Math.log2(Math.max(this._width,this._height)));let i=this.copyComponents(e,e,x.e.ALL,t);for(let e=0;e<n;e++)i=this._scanMinMax2D(i,e);return i}}const I=Object(u.b)("colors/rgb2grey.glsl").withArguments("image");class M extends v{constructor(e,t,n){super(e,t,n),this.declare("rgb2grey",I)}}var X=n(6);const L=[3,5,7].reduce((e,t)=>(e[t]=Object(u.b)("filters/convolution2d.glsl").withDefines({KERNEL_SIZE_SQUARED:t*t}).withArguments("image","kernel"),e),{}),k=[3,5,7,9,11,13,15].reduce((e,t)=>(e[t]=Object(u.b)("filters/convolution1d.glsl").withDefines({KERNEL_SIZE:t,AXIS:0}).withArguments("image","kernel"),e),{}),P=[3,5,7,9,11,13,15].reduce((e,t)=>(e[t]=Object(u.b)("filters/convolution1d.glsl").withDefines({KERNEL_SIZE:t,AXIS:1}).withArguments("image","kernel"),e),{}),T=[3,5,7].reduce((e,t)=>(e[t]=Object(u.b)("filters/fast-median.glsl").withDefines({KERNEL_SIZE:t}).withArguments("image"),e),{}),z=e=>Math.max(1,e/6);class R extends v{constructor(e,t,n){super(e,t,n),this.compose("gauss3","_gauss3x","_gauss3y").compose("gauss5","_gauss5x","_gauss5y").compose("gauss7","_gauss7x","_gauss7y").compose("gauss9","_gauss9x","_gauss9y").compose("gauss11","_gauss11x","_gauss11y").compose("box3","_box3x","_box3y").compose("box5","_box5x","_box5y").compose("box7","_box7x","_box7y").compose("box9","_box9x","_box9y").compose("box11","_box11x","_box11y").declare("median3",T[3]).declare("median5",T[5]).declare("median7",T[7]).declare("convolution3",L[3]).declare("convolution5",L[5]).declare("convolution7",L[7]).declare("convolution3x",k[3]).declare("convolution3y",P[3]).declare("convolution5x",k[5]).declare("convolution5y",P[5]).declare("convolution7x",k[7]).declare("convolution7y",P[7]).declare("convolution9x",k[9]).declare("convolution9y",P[9]).declare("convolution11x",k[11]).declare("convolution11y",P[11]).declare("convolution13x",k[13]).declare("convolution13y",P[13]).declare("convolution15x",k[15]).declare("convolution15y",P[15]).compose("dog16_1","_dog16_1x","_dog16_1y").declare("texConv2D3",Object(X.texConv2D)(3),{...this.program.usesPingpongRendering()}).declare("texConv2D5",Object(X.texConv2D)(5),{...this.program.usesPingpongRendering()}).declare("texConv2D7",Object(X.texConv2D)(7),{...this.program.usesPingpongRendering()}).compose("texConvXY3","texConvX3","texConvY3").declare("texConvX3",Object(X.texConvX)(3)).declare("texConvY3",Object(X.texConvY)(3)).compose("texConvXY5","texConvX5","texConvY5").declare("texConvX5",Object(X.texConvX)(5)).declare("texConvY5",Object(X.texConvY)(5)).compose("texConvXY7","texConvX7","texConvY7").declare("texConvX7",Object(X.texConvX)(7)).declare("texConvY7",Object(X.texConvY)(7)).compose("texConvXY9","texConvX9","texConvY9").declare("texConvX9",Object(X.texConvX)(9)).declare("texConvY9",Object(X.texConvY)(9)).compose("texConvXY11","texConvX11","texConvY11").declare("texConvX11",Object(X.texConvX)(11)).declare("texConvY11",Object(X.texConvY)(11)).declare("createKernel3x3",Object(X.createKernel2D)(3),{...this.program.hasTextureSize(3,3)}).declare("createKernel5x5",Object(X.createKernel2D)(5),{...this.program.hasTextureSize(5,5)}).declare("createKernel7x7",Object(X.createKernel2D)(7),{...this.program.hasTextureSize(7,7)}).declare("createKernel3x1",Object(X.createKernel1D)(3),{...this.program.hasTextureSize(3,1)}).declare("createKernel5x1",Object(X.createKernel1D)(5),{...this.program.hasTextureSize(5,1)}).declare("createKernel7x1",Object(X.createKernel1D)(7),{...this.program.hasTextureSize(7,1)}).declare("createKernel9x1",Object(X.createKernel1D)(9),{...this.program.hasTextureSize(9,1)}).declare("createKernel11x1",Object(X.createKernel1D)(11),{...this.program.hasTextureSize(11,1)}).declare("_gauss3x",Object(X.convX)([.25,.5,.25])).declare("_gauss3y",Object(X.convY)([.25,.5,.25])).declare("_gauss5x",Object(X.convX)([.05,.25,.4,.25,.05])).declare("_gauss5y",Object(X.convY)([.05,.25,.4,.25,.05])).declare("_gauss7x",Object(X.convX)(i.a.gaussianKernel(z(7),7))).declare("_gauss7y",Object(X.convY)(i.a.gaussianKernel(z(7),7))).declare("_gauss9x",Object(X.convX)(i.a.gaussianKernel(z(9),9))).declare("_gauss9y",Object(X.convY)(i.a.gaussianKernel(z(9),9))).declare("_gauss11x",Object(X.convX)(i.a.gaussianKernel(z(11),11))).declare("_gauss11y",Object(X.convY)(i.a.gaussianKernel(z(11),11))).declare("_box3x",Object(X.convX)([1,1,1],1/3)).declare("_box3y",Object(X.convY)([1,1,1],1/3)).declare("_box5x",Object(X.convX)([1,1,1,1,1],.2)).declare("_box5y",Object(X.convY)([1,1,1,1,1],.2)).declare("_box7x",Object(X.convX)([1,1,1,1,1,1,1],1/7)).declare("_box7y",Object(X.convY)([1,1,1,1,1,1,1],1/7)).declare("_box9x",Object(X.convX)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box9y",Object(X.convY)([1,1,1,1,1,1,1,1,1],1/9)).declare("_box11x",Object(X.convX)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_box11y",Object(X.convY)([1,1,1,1,1,1,1,1,1,1,1],1/11)).declare("_dog16_1x",Object(X.convX)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725])).declare("_dog16_1y",Object(X.convY)([.011725,.038976,.055137,-.037649,-.136377,-.037649,.055137,.038976,.011725]))}}class C extends class{constructor(){}get data(){return null}get size(){return 0}}{constructor(e){super(),this._data=e,this._size=e.length}get data(){return this._data}get size(){return this._size}}const N=new Uint8Array([]);class F{constructor(e,t,n=0,i=0,r=0,s=0,o=null,a=null){this._x=+e,this._y=+t,this._lod=+n,this._rotation=+i,this._score=+r,this._scale=Math.pow(2,+n),this._flags=0|s,this._extraBytes=o||N,this._descriptorBytes=a||N}toString(){return`(${this._x},${this._y})`}get x(){return this._x}get y(){return this._y}get lod(){return this._lod}get scale(){return this._scale}get rotation(){return this._rotation}get score(){return this._score}get flags(){return this._flags}}class D extends F{constructor(e,t){super(e._x,e._y,e._lod,e._rotation,e._score,e._flags,e._extraBytes,e._descriptorBytes),this._descriptor=t(this._descriptorBytes)}get descriptor(){return this._descriptor}}const K=Math.ceil(Math.sqrt(l.k/4));class j{static minLength(e,t,n){const i=Math.ceil((l.k+t+n)/4),r=Math.max(0,Math.ceil(e)),s=Math.ceil(Math.sqrt(r*i));return Math.max(K,Math.min(s,300))}static capacity(e,t,n){const i=Math.ceil((l.k+e+t)/4),r=n*n;return Math.floor(r/i)}static decode(e,t,n,i){const r=Math.ceil((l.k+t+n)/4);let s,o,a,c,h,d,u,p,f,m;const _=[],g=i*i*r*4,v=Math.min(e.length,g);t+n>0&&(e=new Uint8Array(e));for(let i=0;i<v&&(s=e[i+1]<<8|e[i],o=e[i+3]<<8|e[i+2],!(s>=65535&&o>=65535));i+=4*r)s+o==0&&0==e[i+6]||(s/=l.b,o/=l.b,d=e[i+7],f=e[i+4]<255,a=f?-l.h+(l.h+l.l)*e[i+4]/255:0,m=d&0!=l.f,c=m?(2*e[i+5]/255-1)*Math.PI:0,h=e[i+6]/255,u=e.subarray(8+i,8+i+n),p=e.subarray(8+i+n,8+i+n+t),p.length<t||u.length<n||_.push(new F(s,o,a,c,h,d,u,p)));return _}}const $=Object(u.b)("keypoints/fast/fast9.glsl").withArguments("image","threshold"),B=Object(u.b)("keypoints/fast/fast7.glsl").withArguments("image","threshold"),q=Object(u.b)("keypoints/fast/fast5.glsl").withArguments("image","threshold"),U=Object(u.b)("keypoints/fast/fast-score16.glsl").withArguments("image","threshold"),G=Object(u.b)("keypoints/fast/fast-score12.glsl").withArguments("image","threshold"),Y=Object(u.b)("keypoints/fast/fast-score8.glsl").withArguments("image","threshold"),W=Object(u.b)("keypoints/fast/multiscale-fast.glsl").withArguments("pyramid","threshold","numberOfLayers","lodStep"),H=Object(u.b)("keypoints/fast/encode-fast-score.glsl").withArguments("image"),Q=Object(u.b)("keypoints/harris/multiscale-harris.glsl").withDefines({MAX_LAYERS:2*l.l-1}).withArguments("pyramid","windowSize","numberOfLayers","lodStep","sobelDerivatives"),V=Object(u.b)("keypoints/harris/harris-cutoff.glsl").withArguments("corners","maxScore","quality"),Z=Object(u.b)("keypoints/harris/encode-harris-score.glsl").withArguments("image"),J=Object(u.b)("keypoints/harris/max-harris-score.glsl").withArguments("self","iterationNumber"),ee=Object(u.b)("keypoints/harris/multiscale-sobel.glsl").withArguments("pyramid","lod"),te=Object(u.b)("keypoints/brisk.glsl").withArguments("image","layerA","layerB","scaleA","scaleB","lgM","h"),ne=Object(u.b)("keypoints/orb/orb-descriptor.glsl").withArguments("pyramid","encodedCorners","extraSize","encoderLength"),ie=Object(u.b)("keypoints/orb/orb-orientation.glsl").withArguments("pyramid","encodedKeypoints","descriptorSize","extraSize","encoderLength"),re=Object(u.b)("keypoints/nonmax-suppression.glsl").withArguments("image","lodStep"),se=Object(u.b)("keypoints/nonmax-suppression.glsl").withArguments("image","lodStep").withDefines({MULTISCALE:1}),oe=Object(u.b)("keypoints/transfer-orientation.glsl").withArguments("encodedOrientations","encodedKeypoints","descriptorSize","extraSize","encoderLength"),ae=Object(u.b)("keypoints/suppress-descriptors.glsl").withArguments("encodedKeypoints","descriptorSize","extraSize","encoderLength","suppressedEncoderLength");class ce extends v{constructor(e,t,n){super(e,t,n),this.compose("fast9","_fast9","_fastScore16").declare("_fast9",$).declare("_fastScore16",U).compose("fast7","_fast7","_fastScore12").declare("_fast7",B).declare("_fastScore12",G).compose("fast5","_fast5","_fastScore8").declare("_fast5",q).declare("_fastScore8",Y).declare("multiscaleFast",W).declare("encodeFastScore",H).declare("brisk",te).declare("multiscaleHarris",Q).declare("harrisCutoff",V).declare("encodeHarrisScore",Z).declare("maxHarrisScore",J,{...this.program.usesPingpongRendering()}).declare("_nonMaxSuppression",re).declare("_multiscaleNonMaxSuppression",se).declare("_orb",ne).declare("_orbOrientation",ie).declare("multiscaleSobel",ee).declare("_transferOrientation",oe).declare("_suppressDescriptors",ae)}nonMaxSuppression(e,t=0){return t>0?this._multiscaleNonMaxSuppression(e,t):this._nonMaxSuppression(e,0)}orb(e,t,n,r,s){return i.a.assert(32===n),this._orb.setOutputSize(s,s),this._orb(e,t,r,s)}orbOrientation(e,t,n,i,r){const s=j.capacity(n,i,r),o=Math.max(1,Math.ceil(Math.sqrt(s)));this._orbOrientation.setOutputSize(o,o);const a=this._orbOrientation(e,t,n,i,r);return this._transferOrientation.setOutputSize(r,r),this._transferOrientation(a,t,n,i,r)}suppressDescriptors(e,t,n,r,s){return i.a.assert(s<=r),this._suppressDescriptors.setOutputSize(s,s),this._suppressDescriptors(e,t,n,r,s)}}const le=navigator.userAgent.includes("Firefox");class he{static getError(e){const t=e.getError(),n=["NO_ERROR","INVALID_ENUM","INVALID_VALUE","INVALID_OPERATION","INVALID_FRAMEBUFFER_OPERATION","OUT_OF_MEMORY","CONTEXT_LOST_WEBGL"].find(n=>e[n]==t)||"Unknown";return new s.e(n)}static clientWaitAsync(e,t,n=0){return this._checkStatus=this._checkStatus||(this._checkStatus=function e(t,n,r,s,o){const a=t.clientWaitSync(n,r,0);a==t.TIMEOUT_EXPIRED?i.a.setZeroTimeout(()=>e.call(this,t,n,r,s,o)):a==t.WAIT_FAILED?le&&t.getError()==t.NO_ERROR?i.a.setZeroTimeout(()=>e.call(this,t,n,r,s,o)):o(he.getError(t)):s()}),new r.a((i,r)=>{this._checkStatus(e,t,n,i,r)})}static getBufferSubDataAsync(e,t,n,i,r,o=0,a=0){const c=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0),l=performance.now();return e.flush(),he.clientWaitAsync(e,c).then(()=>(e.bindBuffer(n,t),e.getBufferSubData(n,i,r,o,a),e.bindBuffer(n,null),performance.now()-l)).catch(e=>{throw new s.g("Can't getBufferSubDataAsync(): error in clientWaitAsync()",e)}).finally(()=>{e.deleteSync(c)})}}class de{constructor(e=1){i.a.assert(e>0),this._pixelBuffer=new Array(e).fill(null).map(()=>new Uint8Array(0)),this._consumerQueue=new Array(e).fill(0).map((e,t)=>t),this._producerQueue=[]}readPixelsSync(e,t=0,n=0,i=e.width,r=e.height){const s=e.gl,o=e.glFbo;i=Math.max(0,Math.min(i,e.width)),r=Math.max(0,Math.min(r,e.height)),t=Math.max(0,Math.min(t,e.width-i)),n=Math.max(0,Math.min(n,e.height-r));const a=i*r*4;return this._reallocate(a),s.isContextLost()||(s.bindFramebuffer(s.FRAMEBUFFER,o),s.readPixels(t,n,i,r,s.RGBA,s.UNSIGNED_BYTE,this._pixelBuffer[0]),s.bindFramebuffer(s.FRAMEBUFFER,null)),this._pixelBuffer[0].subarray(0,a)}readPixelsAsync(e,t=!1,n=0,i=0,s=e.width,o=e.height){const a=e.gl,c=e.glFbo;s=Math.max(0,Math.min(s,e.width)),o=Math.max(0,Math.min(o,e.height)),n=Math.max(0,Math.min(n,e.width-s)),i=Math.max(0,Math.min(i,e.height-o));const l=s*o*4;if(this._reallocate(l),a.isContextLost())return r.a.resolve(this._pixelBuffer[0].subarray(0,l));if(!t)return de._readPixelsViaPBO(a,this._pixelBuffer[0],c,n,i,s,o).then(()=>this._pixelBuffer[0].subarray(0,l));if(this._producerQueue.length>0){const e=this._producerQueue.shift();de._readPixelsViaPBO(a,this._pixelBuffer[e],c,n,i,s,o).then(()=>{this._consumerQueue.push(e)})}else this._waitForQueueNotEmpty(this._producerQueue).then(()=>{const e=this._producerQueue.shift();de._readPixelsViaPBO(a,this._pixelBuffer[e],c,n,i,s,o).then(()=>{this._consumerQueue.push(e)})}).turbocharge();if(this._consumerQueue.length>0){const e=this._consumerQueue.shift();return new r.a(t=>{t(this._pixelBuffer[e].subarray(0,l)),this._producerQueue.push(e)})}return new r.a(e=>{this._waitForQueueNotEmpty(this._consumerQueue).then(()=>{const t=this._consumerQueue.shift();e(this._pixelBuffer[t].subarray(0,l)),this._producerQueue.push(t)}).turbocharge()})}_reallocate(e){if(!(e<=this._pixelBuffer[0].byteLength))for(let t=0;t<this._pixelBuffer.length;t++){const n=new Uint8Array(e);n.set(this._pixelBuffer[t]),this._pixelBuffer[t]=n}}_waitForQueueNotEmpty(e){return new r.a(t=>{!function n(){e.length>0?t():setTimeout(n,0)}()})}static _readPixelsViaPBO(e,t,n,i,r,o,a){const c=e.createBuffer();if(!(t.byteLength>=o*a*4))throw new s.f("Can't read pixels: invalid buffer size");return e.bindBuffer(e.PIXEL_PACK_BUFFER,c),e.bufferData(e.PIXEL_PACK_BUFFER,t.byteLength,e.STREAM_READ),e.bindFramebuffer(e.FRAMEBUFFER,n),e.readPixels(i,r,o,a,e.RGBA,e.UNSIGNED_BYTE,0),e.bindFramebuffer(e.FRAMEBUFFER,null),e.bindBuffer(e.PIXEL_PACK_BUFFER,null),he.getBufferSubDataAsync(e,c,e.PIXEL_PACK_BUFFER,0,t,0,0).catch(e=>{throw new s.g("Can't read pixels",e)}).finally(()=>{e.deleteBuffer(c)})}}const ue=l.k/4,pe=[32,32],fe=Object(u.b)("encoders/encode-keypoint-offsets.glsl").withArguments("image","imageSize").withDefines({MAX_ITERATIONS:pe[0]}),me=Object(u.b)("encoders/encode-keypoint-long-offsets.glsl").withArguments("offsetsImage","imageSize").withDefines({MAX_ITERATIONS:pe[1]}),_e=Object(u.b)("encoders/encode-keypoints.glsl").withArguments("offsetsImage","encodedKeypoints","imageSize","passId","numPasses","descriptorSize","extraSize","encoderLength"),ge=Object(u.b)("encoders/resize-encoded-keypoints.glsl").withArguments("inputTexture","inputDescriptorSize","inputExtraSize","inputEncoderLength","outputDescriptorSize","outputExtraSize","outputEncoderLength"),ve=Object(u.b)("utils/identity.glsl").withArguments("image"),xe=Object(u.b)("encoders/upload-keypoints.glsl").withArguments("keypointCount","encoderLength","descriptorSize","extraSize").withDefines({KEYPOINT_BUFFER_LENGTH:1024});class ye extends v{constructor(e,t,n){super(e,t,n),this.declare("_encodeKeypointSkipOffsets",fe).declare("_encodeKeypointLongSkipOffsets",me,{...this.program.usesPingpongRendering()}).declare("_encodeKeypoints",_e,{...this.program.hasTextureSize(l.c,l.c),...this.program.usesPingpongRendering()}).declare("_resizeEncodedKeypoints",ge,{...this.program.hasTextureSize(l.c,l.c)}).declare("_downloadEncodedKeypoints",ve,{...this.program.hasTextureSize(l.c,l.c)}).declare("_uploadKeypoints",xe,{...this.program.hasTextureSize(l.c,l.c)}),this._textureReader=new de,this._uploadBuffer=null}encodeKeypoints(e,t,n,i){const r=[this._width,this._height];let s=this._encodeKeypointSkipOffsets(e,r);for(let e=0;e<2;e++)s=this._encodeKeypointLongSkipOffsets(s,r);const o=ue,a=j.capacity(t,n,i),c=Math.max(1,Math.ceil(Math.sqrt(a*o)));this._encodeKeypoints.setOutputSize(c,c);let l=this._encodeKeypoints.clear();for(let e=0;e<8;e++)l=this._encodeKeypoints(s,l,r,e,8,0,0,c);return this._resizeEncodedKeypoints.setOutputSize(i,i),this._resizeEncodedKeypoints(l,0,0,c,t,n,i)}downloadEncodedKeypoints(e,t=!0){return e instanceof d||(this._downloadEncodedKeypoints.setOutputSize(e.width,e.height),e=this._downloadEncodedKeypoints(e)),this._textureReader.readPixelsAsync(e,t).catch(e=>new s.g("Can't download the encoded keypoint texture",e))}uploadKeypoints(e,t,n,r){const o=e.length;if(o>1024)throw new s.i(`Can't upload ${o} keypoints: maximum is currently 1024`);if(r<j.minLength(o,t,n)&&i.a.warning(`Insufficient encoderLength (${r}) for ${e.length} keypoints (descriptorSize: ${t}, extraSize: ${n})`),null===this._uploadBuffer){const e=4*Float32Array.BYTES_PER_ELEMENT,t=new ArrayBuffer(1024*e);i.a.assert(t.byteLength<=16384),this._uploadBuffer=new Float32Array(t)}for(let t=0;t<o;t++){const n=e[t],i=4*t;this._uploadBuffer[i]=+n.x||0,this._uploadBuffer[i+1]=+n.y||0,this._uploadBuffer[i+2]=+n.lod||0,this._uploadBuffer[i+3]=+n.score||0}return this._uploadKeypoints.setOutputSize(r,r),this._uploadKeypoints.setUBO("KeypointBuffer",this._uploadBuffer),this._uploadKeypoints(o,r,t,n)}}const Se=Object(u.b)("pyramids/upsample2.glsl").withArguments("image"),we=Object(u.b)("pyramids/downsample2.glsl").withArguments("image");class be extends v{constructor(e,t,n){super(e,t,n),this.compose("_reduce","_smoothX","_smoothY","_downsample2").compose("_expand","_upsample2","_smoothX2","_smoothY2").declare("_smoothX",Object(X.convX)([.05,.25,.4,.25,.05])).declare("_smoothY",Object(X.convY)([.05,.25,.4,.25,.05])).declare("_smoothX2",Object(X.convX)([.1,.5,.8,.5,.1]),{...this.program.hasTextureSize(2*this._width,2*this._height)}).declare("_smoothY2",Object(X.convY)([.1,.5,.8,.5,.1],.5),{...this.program.hasTextureSize(2*this._width,2*this._height)}).declare("_upsample2",Se,{...this.program.hasTextureSize(2*this._width,2*this._height)}).declare("_downsample2",we,{...this.program.hasTextureSize(Math.max(1,Math.floor(this._width/2)),Math.max(1,Math.floor(this._height/2)))})}reduce(e){return this._reduce(e)}expand(e){return this._expand(e)}}const Ae=Object(u.b)("enhancements/normalize-image.glsl").withArguments("minmax2d","minValue","maxValue").withDefines({GREYSCALE:1}),Ee=Object(u.b)("enhancements/normalize-image.glsl").withArguments("minmax2dRGB","minValue","maxValue"),Oe=Object(u.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset","decay"),Ie=Object(u.b)("enhancements/nightvision.glsl").withArguments("image","illuminationMap","gain","offset","decay").withDefines({GREYSCALE:1});class Me extends v{constructor(e,t,n){super(e,t,n),this.declare("_normalizeGreyscaleImage",Ae).declare("_normalizeColoredImage",Ee).declare("_nightvision",Oe).declare("_nightvisionGreyscale",Ie).compose("_illuminationMapLo","_illuminationMapLoX","_illuminationMapLoY").declare("_illuminationMapLoX",Object(X.convX)(i.a.gaussianKernel(80,31))).declare("_illuminationMapLoY",Object(X.convY)(i.a.gaussianKernel(80,31))).compose("_illuminationMap","_illuminationMapX","_illuminationMapY").declare("_illuminationMapX",Object(X.convX)(i.a.gaussianKernel(80,63))).declare("_illuminationMapY",Object(X.convY)(i.a.gaussianKernel(80,63))).compose("_illuminationMapHi","_illuminationMapHiX","_illuminationMapHiY").declare("_illuminationMapHiX",Object(X.convX)(i.a.gaussianKernel(80,255))).declare("_illuminationMapHiY",Object(X.convY)(i.a.gaussianKernel(80,255)))}normalizeGreyscaleImage(e,t=0,n=255){const i=this._gpu.programs.utils._scanMinMax(e,x.e.GREEN);return this._normalizeGreyscaleImage(i,Math.min(t,n),Math.max(t,n))}normalizeColoredImage(e,t=0,n=255){const i=this._gpu,r=new Array(3);r[0]=i.programs.utils._scanMinMax(e,x.e.RED).clone(),r[1]=i.programs.utils._scanMinMax(e,x.e.GREEN).clone(),r[2]=i.programs.utils._scanMinMax(e,x.e.BLUE);const s=this._normalizeColoredImage(r,Math.min(t,n),Math.max(t,n));return r[1].release(),r[0].release(),s}nightvision(e,t=.5,n=.5,i=0,r="medium",o=!1){let a=null;if("medium"==r)a=this._illuminationMap(e);else if("high"==r)a=this._illuminationMapHi(e);else{if("low"!=r)throw new s.f(`Invalid quality level for nightvision: "${r}"`);a=this._illuminationMapLo(e)}return(o?this._nightvisionGreyscale:this._nightvision)(e,a,t,n,i)}}const Xe=Object(u.b)("trackers/lk.glsl").withArguments("encodedFlow","prevKeypoints","nextPyramid","prevPyramid","windowSize","level","depth","numberOfIterations","discardThreshold","epsilon","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:21}),Le=Object(u.b)("trackers/lk.glsl").withArguments("encodedFlow","prevKeypoints","nextPyramid","prevPyramid","windowSize","level","depth","numberOfIterations","discardThreshold","epsilon","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:15}),ke=Object(u.b)("trackers/lk.glsl").withArguments("encodedFlow","prevKeypoints","nextPyramid","prevPyramid","windowSize","level","depth","numberOfIterations","discardThreshold","epsilon","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:11}),Pe=Object(u.b)("trackers/lk.glsl").withArguments("encodedFlow","prevKeypoints","nextPyramid","prevPyramid","windowSize","level","depth","numberOfIterations","discardThreshold","epsilon","descriptorSize","extraSize","encoderLength").withDefines({MAX_WINDOW_SIZE:7}),Te=Object(u.b)("trackers/lk-discard.glsl").withArguments("pyramid","encodedKeypoints","windowSize","discardThreshold","descriptorSize","extraSize","encoderLength"),ze=Object(u.b)("trackers/transfer-flow.glsl").withArguments("encodedFlow","encodedKeypoints","descriptorSize","extraSize","encoderLength");class Re extends v{constructor(e,t,n){super(e,t,n),this.declare("_lk",Xe,{...this.program.usesPingpongRendering()}).declare("_lkSmall",Le,{...this.program.usesPingpongRendering()}).declare("_lkSmaller",ke,{...this.program.usesPingpongRendering()}).declare("_lkSmallest",Pe,{...this.program.usesPingpongRendering()}).declare("_lkDiscard",Te).declare("_transferFlow",ze)}lk(e,t,n,i,r,s,o,a,c,h,d){const u=l.l;r=Math.max(1,Math.min(0|r,u)),i+=(i+1)%2,i=Math.max(5,Math.min(i,21)),s=Math.max(1,s);let p=null;p=i<=7?this._lkSmallest:i<=11?this._lkSmaller:i<=15?this._lkSmall:this._lk;const f=j.capacity(c,h,d),m=Math.max(1,Math.ceil(Math.sqrt(f)));p.setOutputSize(m,m);let _=p.clear();for(let l=r-1;l>=0;l--)_=p(_,n,e,t,i,l,r,s,o,a,c,h,d);this._transferFlow.setOutputSize(d,d);const g=this._transferFlow(_,n,c,h,d);return this._lkDiscard.setOutputSize(d,d),this._lkDiscard(e,g,i,o,c,h,d)}}const Ce=Object(u.b)("transforms/warp-perspective.glsl").withArguments("image","inverseHomography"),Ne=Object(u.b)("transforms/resize.glsl").withDefines({INTERPOLATION_METHOD:0}).withArguments("image"),Fe=Object(u.b)("transforms/resize.glsl").withDefines({INTERPOLATION_METHOD:1}).withArguments("image");class De extends v{constructor(e,t,n){super(e,t,n),this.declare("_warpPerspective",Ce).declare("resizeNN",Ne).declare("resizeBI",Fe)}warpPerspective(e,t){if(!Array.isArray(t)||9!=t.length)throw new s.f("Not a homography: "+t);const n=this._inverse3(t);return Number.isNaN(n[0])?this._warpPerspective(e,[0,0,0,0,0,0,0,0,1]):this._warpPerspective(e,n)}_inverse3(e){const t=Number.NaN,n=[t,t,t,t,t,t,t,t,t],i=e[0],r=e[1],s=e[2],o=e[3],a=e[4],c=e[5],l=e[6],h=e[7],d=e[8],u=d*a-c*h,p=d*o-c*l,f=h*o-a*l,m=i*u-r*p+s*f;if(!(Math.abs(m)<1e-6)){const e=1/m;n[0]=u*e,n[1]=-(d*r-s*h)*e,n[2]=(c*r-s*a)*e,n[3]=-p*e,n[4]=(d*i-s*l)*e,n[5]=-(c*i-s*o)*e,n[6]=f*e,n[7]=-(h*i-r*l)*e,n[8]=(a*i-r*o)*e}return n}}class Ke{constructor(e,t,n){this._gpu=e,this._width=t,this._height=n,this._utils=null,this._colors=null,this._filters=null,this._keypoints=null,this._encoders=null,this._descriptors=null,this._enhancements=null,this._trackers=null,this._transforms=null,this._pyramids=new Array(l.l).fill(null)}get width(){return this._width}get height(){return this._height}get utils(){return this._utils||(this._utils=new O(this._gpu,this._width,this._height))}get colors(){return this._colors||(this._colors=new M(this._gpu,this._width,this._height))}get filters(){return this._filters||(this._filters=new R(this._gpu,this._width,this._height))}get keypoints(){return this._keypoints||(this._keypoints=new ce(this._gpu,this._width,this._height))}get encoders(){return this._encoders||(this._encoders=new ye(this._gpu,this._width,this._height))}get trackers(){return this._trackers||(this._trackers=new Re(this._gpu,this._width,this._height))}get enhancements(){return this._enhancements||(this._enhancements=new Me(this._gpu,this._width,this._height))}get transforms(){return this._transforms||(this._transforms=new De(this._gpu,this._width,this._height))}pyramids(e=0){const t=0|e,n=1<<t;if(t<0||t>=l.l)throw new s.f(`Invalid pyramid level: ${t} (outside of range [0,${l.l-1}])`);return this._pyramids[t]||(this._pyramids[t]=new be(this._gpu,Math.max(1,Math.floor(this._width/n)),Math.max(1,Math.floor(this._height/n))))}release(){for(const e in this)Object.prototype.hasOwnProperty.call(this,e)&&null!=this[e]&&this[e]instanceof v&&this[e].release();for(let e=0;e<this._pyramids.length;e++)null!=this._pyramids[e]&&this._pyramids[e].release();return null}}const je=Symbol("Bucket");class $e{constructor(e,t,n){this.texture=e,this.index=t,this.next=n,this.free=!0}}class Be{constructor(e,t=64){i.a.assert(t>0),this._bucket=Array.from({length:t},(e,t)=>new $e(null,t,t-1)),this._head=t-1,this._gpu=e}allocate(){if(this._head<0)throw new s.j(`Exhausted pool (capacity: ${this._bucket.length})`);const e=this._bucket[this._head];return e.free=!1,this._head=e.next,null==e.texture&&(e.texture=Be._createManagedTexture(this._gpu.gl,e)),e.texture}free(e){const t=e[je];return i.a.assert(void 0!==t&&!t.free,"Unmanaged texture or double free"),t.next=this._head,t.free=!0,this._head=t.index,null}release(){for(let e=0;e<this._bucket.length;e++)null!=this._bucket[e].texture&&(this._bucket[e].texture=this._bucket[e].texture.release());return null}static _createManagedTexture(e,t){const n=new d(e,1,1);return Object.defineProperty(n,je,{configurable:!1,enumerable:!1,writable:!1,value:t})}}class qe{constructor(){this._data=null,this._width=0,this._height=0}static load(e){const t=e.constructor.name;if("HTMLImageElement"==t)return(new Ue)._load(e);if("HTMLVideoElement"==t)return(new Ge)._load(e);if("HTMLCanvasElement"==t)return(new Ye)._load(e);if("ImageBitmap"==t)return(new We)._load(e);throw new s.f("Unsupported media type: "+e)}get data(){return this._data}get width(){return this._width}get height(){return this._height}isLoaded(){return null!==this._data}get type(){throw new s.a}clone(){throw new s.a}_load(){throw new s.a}_waitUntil(e,t,n=3e4){return new r.a((r,o)=>{i.a.log(`Waiting for ${t} to be triggered in ${e}...`);const a=setTimeout(()=>{o(new s.l(`${t} has not been triggered in ${e}: timeout (${n}ms)`))},n);e.addEventListener(t,()=>{clearTimeout(a),r(e)},!1)})}}class Ue extends qe{get type(){return x.d.Image}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=this._data.cloneNode(!0);return(new Ue)._load(e)}_load(e){return e.complete&&0!==e.naturalWidth?r.a.resolve().then(()=>(this._data=e,this._width=e.naturalWidth,this._height=e.naturalHeight,this)):this._waitUntil(e,"load").then(()=>(this._data=e,this._width=e.naturalWidth,this._height=e.naturalHeight,this))}}class Ge extends qe{get type(){return x.d.Video}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=this._data.cloneNode(!0);return(new Ge)._load(e)}_load(e){return e.readyState>=4?r.a.resolve().then(()=>(this._data=e,this._width=e.videoWidth,this._height=e.videoHeight,this)):this._waitUntil(e,"canplaythrough").then(()=>(this._data=e,this._width=e.videoWidth,this._height=e.videoHeight,this))}}class Ye extends qe{get type(){return x.d.Canvas}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=i.a.createCanvas(this._width,this._height);return e.getContext("2d").draw(this._data,0,0),(new Ye)._load(e)}_load(e){return r.a.resolve().then(()=>(this._data=e,this._width=e.width,this._height=e.height,this))}}class We extends qe{get type(){return x.d.Bitmap}clone(){if(null==this._data)throw new s.g("Media not loaded");const e=new We;return createImageBitmap(this._data).then(t=>e._load(t))}_load(e){return r.a.resolve().then(()=>(this._data=e,this._width=e.width,this._height=e.height,this))}}class He{constructor(e){this._gpu=e,this._texture=new Array(2).fill(null),this._textureIndex=0}upload(e,t=null){const n=this._gpu.gl,i=e.data;if(null==t&&null==this._texture[0])for(let t=0;t<this._texture.length;t++)this._texture[t]=new h(n,e.width,e.height);return"HTMLVideoElement"==i.constructor.name&&i.readyState<2?t||this._texture[this._textureIndex]:null!=t?t.upload(i,e.width,e.height):(this._textureIndex=(this._textureIndex+1)%2,this._texture[this._textureIndex].upload(i,e.width,e.height))}release(){for(let e=0;e<this._texture.length;e++)null!=this._texture[e]&&(this._texture[e]=this._texture[e].release());return null}}class Qe{constructor(e,t){if(e>l.j||t>l.j)throw new s.i(`Maximum texture size exceeded. Using ${e} x ${t}, expected up to ${l.j} x ${l.j}.`);if(e<1||t<1)throw new s.f(`Invalid texture size: ${e} x ${t}`);this._speedyGL=c.instance,this._width=0|e,this._height=0|t,this._programs=new Ke(this,this._width,this._height),this._texturePool=new Be(this),this._textureUploader=new He(this),this._speedyGL.subscribe(this._reset=this._reset.bind(this))}get programs(){return this._programs}get gl(){return this._speedyGL.gl}get canvas(){return this._speedyGL.canvas}get texturePool(){return this._texturePool}renderToCanvas(e){return this.programs.utils.renderToCanvas(e)}upload(e,t=null){return this._textureUploader.upload(e,t)}release(){return i.a.assert(!this.isReleased()),this._programs=this._programs.release(),this._texturePool=this._texturePool.release(),this._textureUploader=this._textureUploader.release(),this._speedyGL.unsubscribe(this._reset),null}isReleased(){return null==this._programs}loseAndRestoreWebGLContext(){return this._speedyGL.loseAndRestoreContext().then(()=>{})}_reset(){this.isReleased()||(this._programs=new Ke(this,this._width,this._height),this._texturePool=new Be(this),this._textureUploader=new He(this))}}const Ve={};class Ze{constructor(){this._loadOptions=()=>({})}run(e,t,n){return r.a.resolve(e)}release(){}_saveOptions(e,t={}){if("object"==typeof e){const n=Object.assign(t,e);this._loadOptions=()=>n}else{if("function"!=typeof e)throw new s.f("Expected an options object | function");this._loadOptions=()=>Object.assign(t,e())}}}Ve.ConvertToGreyscale=class extends Ze{run(e,t,n){let[i,o]=e;if(o==x.b.RGB)i=t.programs.colors.rgb2grey(i);else if(o!=x.b.Greyscale)throw new s.i("Can't convert image to greyscale: unknown color format");return r.a.resolve([i,x.b.Greyscale])}},Ve.Blur=class extends Ze{constructor(e={}){super(),this._saveOptions(e,{filter:"gaussian",size:5})}run(e,t,n){const{filter:i,size:o}=this._loadOptions();let[a,c]=e;if("gaussian"!=i&&"box"!=i)throw new s.f(`Invalid filter: "${i}"`);if(3!=o&&5!=o&&7!=o)throw new s.f("Invalid kernel size: "+o);const l=("gaussian"==i?"gauss":"box")+o,h=t.programs.filters[l](a);return r.a.resolve([h,c])}},Ve.Median=class extends Ze{constructor(e={}){super(),this._saveOptions(e,{size:5})}run(e,t,n){const{size:i}=this._loadOptions();let[o,a]=e;if(3!=i&&5!=i&&7!=i)throw new s.f("Invalid window size: "+i);if(a!=x.b.Greyscale)throw new s.i("The median filter requires a greyscale image as input");const c="median"+i,l=t.programs.filters[c](o);return r.a.resolve([l,a])}},Ve.Convolve=class extends Ze{constructor(e,t=1){let n=new Float32Array(e).map(e=>e/t);const i=n.length,r=0|Math.sqrt(i),o={3:["createKernel3x3","texConv2D3"],5:["createKernel5x5","texConv2D5"],7:["createKernel7x7","texConv2D7"]}[r]||null;if(super(),1==i)throw new s.f("Cannot convolve with a kernel containing a single element");if(r*r!=i||!o)throw new s.f(`Cannot convolve with a non-square kernel of ${i} elements`);const a=Math.min(...n),c=Math.max(...n),l=a,h=Math.abs(c-a)>1e-5?c-a:1;n=n.map(e=>(e-l)/h),this._method=o,this._scale=h,this._offset=l,this._kernel=n,this._kernelSize=r,this._texKernel=null,this._gl=null}run(e,t,n){let[s,o]=e;if(t.gl.isContextLost())this._texKernel=null,this._gl=null;else if(null==this._texKernel||this._gl!==t.gl&&null!==this._gl){if(this._gl!==t.gl&&null!==this._gl&&!this._gl.isContextLost()){const e="Performance warning: need to recreate the texture kernel. Consider duplicating the pipeline when using convolutions for different media objects.";i.a.warning(e),this._texKernel.release()}const e=t.programs.filters[this._method[0]](this._kernel);this._texKernel=e.clone(),this._gl=t.gl}const a=t.programs.filters[this._method[1]](s,this._texKernel,this._scale,this._offset);return r.a.resolve([a,o])}release(){null!=this._texKernel&&(this._texKernel.release(),this._texKernel=this._gl=null),super.release()}},Ve.Normalize=class extends Ze{constructor(e={}){super(),this._saveOptions(e,{min:void 0,max:void 0})}run(e,t,n){let[i,o]=e;const{min:a,max:c}=this._loadOptions();let l;if(o==x.b.RGB)l=t.programs.enhancements.normalizeColoredImage(i,a,c);else{if(o!=x.b.Greyscale)throw new s.i("Invalid color format");l=t.programs.enhancements.normalizeGreyscaleImage(i,a,c)}return r.a.resolve([l,o])}},Ve.Nightvision=class extends Ze{constructor(e={}){super(),this._saveOptions(e,{gain:void 0,offset:void 0,decay:void 0,quality:void 0})}run(e,t,n){let[i,o]=e;const{gain:a,offset:c,decay:l,quality:h}=this._loadOptions();let d;if(o==x.b.RGB)d=t.programs.enhancements.nightvision(i,a,c,l,h,!1);else{if(o!=x.b.Greyscale)throw new s.i("Invalid color format");d=t.programs.enhancements.nightvision(i,a,c,l,h,!0)}return r.a.resolve([d,o])}},Ve.WarpPerspective=class extends Ze{constructor(e={}){super(),this._saveOptions(e,{homography:[1,0,0,0,1,0,0,0,1]})}run(e,t,n){let[i,o]=e;const{homography:a}=this._loadOptions();if(!Array.isArray(a)||9!=a.length)throw new s.f("Invalid homography: "+a);const c=t.programs.transforms.warpPerspective(i,a);return r.a.resolve([c,o])}};class Je{constructor(){this._operations=[]}get length(){return this._operations.length}release(){return new r.a((e,t)=>{for(let e=this._operations.length-1;e>=0;e--)this._operations[e].release();this._operations.length=0,e(this)})}_spawn(e){return this._operations.push(e),this}_run(e,t,n,i=0){return i>=this._operations.length?r.a.resolve(e):this._operations[i].run(e,t,n).then(e=>this._run(e,t,n,i+1))}concat(e){if(e instanceof Je)return this._operations=this._operations.concat(e._operations),this;throw new s.f(`Invalid argument "${e}" given to SpeedyPipeline.concatenate()`)}convertTo(e=null){if("greyscale"==e||"grayscale"==e)return this._spawn(new Ve.ConvertToGreyscale);throw new s.f(`Can't convert to unknown color space: "${e}"`)}blur(e={}){return this._spawn(new Ve.Blur(e))}median(e={}){return this._spawn(new Ve.Median(e))}convolve(e,t=1){return this._spawn(new Ve.Convolve(e,t))}normalize(e={}){return this._spawn(new Ve.Normalize(e))}nightvision(e={}){return this._spawn(new Ve.Nightvision(e))}warpPerspective(e={}){return this._spawn(new Ve.WarpPerspective(e))}}class et{constructor(e,t={},n=x.b.RGB){i.a.assert(e.isLoaded()),this._source=e,this._options=this._buildOptions(t,{usage:this._source.type==x.d.Video?"dynamic":"static"}),this._colorFormat=n,this._gpu=t.lightweight?Object.create(null):new Qe(this._source.width,this._source.height),this._source.type==x.d.Canvas&&void 0===this._options.usage&&i.a.warning('Loading a canvas without an explicit usage flag. I will set the usage to "static". This will result in suboptimal performance if the canvas is animated')}static load(e,t={}){return qe.load(e).then(n=>{i.a.assert(0!==n.width&&0!==n.height);const r=new et(n,t);return i.a.log(`Loaded SpeedyMedia with a ${e}.`),r})}static loadCameraStream(e,t,n={},r={}){return i.a.requestCameraStream(e,t,n).then(e=>et.load(e,r))}get source(){return this._source.data}get width(){return this._source.width}get height(){return this._source.height}get type(){switch(this._source.type){case x.d.Image:return"image";case x.d.Video:return"video";case x.d.Canvas:return"canvas";case x.d.Bitmap:return"bitmap";default:return"unknown"}}get options(){return this._options}release(){return this.isReleased()||(i.a.log("Releasing SpeedyMedia object..."),this._gpu=this._gpu.release()),r.a.resolve()}isReleased(){return null==this._gpu}clone(){if(this.isReleased())throw new s.g("Can't clone a SpeedyMedia that has been released");const e=new et(this._source,this.options,this._colorFormat);return r.a.resolve(e)}run(e){if(this.isReleased())throw new s.g("Can't run pipeline: the SpeedyMedia has been released");const t=this._upload();return e._run([t,this._colorFormat],this._gpu,this).turbocharge().then(([e,t])=>{const n=this._gpu.renderToCanvas(e);return createImageBitmap(n,0,n.height-this.height,this.width,this.height).then(e=>qe.load(e).then(e=>new et(e,{},t)))})}draw(e,t=0,n=0,i=this.width,r=this.height){if(this.isReleased())return;i=Math.max(+i,0),r=Math.max(+r,0),e.getContext("2d").drawImage(this._source.data,+t,+n,i,r)}toBitmap(){if(this.isReleased())throw new s.g("Can't convert SpeedyMedia to ImageBitmap: the media has been released");if(!this._source.isLoaded())throw new s.g("Can't convert SpeedyMedia to bitmap: the media hasn't been loaded");return createImageBitmap(this._source.data)}_buildOptions(e,t){return"dynamic"!=(e=Object.assign({},t,e)).usage&&"static"!=e.usage&&(i.a.warning(`Can't load media. Unrecognized usage option: "${e.usage}"`),e.usage=t.usage,i.a.assert("dynamic"==e.usage||"static"==e.usage)),Object.freeze(e)}_upload(){return this._gpu.upload(this._source)}}let tt=null;class nt{constructor(){if(this._fps=60,this._frames=0,this._updateInterval=500,this._lastUpdate=performance.now(),this._boundUpdate=this._update.bind(this),null!==tt)throw new s.g("Can't have multiple instances of FPSCounter");this._boundUpdate()}static get instance(){return null===tt&&(tt=new nt),tt}get fps(){return this._fps}_update(){const e=performance.now(),t=e-this._lastUpdate;t>=this._updateInterval&&(this._fps=Math.round(this._frames/(.001*t)),this._frames=0,this._lastUpdate=e),this._frames++,requestAnimationFrame(this._boundUpdate)}}class it{constructor(){throw new s.a("Namespaces can't be instantiated")}}const rt=Object.freeze({});class st{constructor(e=0,t=0){i.a.assert(e<=l.i),i.a.assert(e%4==0),i.a.assert(t%4==0),this._descriptorSize=e,this._extraSize=t}run(e,t){throw new s.a}download(e,t,n=0){throw new s.a}get extraSize(){return this._extraSize}set extraSize(e){this._extraSize=Math.max(0,0|e),i.a.assert(this._extraSize%4==0)}get descriptorSize(){return this._descriptorSize}set descriptorSize(e){this._descriptorSize=Math.max(0,0|e),i.a.assert(this._descriptorSize%4==0)}get encoderLength(){throw new s.a}}const ot=j.capacity(0,0,l.c);class at{constructor(){this._gain=.85,this._state=ot,this._prevState=this._state}estimate(e){const t=Math.max(0,this._state+(this._state-this._prevState)),n=t+this._gain*(e-t);return this._gain=Math.min(.85,this._gain+.3),this._prevState=this._state,this._state=n,Math.round(this._state)}reset(){this._gain=0,this._state=this._prevState=ot}get maxGrowth(){return 1.5}}class ct{constructor(){this._encoderLength=l.c,this._estimator=new at}download(e,t,n,r,o=0){i.a.assert(t.width===t.height),i.a.assert(t.width===this._encoderLength),o&0!=ct.RESET_DOWNLOADER_STATE&&this._estimator.reset();const a=0!=(o&ct.USE_BUFFERED_DOWNLOADS);return e.programs.encoders.downloadEncodedKeypoints(t,a).then(e=>{const i=t.width,s=0!=(o&ct.SUPPRESS_DESCRIPTORS)?0:1,a=j.decode(e,n*s,r,i),c=this._countDiscardedKeypoints(a),l=this._estimator.estimate(a.length-c),h=Math.max(l,32),d=this._estimator.maxGrowth*h;return this._encoderLength=j.minLength(d,n,r),a}).catch(e=>{throw new s.g("Can't download keypoints",e)})}get encoderLength(){return this._encoderLength}reserveSpace(e,t,n,i=!1){const r=j.minLength(e,t,n);this._encoderLength=i?r:Math.max(this._encoderLength,r)}_countDiscardedKeypoints(e){let t,n=0;for(t=e.length-1;t>=0;t--)n+=0!=(e[t].flags&l.d)|0;return n}static get RESET_DOWNLOADER_STATE(){return 1}static get USE_BUFFERED_DOWNLOADS(){return 2}static get SUPPRESS_DESCRIPTORS(){return 4}}const lt=Object.freeze({gain:.9,offset:.5,decay:0,quality:"low"});class ht extends st{constructor(){super(0,0),this._enhancements=null,this._downloader=new ct}run(e,t){const n=this._enhanceTexture(e,t);return this._detect(e,n)}download(e,t,n=0){return this._downloader.download(e,t,this.descriptorSize,this.extraSize,n)}get encoderLength(){return this._downloader.encoderLength}get downloader(){return this._downloader}setEnhancements(e){this._enhancements=!0===e?lt:"object"==typeof e&&null!==e?Object.assign({},lt,e):null}_detect(e,t){throw new s.a}_enhanceTexture(e,t){let n=t;const i=this._enhancements;return null!==i&&(n=e.programs.enhancements.nightvision(n,i.gain,i.offset,i.decay,i.quality,!0),n=e.programs.filters.gauss3(n)),n}}class dt extends st{constructor(e,t=0,n=0){i.a.assert(e instanceof st),i.a.assert(t>=e.descriptorSize),i.a.assert(n>=e.extraSize),super(t,n),this._decoratedAlgorithm=e,this._decoratedAlgorithm.descriptorSize=this.descriptorSize,this._decoratedAlgorithm.extraSize=this.extraSize}run(e,t){return this._decoratedAlgorithm.run(e,t)}download(e,t,n=0){return i.a.assert(this.extraSize==this._decoratedAlgorithm.extraSize),i.a.assert(this.descriptorSize==this._decoratedAlgorithm.descriptorSize),this._decoratedAlgorithm.download(e,t,n)}get decoratedAlgorithm(){return this._decoratedAlgorithm}get extraSize(){return super.extraSize}set extraSize(e){super.extraSize=e,this._decoratedAlgorithm.extraSize=e}get descriptorSize(){return super.descriptorSize}set descriptorSize(e){super.descriptorSize=e,this._decoratedAlgorithm.descriptorSize=e}get encoderLength(){return this._decoratedAlgorithm.encoderLength}}class ut extends dt{constructor(e,t){i.a.assert(e instanceof st),i.a.assert(t>0),super(e,t,e.extraSize)}run(e,t){const n=this.decoratedAlgorithm.run(e,t);return this._describe(e,t,n)}download(e,t,n=0){return super.download(e,t,n).then(e=>this._postProcess(e))}_describe(e,t,n){throw new s.a}_postProcess(e){throw new s.a}}class pt extends ht{constructor(){super(),this._n=9,this._threshold=20}get n(){return this._n}set n(e){this._n=0|e,i.a.assert(9===this._n||7===this._n||5===this._n)}get threshold(){return this._threshold}set threshold(e){this._threshold=0|e,i.a.assert(this._threshold>=0&&this._threshold<=255)}_detect(e,t){const n=this._n,i=this._threshold/255,r=this.descriptorSize,o=this.extraSize,a=this.encoderLength;let c=null;if(9==n)c=e.programs.keypoints.fast9(t,i);else if(7==n)c=e.programs.keypoints.fast7(t,i);else{if(5!=n)throw new s.i;c=e.programs.keypoints.fast5(t,i)}const l=e.programs.keypoints.nonMaxSuppression(c),h=e.programs.keypoints.encodeFastScore(l);return e.programs.encoders.encodeKeypoints(h,r,o,a)}}class ft extends ht{constructor(){super(),this._n=9,this._threshold=20,this._depth=4,this._scaleFactor=1.4142135623730951}get n(){return this._n}set n(e){this._n=0|e,i.a.assert(9===this._n)}get threshold(){return this._threshold}set threshold(e){this._threshold=0|e,i.a.assert(this._threshold>=0&&this._threshold<=255)}get depth(){return this._depth}set depth(e){this._depth=0|e,i.a.assert(this._depth>=1&&this._depth<=l.l)}get scaleFactor(){return this._scaleFactor}set scaleFactor(e){this._scaleFactor=Math.min(Math.max(1,+e),2)}_detect(e,t){const n=this._threshold/255,i=2*this._depth-1,r=Math.log2(this._scaleFactor),s=this.descriptorSize,o=this.extraSize,a=this.encoderLength,c=t.generateMipmaps(e),l=e.programs.keypoints.multiscaleFast(c,n,i,r),h=e.programs.keypoints.nonMaxSuppression(l,r),d=e.programs.keypoints.encodeFastScore(h);return e.programs.encoders.encodeKeypoints(d,s,o,a)}}const mt=2*l.l-1;class _t extends ht{constructor(){super(),this._quality=.1}get quality(){return this._quality}set quality(e){this._quality=+e,i.a.assert(this._quality>=0&&this._quality<=1)}_detect(e,t){const{width:n,height:i}=e.programs.keypoints.multiscaleSobel,r=this._quality,s=this.descriptorSize,o=this.extraSize,a=this.encoderLength;e.programs.keypoints.multiscaleSobel.outputs(n,i,null);const c=e.programs.keypoints.multiscaleSobel(t,0),l=new Array(mt).fill(c),h=e.programs.keypoints.multiscaleHarris(t,3,1,1,l),d=Math.ceil(Math.log2(Math.max(h.width,h.height)));let u=h;for(let t=0;t<d;t++)u=e.programs.keypoints.maxHarrisScore(u,t);const p=e.programs.keypoints.harrisCutoff(h,u,r),f=e.programs.keypoints.nonMaxSuppression(p),m=e.programs.keypoints.encodeHarrisScore(f);return e.programs.encoders.encodeKeypoints(m,s,o,a)}}class gt extends ht{constructor(){super(),this._quality=.1,this._depth=4,this._scaleFactor=1.4142135623730951,this._derivativesTexture=Array.from({length:mt},()=>new d(c.instance.gl,1,1))}get quality(){return this._quality}set quality(e){this._quality=+e,i.a.assert(this._quality>=0&&this._quality<=1)}get depth(){return this._depth}set depth(e){this._depth=0|e,i.a.assert(this._depth>=1&&this._depth<=l.l)}get scaleFactor(){return this._scaleFactor}set scaleFactor(e){this._scaleFactor=Math.min(Math.max(1,+e),2)}_detect(e,t){const{width:n,height:i}=e.programs.keypoints.multiscaleSobel,r=this._quality,s=this._depth,o=this.descriptorSize,a=this.extraSize,c=this.encoderLength,l=2*s-1,h=Math.log2(this._scaleFactor),d=t.generateMipmaps(e),u=new Array(mt);for(let t=0;t<l;t++)e.programs.keypoints.multiscaleSobel.outputs(n,i,this._derivativesTexture[t]),u[t]=e.programs.keypoints.multiscaleSobel(d,t*h),e.programs.keypoints.multiscaleSobel.outputs(n,i,null);for(let e=l;e<u.length;e++)u[e]=u[e-1];const p=e.programs.keypoints.multiscaleHarris(d,3,l,h,u),f=Math.ceil(Math.log2(Math.max(p.width,p.height)));let m=p;for(let t=0;t<f;t++)m=e.programs.keypoints.maxHarrisScore(m,t);const _=e.programs.keypoints.harrisCutoff(p,m,r),g=e.programs.keypoints.nonMaxSuppression(_,h),v=e.programs.keypoints.encodeHarrisScore(g);return e.programs.encoders.encodeKeypoints(v,o,a,c)}}class vt{constructor(e,...t){this._decorator=e,this._args=t}decorate(e){const t=Reflect.construct(this._decorator,[e].concat(this._args));return i.a.assert(t instanceof dt),t}}class xt{constructor(e){this._algorithm=e,this._decoratedAlgorithm=this._algorithm,this._sensitivity=0,this._max=void 0,this._capKeypoints=this._capKeypoints.bind(this),this._enhancements={denoise:!0,illumination:!1,nightvision:null},this._useBufferedDownloads=!0}link(e){return this._decoratedAlgorithm=e.decorate(this._decoratedAlgorithm),this}detect(e){const t=e._gpu,n="static"==e.options.usage,i=this._decoratedAlgorithm.descriptorSize,r=this._decoratedAlgorithm.extraSize;let o=0;if(e.isReleased())throw new s.g("Can't detect features: the SpeedyMedia has been released");if(n){const e=8192;this._algorithm.downloader.reserveSpace(e,i,r)}else this._useBufferedDownloads&&(o|=ct.USE_BUFFERED_DOWNLOADS);const a=e._upload(),c=this._preprocessTexture(t,a,1==this._enhancements.denoise,e._colorFormat!=x.b.Greyscale);this._algorithm.setEnhancements(this._enhancements.nightvision||this._enhancements.illumination);const l=this._decoratedAlgorithm.run(t,c);return this._decoratedAlgorithm.download(t,l,o).then(this._capKeypoints)}get sensitivity(){return this._sensitivity}set sensitivity(e){this._sensitivity=Math.max(0,Math.min(+e,1)),this._onSensitivityChange(this._sensitivity)}get max(){return this._max}set max(e){this._max=void 0!==e?Math.max(0,0|e):void 0}enhance(e){if("object"!=typeof e)throw new s.f("enhancements must be an object");this._enhancements=Object.assign(this._enhancements,e)}get useBufferedDownloads(){return this._useBufferedDownloads}set useBufferedDownloads(e){this._useBufferedDownloads=Boolean(e)}_preprocessTexture(e,t,n=!0,i=!0){let r=t;return n&&(r=e.programs.filters.gauss5(r)),i&&(r=e.programs.colors.rgb2grey(r)),r}_onSensitivityChange(e){throw new s.a}_compareKeypoints(e,t){return+t.score-+e.score}_capKeypoints(e){return void 0===this._max||(e.sort(this._compareKeypoints),e.length=Math.min(e.length,this._max)),e}}class yt extends xt{constructor(e=9){if(super(new pt),9!==e&&7!==e&&5!==e)throw new s.i("Can't create FAST feature detector with n = "+e);this._algorithm.n=e}get n(){return this._algorithm.n}get threshold(){return this._algorithm.threshold}set threshold(e){this._algorithm.threshold=e}_onSensitivityChange(e){this.threshold=Math.round(255*(1-Math.tanh(2.77*e)))}}class St extends xt{constructor(e=9){if(super(new ft),9!==e)throw new s.i("Can't create Multiscale FAST feature detector with n = "+e);this._algorithm.n=e}get n(){return this._algorithm.n}get threshold(){return this._algorithm.threshold}set threshold(e){this._algorithm.threshold=e}get depth(){return this._algorithm.depth}set depth(e){this._algorithm.depth=e}get scaleFactor(){return this._algorithm.scaleFactor}set scaleFactor(e){this._algorithm.scaleFactor=e}_onSensitivityChange(e){this.threshold=Math.round(255*(1-Math.tanh(2.77*e)))}}class wt extends xt{constructor(){super(new _t)}get quality(){return this._algorithm.quality}set quality(e){this._algorithm.quality=Math.max(0,Math.min(e,1))}_onSensitivityChange(e){this.quality=1-e}}class bt extends xt{constructor(){super(new gt)}get depth(){return this._algorithm.depth}set depth(e){this._algorithm.depth=e}get scaleFactor(){return this._algorithm.scaleFactor}set scaleFactor(e){this._algorithm.scaleFactor=e}get quality(){return this._algorithm.quality}set quality(e){this._algorithm.quality=Math.max(0,Math.min(e,1))}_onSensitivityChange(e){this.quality=1-e}}class At extends ut{constructor(e){super(e,32)}_describe(e,t,n){const i=this.descriptorSize,r=this.extraSize,s=this.encoderLength,o=this._computeOrientation(e,t,n),a=e.programs.filters.gauss7(t).generateMipmaps(e);return e.programs.keypoints.orb(a,o,i,r,s)}_computeOrientation(e,t,n){const i=this.descriptorSize,r=this.extraSize,s=this.encoderLength,o=t.generateMipmaps(e);return e.programs.keypoints.orbOrientation(o,n,i,r,s)}_postProcess(e){return e.map(e=>new D(e,e=>new C(e)))}}class Et extends it{static ORB(){return new vt(At)}}class Ot extends it{static FAST(e=9){return new yt(e)}static MultiscaleFAST(e=9){return new St(e)}static Harris(){return new wt}static MultiscaleHarris(){return new bt}static ORB(){const e=Et.ORB(),t=(new bt).link(e);return t.scaleFactor=1.19,t}static BRISK(){throw new s.h}}class It extends st{constructor(){super(0,0),this._prevImage=null,this._prevKeypoints=null,this._downloader=new ct}run(e,t){return this._track(e,t)}get prevImage(){return this._prevImage}set prevImage(e){this._prevImage=e}get prevKeypoints(){return this._prevKeypoints}set prevKeypoints(e){this._prevKeypoints=e}download(e,t,n=0){return n&0!=ct.USE_BUFFERED_DOWNLOADS&&i.a.warning("Feature trackers shouldn't use buffered downloads"),this._downloader.download(e,t,this.descriptorSize,this.extraSize,n)}get encoderLength(){return this._downloader.encoderLength}get downloader(){return this._downloader}upload(e,t){const n=j.minLength(t.length,this.descriptorSize,this.extraSize);return e.programs.encoders.uploadKeypoints(t,this.descriptorSize,this.extraSize,n)}_track(e,t){throw new s.a}}class Mt{constructor(e,t){return this.x=+e,this.y=+t,Object.freeze(this)}toString(){return`SpeedyVector2(${this.x.toFixed(5)}, ${this.y.toFixed(5)})`}equals(e){return this.x===e.x&&this.y===e.y}dot(e){return this.x*e.x+this.y*e.y}distanceTo(e){const t=this.x-e.x,n=this.y-e.y;return Math.sqrt(t*t+n*n)}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}normalized(){const e=this.length();return e>0?new Mt(this.x/e,this.y/e):new Mt(0,0)}plus(e){return new Mt(this.x+e.x,this.y+e.y)}minus(e){return new Mt(this.x-e.x,this.y-e.y)}times(e){return new Mt(this.x*e,this.y*e)}}const Xt=Math.min(6,l.l);class Lt extends It{constructor(){super(),this._windowSize=15,this._depth=Xt,this._numberOfIterations=5,this._discardThreshold=1e-4,this._epsilon=.01}get windowSize(){return this._windowSize}set windowSize(e){this._windowSize=0|e,i.a.assert(this._windowSize%2==1&&this._windowSize>=1)}get depth(){return this._depth}set depth(e){this._depth=0|e,i.a.assert(this._depth>=1&&this._depth<=l.l)}get numberOfIterations(){return this._numberOfIterations}set numberOfIterations(e){this._numberOfIterations=0|e,i.a.assert(this._numberOfIterations>=1)}get discardThreshold(){return this._discardThreshold}set discardThreshold(e){this._discardThreshold=+e,i.a.assert(this._discardThreshold>=0)}get epsilon(){return this._epsilon}set epsilon(e){this._epsilon=+e,i.a.assert(this._epsilon>=0)}_track(e,t){const n=this.prevImage,i=this.prevKeypoints,r=this.descriptorSize,s=this.extraSize,o=this.encoderLength,a=this.windowSize,c=this.depth,l=this.numberOfIterations,h=this.discardThreshold,d=this.epsilon,u=t.generateMipmaps(e),p=n.generateMipmaps(e);return e.programs.trackers.lk(u,p,i,a,c,l,h,d,r,s,o)}}class kt extends class{constructor(e,t){this._trackingAlgorithm=e,this._decoratedAlgorithm=this._trackingAlgorithm,this._media=t,this._inputTexture=null,this._prevInputTexture=null}link(e){return this._decoratedAlgorithm=e.decorate(this._decoratedAlgorithm),this}track(e,t=null,n=null){const i=this._media._gpu,r=this._decoratedAlgorithm.descriptorSize,o=this._decoratedAlgorithm.extraSize;if(!Array.isArray(e)||null!=n&&!Array.isArray(n)||null!=t&&!Array.isArray(t))throw new s.f;const[a,c]=this._updatedImages(this._media,i,this._inputTexture);this._prevInputTexture=c,this._inputTexture=a,this._trackingAlgorithm.downloader.reserveSpace(e.length,r,o,!0),this._trackingAlgorithm.prevImage=c,this._trackingAlgorithm.prevKeypoints=this._trackingAlgorithm.upload(i,e);const h=this._decoratedAlgorithm.run(i,a);return this._decoratedAlgorithm.download(i,h,0).then(i=>{const r=[];null!=n&&(n.length=i.length),null!=t&&(t.length=i.length);for(let s=0;s<i.length;s++){const o=0==(i[s].flags&l.d);o&&r.push(i[s]),null!=n&&(n[s]=o),null!=t&&(t[s]=o?new Mt(i[s].x-e[s].x,i[s].y-e[s].y):new Mt(0,0))}return r})}_updatedImages(e,t,n){if(e.isReleased())throw new s.g("The media has been released");const i=e._upload();if(null==i)throw new s.g("Tracking error: can't upload image to the GPU "+e.source);return[i,n||i]}}{constructor(e){super(new Lt,e)}get windowSize(){return this._trackingAlgorithm.windowSize}set windowSize(e){this._trackingAlgorithm.windowSize=0|e}get depth(){return this._trackingAlgorithm.depth}set depth(e){this._trackingAlgorithm.depth=0|e}get discardThreshold(){return this._trackingAlgorithm.discardThreshold}set discardThreshold(e){this._trackingAlgorithm.discardThreshold=+e}get numberOfIterations(){return this._trackingAlgorithm.numberOfIterations}set numberOfIterations(e){this._trackingAlgorithm.numberOfIterations=0|e}get epsilon(){return this._trackingAlgorithm.epsilon}set epsilon(e){this._trackingAlgorithm.epsilon=+e}}class Pt extends it{static LK(e){return new kt(e)}}class Tt{constructor(e,t){return this.x=+e,this.y=+t,Object.freeze(this)}toString(){return`SpeedyPoint2(${this.x.toFixed(5)}, ${this.y.toFixed(5)})`}plus(e){return new Tt(this.x+e.x,this.y+e.y)}minus(e){return new Mt(this.x-e.x,this.y-e.y)}equals(e){return this.x===e.x&&this.y===e.y}}class zt{constructor(e,t){return this.width=Math.max(0,+e),this.height=Math.max(0,+t),Object.freeze(this)}toString(){return`SpeedySize(${this.width}, ${this.height})`}equals(e){return this.width===e.width&&this.height===e.height}}var Rt=n(7);class Ct{constructor(e,t,n=Rt.MatrixType.default){if(this.rows=0|e,this.columns=0|t,this.dtype=String(n),!Rt.MatrixType.isValid(this.dtype))throw new s.f(`Invalid matrix data type: "${this.dtype}"`);if(this.rows<1||this.columns<1)throw new s.f(`Invalid matrix size: ${this.rows} x ${this.columns}`);return Object.freeze(this)}equals(e){return this.rows===e.rows&&this.columns===e.columns&&this.dtype===e.dtype}toString(){return`MatrixShape(rows=${this.rows},cols=${this.columns},dtype="${this.dtype}")`}}class Nt{constructor(e,t=null,n=Rt.MatrixType.default,i=null){if(e|=0,!Rt.MatrixType.isValid(n))throw new s.f(`Invalid data type: "${n}"`);if(e<=0)throw new s.f("Invalid matrix length");const r=null==t?Rt.MatrixType.createTypedArray(n,e):Array.isArray(t)?Rt.MatrixType.createTypedArray(n,t):t;this._dtype=n,this._data=r,this._byteOffset=r.byteOffset,this._length=r.length,this._pendingOperations=i?i._pendingOperations:0,this._pendingAccessesQueue=[],this._children=[],this._parent=i}get dtype(){return this._dtype}get data(){return this._data}ready(){return this._pendingOperations>0?new r.a(e=>{this._pendingAccessesQueue.push(()=>e(this))}):r.a.resolve(this)}lock(e=!0){let t=this;if(e&&t._parent)do{t=t._parent}while(t._parent);++t._pendingOperations;for(let e=t._children.length-1;e>=0;e--)t._children[e].lock(!1)}unlock(e=!0){let t=this;if(e&&t._parent)do{t=t._parent}while(t._parent);if(--t._pendingOperations<=0){const e=t._pendingAccessesQueue.slice(0),n=e.length;t._pendingOperations=0,t._pendingAccessesQueue.length=0;for(let i=0;i<n;i++){if(t._pendingOperations>0){for(let r=n-1;r>=i;r--)t._pendingAccessesQueue.unshift(e[r]);break}e[i].call(t)}}for(let e=t._children.length-1;e>=0;e--)t._children[e].unlock(!1)}replace(e){this._data.buffer!==e&&this._replace(e,!0)}createSharedBuffer(e=0,t=this._length){return this.ready().then(()=>{const n=Math.min(e+t,this._length),i=this._data.subarray(e,n),r=new Nt(t,i,this._dtype,this);return this._children.push(r),r})}_replace(e,t=!0){let n=this;if(n._parent&&t)do{n=n._parent}while(n._parent);n._data=Rt.MatrixType.createTypedArray(this._dtype,e,n._byteOffset,n._length);for(let t=n._children.length-1;t>=0;t--)n._children[t]._replace(e,!1)}}var Ft=n(8);class Dt{constructor(e,t,n,i=null){const r=0|t;this.method=String(e),this.dtype=n.dtype,this.rows=n.rows,this.columns=n.columns,this.stride=0,this.byteOffset=0,this.length=0,this.rowsOfInputs=new Array(r).fill(0),this.columnsOfInputs=new Array(r).fill(0),this.strideOfInputs=new Array(r).fill(0),this.byteOffsetOfInputs=new Array(r).fill(0),this.lengthOfInputs=new Array(r).fill(0),this.custom=new Object(i)}updateMetadata(e,t){this._updateOutputMetadata(e),this._updateInputMetadata(t)}_updateOutputMetadata(e){const t=e.buffer.data;this.stride=e.stride,this.byteOffset=t.byteOffset,this.length=t.length,i.a.assert(e.rows===this.rows&&e.columns===this.columns&&e.dtype===this.dtype)}_updateInputMetadata(e){const t=e.length,n=0==this.rowsOfInputs.length||0==this.rowsOfInputs[0];i.a.assert(this.rowsOfInputs.length===t);for(let r=0;r<t;r++){const t=e[r],s=t.buffer.data;this.strideOfInputs[r]=t.stride,this.byteOffsetOfInputs[r]=s.byteOffset,this.lengthOfInputs[r]=s.length,n?(this.rowsOfInputs[r]=t.rows,this.columnsOfInputs[r]=t.columns):i.a.assert(t.rows===this.rowsOfInputs[r]&&t.columns===this.columnsOfInputs[r]&&t.dtype===this.dtype)}}}class Kt{static get instance(){return this._instance||(this._instance=new Kt)}constructor(){this._msgId=0,this._callbackTable=new Map,this._worker=this._createWorker()}run(e,t,n){if("nop"===e.method)return r.a.resolve([t,n]);const i=this._msgId=this._msgId+1&2147483647,s=n.concat(t).filter((e,t,n)=>n.indexOf(e)===t),o={id:i,header:e,outputBuffer:t,inputBuffers:n,transferables:s};return new r.a(e=>{this._callbackTable.set(i,e),this._worker.postMessage(o,s)})}_createWorker(){const e="self.LinAlg = "+Ft.LinAlg.toString()+";\nself.onmessage = "+jt.toString()+";",t=new Blob([e],{type:"application/javascript"}),n=new Worker(URL.createObjectURL(t));return n.onmessage=e=>{const t=e.data;this._callbackTable.get(t.id)([t.outputBuffer,t.inputBuffers]),this._callbackTable.delete(t.id)},n.onerror=e=>{throw new s.g("Worker error: "+e.message)},n}}function jt(e){const{id:t,header:n,outputBuffer:i,inputBuffers:r,transferables:s}=e.data;self.LinAlg.lib.execute(n,i,r);const o={id:t,outputBuffer:i,inputBuffers:r};self.postMessage(o,s)}const $t=Kt.instance;class Bt{constructor(e,t,n,i=null){this._shape=n,this._header=new Dt(e,t,n,i)}get rows(){return this._shape.rows}get columns(){return this._shape.columns}get dtype(){return this._shape.dtype}get shape(){return this._shape}numberOfInputMatrices(){return this._header.rowsOfInputs.length}run(e,t,n=!0){return n?this._runInWorker(e,t):this._runLocally(e,t)}_runInWorker(e,t){return this._assertCompatibility(t.shape),0==e.length?r.a.resolve():(this._header.updateMetadata(t,e),$t.run(this._header,this._arrayBufferOf(t),this._arrayBuffersOf(e)).then(([n,i])=>{t.buffer.replace(n);for(let t=e.length-1;t>=0;t--)e[t].buffer.replace(i[t])}))}_runLocally(e,t){return this._assertCompatibility(t.shape),0==e.length||(this._header.updateMetadata(t,e),Ft.LinAlg.lib.execute(this._header,this._arrayBufferOf(t),this._arrayBuffersOf(e))),r.a.resolve()}_assertCompatibility(e){if(!this._shape.equals(e))throw this.dtype!==e.dtype?new s.g(`Incompatible matrix type: expected "${e.dtype}", found "${this.dtype}"`):new s.g(`Invalid matrix size: ${this.rows} x ${this.columns} (expected ${e.rows} x ${e.columns})`)}_computeWorkload(e){let t=0;for(let n=e.length-1;n>=0;n--)t+=e[n].rows*e[n].columns;return t}_arrayBuffersOf(e){const t=new Array(e.length);for(let n=t.length-1;n>=0;n--)t[n]=e[n].buffer.data.buffer;return t}_arrayBufferOf(e){return e.buffer.data.buffer}}class qt extends Bt{constructor(e){super("nop",0,e)}}class Ut extends Bt{constructor(e,t){super("fill",0,e,{value:+t})}}class Gt extends Bt{constructor(e){super("copy",1,e)}}class Yt extends Bt{constructor(e){super("transpose",1,new Ct(e.columns,e.rows,e.dtype))}}class Wt extends Bt{constructor(e){i.a.assert(e.rows===e.columns&&e.rows<=3),super("inverse"+String(e.rows),1,e)}}class Ht extends Bt{constructor(e,t){i.a.assert(e.equals(t)),super("add",2,e)}}class Qt extends Bt{constructor(e,t){i.a.assert(e.equals(t)),super("subtract",2,e)}}class Vt extends Bt{constructor(e,t){i.a.assert(e.columns===t.rows&&e.dtype===t.dtype),super(3===e.rows&&3===e.columns&&3===t.columns?"multiply3":"multiply",2,new Ct(e.rows,t.columns,e.dtype))}}class Zt extends Bt{constructor(e,t){super("scale",1,e,{scalar:+t})}}class Jt extends Bt{constructor(e,t){i.a.assert(e.equals(t)),super("compmult",2,e)}}class en extends Bt{constructor(e,t){i.a.assert(e.rows===t.rows&&e.dtype===t.dtype),super("multiplylt",2,new Ct(e.columns,t.columns,e.dtype))}}class tn extends Bt{constructor(e,t){i.a.assert(e.columns===t.columns&&e.dtype===t.dtype),super("multiplyrt",2,new Ct(e.rows,t.rows,e.dtype))}}class nn extends Bt{constructor(e,t){i.a.assert(e.columns===t.rows&&1===t.columns&&e.dtype===t.dtype),super("multiplyvec",2,new Ct(e.rows,1,e.dtype))}}class rn extends Bt{constructor(e,t){const n={full:"full-qr",reduced:"reduced-qr"}[t];if(void 0===n)throw new s.f(`QR decomposition: unknown mode "${t}"`);const i="full-qr"==n?e.columns+e.rows:2*e.columns;super("qr",1,new Ct(e.rows,i,e.dtype),{mode:n})}}class sn extends Bt{constructor(e,t){i.a.assert(e.rows===t.rows&&1===t.columns&&e.dtype===t.dtype),super("qr",2,new Ct(e.rows,e.columns+1,e.dtype),{mode:"reduced-Q'x"})}}class on extends Bt{constructor(e){i.a.assert(e.columns===e.rows+1),super("backsub",1,new Ct(e.rows,1,e.dtype))}}class an extends Bt{constructor(e,t){i.a.assert(e.rows===t.rows&&1===t.columns&&e.dtype===t.dtype),super("lssolve",2,new Ct(e.columns,1,e.dtype))}}class cn extends Bt{constructor(e,t,n,i,r={}){super(e,t,n,{...r,subroutine:i.reduce((e,t)=>Object.assign(e,{[t]:[]}),{})})}static step(e,t,n){return{header:e._header,indexOfOutputMatrix:t,indicesOfInputMatrices:n}}_stepsOf(e){const t=this._header.custom.subroutine;return i.a.assert(Object.prototype.hasOwnProperty.call(t,e)),t[e]}setStepsOf(e,t){const n=this._header.custom.subroutine;i.a.assert(Array.isArray(n[e])&&0==n[e].length),i.a.assert(Array.isArray(t)),n[e]=t}adjustIndices(e,t){const n=this._header.custom.subroutine;for(let i in n)if(Object.prototype.hasOwnProperty.call(n,i)){const r=n[i];for(let n=0,i=r.length,s=null;n<i;n++){s=r[n],s.indexOfOutputMatrix=e(t[s.indexOfOutputMatrix]);for(let n=s.indicesOfInputMatrices.length-1;n>=0;n--)s.indicesOfInputMatrices[n]=e(t[s.indicesOfInputMatrices[n]])}}}}class ln extends cn{constructor(e,t,n){super("sequence",e,t,["sequence"]),this.setStepsOf("sequence",n)}steps(){return this._stepsOf("sequence")}}class hn extends cn{constructor(e){super("sort",4,e,["cmp"])}}class dn extends cn{constructor(e){super("map",4,e,["mapfn"])}}class un extends cn{constructor(e){super("reduce",6,e,["reducefn"])}}class pn extends Bt{constructor(e,t){i.a.assert(e.equals(t)),super("homographynorm4p",2,new Ct(3,3,e.dtype))}}class fn extends Bt{constructor(e,t){i.a.assert(e.equals(t)),super("homographynormdlt",2,new Ct(3,3,e.dtype))}}class mn extends Bt{constructor(e,t){i.a.assert(t.dtype===e.dtype),super("applyHomography",2,t)}}class _n extends Bt{constructor(e,t){i.a.assert(t.dtype===e.dtype),super("applyAffine",2,t)}}class gn extends Bt{constructor(e,t){i.a.assert(t.dtype===e.dtype),super("applyLinear2d",2,t)}}class vn extends Bt{constructor(e,t,n,r,s,o){i.a.assert(e.equals(t)),i.a.assert(e.columns===o.columns),super("pransacHomography",3,new Ct(3,3,e.dtype),{numberOfHypotheses:n,bundleSize:r,reprojectionError:s})}}let xn=null;class yn{constructor(){this._queue=[],this._busy=!1,this._useWorker=!0}static get instance(){return xn||(xn=new yn)}set useWorker(e){this._useWorker=Boolean(e)}get useWorker(){return this._useWorker}enqueue(e,t,n){return new r.a(i=>{this._queue.push([e,n,t,i]),this._busy||(this._busy=!0,this._resolveAll())})}_resolveAll(){if(0==this._queue.length)return void(this._busy=!1);const[e,t,n,i]=this._queue.shift();n.lock();for(let e=t.length-1;e>=0;e--)t[e].lock();e.run(t,n,this._useWorker).then(()=>{for(let e=t.length-1;e>=0;e--)t[e].unlock();n.unlock(),i(),this._resolveAll()}).turbocharge()}}const Sn=yn.instance;class wn{constructor(e,t=null,n=e.rows,i=null){if(this._shape=e,this._stride=0|n,this._buffer=i||new Nt(this.stride*this.columns,t,this.dtype),this._nop=null,this.stride<this.rows)throw new s.f(`Invalid stride (expected ${this.rows} or greater, found ${this.stride})`);if(Array.isArray(t)&&t.length!=this.rows*this.columns)throw new s.f(`Incorrect number of matrix elements (expected ${this.rows*this.columns}, found ${t.length})`)}get rows(){return this._shape.rows}get columns(){return this._shape.columns}get dtype(){return this._shape.dtype}get stride(){return this._stride}get shape(){return this._shape}read(){const e=this.rows,t=this.columns,n=this.stride;return this.sync().then(()=>this._buffer.ready().turbocharge()).then(i=>{const r=i.data,s=new Array(e*t);let o,a,c=0;for(a=0;a<t;a++)for(o=0;o<e;o++)s[c++]=r[a*n+o];return s}).turbocharge()}print(e,t=console.log){return this.read().then(n=>{const i=this.rows,r=this.columns,s=new Array(i);let o,a;for(o=0;o<i;o++)for(s[o]=new Array(r),a=0;a<r;a++)s[o][a]=n[a*i+o];const c=void 0!==e?t=>t.toFixed(e):e=>e,l=s.map(e=>"    "+e.map(c).join(", ")).join(",\n"),h=`SpeedyMatrix(rows=${i}, cols=${r}, dtype="${this.dtype}", data=[\n${l}\n])`;t(h)})}block(e,t,n,i){const r=this.rows,o=this.columns;if(t<e||i<n)throw new s.f(`Can't create empty submatrix - invalid range [${e}:${t}, ${n}:${i}]`);if(e<0||t>=r||n<0||i>=o)throw new s.f(`Can't create submatrix - invalid range [${e}:${t}, ${n}:${i}] of ${r} x ${o} matrix`);const a=t-e+1,c=new Ct(a,i-n+1,this.dtype),l=this.stride,h=n*l+e,d=(i-n)*l+a;return this._buffer.createSharedBuffer(h,d).then(e=>new wn(c,void 0,l,e))}diagonal(){const e=this.rows,t=this.stride,n=Math.min(e,this.columns),i=(n-1)*t+e,r=new Ct(1,n,this.dtype);return this._buffer.createSharedBuffer(0,i).then(e=>new wn(r,void 0,t+1,e))}toString(){return`SpeedyMatrix(rows=${this.rows}, cols=${this.columns}, dtype="${this.dtype}")`}lock(){this._buffer.lock()}unlock(){this._buffer.unlock()}get buffer(){return this._buffer}sync(){return this._nop=this._nop||(this._nop=new qt(this.shape)),Sn.enqueue(this._nop,this,[])}}let bn=null;class An{static get instance(){return bn||(bn=new An)}get useWorker(){return yn.instance.useWorker}set useWorker(e){yn.instance.useWorker=Boolean(e)}}class En{constructor(e,t,n){return this.operation=e,this.outputMatrix=t,this.inputMatrices=n,null!==this.operation&&i.a.assert(this.operation.numberOfInputMatrices()===this.inputMatrices.length),Object.freeze(this)}}class On{constructor(e,t,n=[],i=[]){return this._boundOperation=new En(e,t,n.map(e=>e._boundOperation.outputMatrix)),this._children=n,this._subroutines=i,Object.freeze(this)}get operation(){return this._boundOperation.operation}get outputMatrix(){return this._boundOperation.outputMatrix}pack(){const e=[],t=[[this,!1]],n=[];for(;t.length>0;){const[i,r]=t.pop();if(r){if(null!==i._boundOperation.operation){const{operation:t,outputMatrix:r,inputMatrices:s}=i._boundOperation,o=this._findOrAdd(e,r),a=s.map(t=>this._findOrAdd(e,t));for(let n=i._subroutines.length-1;n>=0;n--){const[r,s]=i._subroutines[n],o=s.pack(),c=t=>this._findOrAdd(a,this._findOrAdd(e,t));o.operation.adjustIndices(c,o.inputMatrices),t.setStepsOf(r,o.operation.steps())}const c=ln.step(t,o,a);c.header.updateMetadata(r,s),n.push(c)}}else{t.push([i,!0]);for(let e=i._children.length-1;e>=0;e--)t.push([i._children[e],!1])}}return new En(new ln(e.length,this.outputMatrix.shape,n),this.outputMatrix,e)}_findOrAdd(e,t){i.a.assert(void 0!==t);const n=e.lastIndexOf(t);return n>=0?n:e.push(t)-1}}const In=yn.instance;class Mn{constructor(e){this._shape=e,this._compiledExpr=null}get rows(){return this._shape.rows}get columns(){return this._shape.columns}get dtype(){return this._shape.dtype}_compile(){throw new s.a}_compileAndEvaluate(){return null===this._compiledExpr?this._compile().then(e=>this._compiledExpr=e.pack()).then(e=>In.enqueue(e.operation,e.outputMatrix,e.inputMatrices)).then(()=>this):In.enqueue(this._compiledExpr.operation,this._compiledExpr.outputMatrix,this._compiledExpr.inputMatrices).then(()=>this)}get _matrix(){throw new s.a}_assign(e){throw new s.g("Can't assign matrix: not a l-value")}_compileAssignment(e){throw new s.g("Can't assign matrix: not a l-value")}static _assertSameShape(e,t){if(!e.equals(t))throw e.dtype!==t.dtype?new s.g(`Incompatible matrix data type (expected "${t.dtype}", found "${e.dtype}")`):new s.g(`Incompatible matrix shape (expected ${t.rows} x ${t.columns}, found ${e.rows} x ${e.columns})`)}assign(e){throw new s.g("Can't assign matrix: not a l-value")}fill(e){throw new s.g("Can't fill matrix: not a l-value")}read(){return this._compileAndEvaluate().then(e=>e._matrix.read()).turbocharge()}print(e,t){return this._compileAndEvaluate().then(n=>n._matrix.print(e,t)).turbocharge()}toString(){return this._matrix.toString()}block(e,t,n,i){return new Tn(this,e,t,n,i)}row(e){return this.block(e,e,0,this.columns-1)}column(e){return this.block(0,this.rows-1,e,e)}rowSpan(e,t){return this.block(e,t,0,this.columns-1)}columnSpan(e,t){return this.block(0,this.rows-1,e,t)}diagonal(){return new zn(this)}transpose(){return new Bn(this)}plus(e){return new Un(this,e)}minus(e){return new Gn(this,e)}times(e){return e instanceof Mn?new Yn(this,e):new Vn(this,e)}compMult(e){return new Zn(this,e)}inverse(){return new qn(this)}followedBy(e){return new Cn(this,e)}setTo(e){throw new s.g("Can't create an assignment expression: not a l-value")}map(e,t,n){if("function"!=typeof n)throw new s.f("map() expects a mapping function");if(e!==this.rows)throw new s.f(`map() expects blockRows (${e}) to be the number of rows of the matrix (${this.rows})`);if(t<=0||this.columns%t!=0)throw new s.f(`map() expects the number of columns of the matrix (${this.columns}) to be divisible by blockColumns (${t})`);const i=new Ct(e,t,this.dtype),r=new Ct(1,1,this.dtype),o=new Fn(i,new wn(i)),a=new Fn(r,new wn(r)),c=n(o,a,new jn(this));if(!(c instanceof Mn))throw new s.g("map() expects that the mapping function returns a matrix expression for all input blocks");return new ei(this,c,o._matrix,a._matrix)}reduce(e,t,n,i){if("function"!=typeof n)throw new s.f("reduce() expects a reducer function");if(e!==this.rows)throw new s.f(`reduce() expects blockRows (${e}) to be the number of rows of the matrix (${this.rows})`);if(t<=0||this.columns%t!=0)throw new s.f(`reduce() expects the number of columns of the matrix (${this.columns}) to be divisible by blockColumns (${t})`);if(!(i instanceof Mn))throw new s.f("reduce() expects initialMatrix to be a SpeedyMatrixExpr");const r=new Ct(e,t,this.dtype),o=new Ct(1,1,this.dtype),a=new Fn(r,new wn(r)),c=new Fn(i._shape,new wn(i._shape)),l=new Fn(o,new wn(o)),h=n(c,a,l,new jn(this));if(!(h instanceof Mn))throw new s.g("reduce() expects that the reducer function returns a SpeedyMatrixExpr for all input blocks");if(!h._shape.equals(i._shape))throw new s.g("reduce() expects that the reducer function returns matrices of the same shape as the initial matrix for all input blocks");return new ti(this,h,c._matrix,a._matrix,l._matrix,i)}sort(e,t,n){if("function"!=typeof n)throw new s.f("sort() expects a comparison function");if(e!==this.rows)throw new s.f(`sort() expects blockRows (${e}) to be the number of rows of the matrix (${this.rows})`);if(t<=0||this.columns%t!=0)throw new s.f(`sort() expects the number of columns of the matrix (${this.columns}) to be divisible by blockColumns (${t})`);const i=new Ct(e,t,this.dtype),r=new Fn(i,new wn(i)),o=new Fn(i,new wn(i)),a=n(r,o);if(!(a instanceof Mn&&1===a._shape.rows&&1===a._shape.columns))throw new s.g("sort() expects that the comparator function returns a 1x1 matrix expression for all comparison pairs");return new ni(this,a,r._matrix,o._matrix)}qr(e="reduced"){return new Jn(this,e)}lssolve(e){return new di(this,e)}solve(e,t="qr"){const n=this.rows,i=this.columns;if(n!==i)throw new s.f(`solve expects a square matrix, but received a ${n} x ${i} matrix`);if(e.rows!==n||1!==e.columns)throw new s.f(`solve expected a ${n} x 1 input vector, but received a ${e.rows} x ${e.columns} matrix`);switch(t){case"qr":return this.lssolve(e);default:throw new s.f(`Unknown method for solve: "${t}"`)}}static create(e,t,n){const i=new Ct(e,t),r=new wn(i,n);return new Fn(i,r)}_qrSolve(e){return new li(this,e)}_backSubstitution(){return new hi(this)}}class Xn extends Mn{constructor(e){super(e),this._tmpmatrix=new wn(e)}get _matrix(){return this._tmpmatrix}}class Ln extends Xn{constructor(e,t){super(t.shape),this._expr=e,this._operation=t,i.a.assert(1===t.numberOfInputMatrices())}_compile(){return this._expr._compile().then(e=>new On(this._operation,this._matrix,[e]))}get child(){return this._expr}}class kn extends Xn{constructor(e,t,n){if(super(n.shape),this._leftExpr=e,this._rightExpr=t,this._operation=n,i.a.assert(2===n.numberOfInputMatrices()),t.dtype!==e.dtype)throw new s.f(`Found a binary expression with different data types: "${e.dtype}" (left operand) x "${t.dtype}" (right operand)`)}_compile(){return r.a.all([this._leftExpr._compile().turbocharge(),this._rightExpr._compile().turbocharge()]).then(([e,t])=>new On(this._operation,this._matrix,[e,t]))}get leftChild(){return this._leftExpr}get rightChild(){return this._rightExpr}}class Pn extends Xn{constructor(e,t,n,r){if(super(r.shape),this._firstExpr=e,this._secondExpr=t,this._thirdExpr=n,this._operation=r,i.a.assert(3===r.numberOfInputMatrices()),e.dtype!==t.dtype||e.dtype!==n.dtype)throw new s.f(`Found a ternary expression with different data types: "${e.dtype}" (first operand) x "${t.dtype}" (second operand) x "${n.dtype}" (third operand)`)}_compile(){return r.a.all([this._firstExpr._compile().turbocharge(),this._secondExpr._compile().turbocharge(),this._thirdExpr._compile().turbocharge()]).then(([e,t,n])=>new On(this._operation,this._matrix,[e,t,n]))}get firstChild(){return this._firstExpr}get secondChild(){return this._secondExpr}get thirdChild(){return this._thirdExpr}}class Tn extends Mn{constructor(e,t,n,i,r){super(new Ct(n-t+1,r-i+1,e.dtype)),this._expr=e,this._firstRow=t,this._lastRow=n,this._firstColumn=i,this._lastColumn=r,this._submatrix=null,this._cachedMatrix=null}get _matrix(){return this._submatrix}_compile(){return this._expr._compile().then(e=>e.outputMatrix!==this._cachedMatrix||null===this._submatrix?(this._cachedMatrix=e.outputMatrix,this._cachedMatrix.block(this._firstRow,this._lastRow,this._firstColumn,this._lastColumn).then(t=>(this._submatrix=t,e))):e).then(e=>new On(null,this._matrix,[e]))}}class zn extends Mn{constructor(e){const t=Math.min(e.rows,e.columns);super(new Ct(1,t,e.dtype)),this._expr=e,this._diagonal=null,this._cachedMatrix=null}get _matrix(){return this._diagonal}_compile(){return this._expr._compile().then(e=>e.outputMatrix!==this._cachedMatrix||null===this._diagonal?(this._cachedMatrix=e.outputMatrix,this._cachedMatrix.diagonal().then(t=>(this._diagonal=t,e))):e).then(e=>new On(null,this._matrix,[e]))}}class Rn extends Mn{constructor(e,t){super(e._shape),this._lvalue=e,this._rvalue=t,Mn._assertSameShape(e._shape,t._shape)}get _matrix(){return this._lvalue._matrix}_compile(){return r.a.all([this._lvalue._compile().turbocharge(),this._rvalue._compile().turbocharge()]).then(([e,t])=>this._lvalue._compileAssignment(t).then(t=>new On(null,this._matrix,[e,t])))}}class Cn extends Mn{constructor(e,t){super(t._shape),this._first=e,this._second=t}get _matrix(){return this._second._matrix}_compile(){return r.a.all([this._first._compile().turbocharge(),this._second._compile().turbocharge()]).then(([e,t])=>new On(null,this._matrix,[e,t]))}}class Nn extends Mn{get _matrix(){throw new s.a}_evaluateLvalue(){throw new s.a}_assign(e){throw new s.a}_compileAssignment(e){throw new s.a}assign(e){if(Array.isArray(e)){const t=new wn(this._shape,e);return this._evaluateLvalue().then(e=>e._assign(t)).then(()=>this)}return this._evaluateLvalue().then(t=>e._compileAndEvaluate().then(e=>t._assign(e._matrix))).then(()=>this)}fill(e){return this.assign(new $n(this._shape,+e))}setTo(e){if(Array.isArray(e)){const t=new wn(this._shape,e);e=new Fn(t.shape,t)}return new Rn(this,e)}block(e,t,n,i){return new Dn(this,e,t,n,i)}diagonal(){return new Kn(this)}}class Fn extends Nn{constructor(e,t=null){super(e),this._usermatrix=t||new wn(this._shape),this._copy=new Gt(this._shape),null!=t&&Mn._assertSameShape(this._shape,t.shape)}read(){return this._usermatrix.read().turbocharge()}get _matrix(){return this._usermatrix}_evaluateLvalue(){return r.a.resolve(this)}_assign(e){return In.enqueue(this._copy,this._matrix,[e])}_compile(){return r.a.resolve(new On(null,this._matrix,[]))}_compileAssignment(e){return r.a.resolve(new On(this._copy,this._matrix,[e]))}}class Dn extends Nn{constructor(e,t,n,i,r){super(new Ct(n-t+1,r-i+1,e.dtype)),this._expr=e,this._firstRow=t,this._lastRow=n,this._firstColumn=i,this._lastColumn=r,this._submatrix=null,this._cachedMatrix=null,this._copy=new Gt(this._shape)}get _matrix(){return this._submatrix}_evaluateLvalue(){return this._expr._evaluateLvalue().then(e=>e._matrix!==this._cachedMatrix||null===this._submatrix?(this._cachedMatrix=e._matrix,this._cachedMatrix.block(this._firstRow,this._lastRow,this._firstColumn,this._lastColumn)):this._submatrix).then(e=>(this._submatrix=e,this))}_assign(e){return In.enqueue(this._copy,this._matrix,[e])}_compile(){return this._expr._compile().then(e=>e.outputMatrix!==this._cachedMatrix||null===this._submatrix?(this._cachedMatrix=e.outputMatrix,this._cachedMatrix.block(this._firstRow,this._lastRow,this._firstColumn,this._lastColumn).then(t=>(this._submatrix=t,e))):e).then(e=>new On(null,this._matrix,[e]))}_compileAssignment(e){return r.a.resolve(new On(this._copy,this._matrix,[e]))}}class Kn extends Nn{constructor(e){const t=Math.min(e.rows,e.columns);super(new Ct(1,t,e.dtype)),this._expr=e,this._diagonal=null,this._cachedMatrix=null,this._copy=new Gt(this._shape)}get _matrix(){return this._diagonal}_evaluateLvalue(){return this._expr._evaluateLvalue().then(e=>e._matrix!==this._cachedMatrix||null===this._diagonal?(this._cachedMatrix=e._matrix,this._cachedMatrix.diagonal()):this._diagonal).then(e=>(this._diagonal=e,this))}_assign(e){return In.enqueue(this._copy,this._matrix,[e])}_compile(){return this._expr._compile().then(e=>e.outputMatrix!==this._cachedMatrix||null===this._diagonal?(this._cachedMatrix=e.outputMatrix,this._cachedMatrix.diagonal().then(t=>(this._diagonal=t,e))):e).then(e=>new On(null,this._matrix,[e]))}_compileAssignment(e){return r.a.resolve(new On(this._copy,this._matrix,[e]))}}class jn extends Mn{constructor(e){super(e._shape),this._expr=e}get _matrix(){return this._expr._matrix}_compile(){return this._expr._compile()}}class $n extends Xn{constructor(e,t){super(e),this._operation=new Ut(this._shape,t)}_compile(){return r.a.resolve(new On(this._operation,this._matrix,[]))}}class Bn extends Ln{constructor(e){if(e instanceof Bn)return e.child;super(e,new Yt(e._shape))}}class qn extends Ln{constructor(e){if(e.rows!==e.columns)throw new s.g("Can't compute the inverse of a non-square matrix");if(e.rows>3)throw new s.i("Currently, only matrices up to 3x3 may be inverted");super(e,new Wt(e._shape))}}class Un extends kn{constructor(e,t){Mn._assertSameShape(e._shape,t._shape),super(e,t,new Ht(e._shape,t._shape))}}class Gn extends kn{constructor(e,t){Mn._assertSameShape(e._shape,t._shape),super(e,t,new Qt(e._shape,t._shape))}}class Yn extends kn{constructor(e,t){const n=e instanceof Bn,i=t instanceof Bn;if(n&&i)return new Bn(new Yn(t.child,e.child));if(n&&!i)return new Wn(e.child,t);if(!n&&i)return new Hn(e,t.child);if(1===t.columns)return new Qn(e,t);if(e.columns!==t.rows)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.rows} x ${t.columns} matrix`);super(e,t,new Vt(e._shape,t._shape))}}class Wn extends kn{constructor(e,t){if(e.rows!==t.rows)throw new s.f(`Can't multiply a ${e.columns} x ${e.rows} (transposed) matrix by a ${t.rows} x ${t.columns} matrix`);super(e,t,new en(e._shape,t._shape))}}class Hn extends kn{constructor(e,t){if(e.columns!==t.columns)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.columns} x ${t.rows} (transposed) matrix`);super(e,t,new tn(e._shape,t._shape))}}class Qn extends kn{constructor(e,t){if(e.columns!==t.rows||1!==t.columns)throw new s.f(`Can't multiply a ${e.rows} x ${e.columns} matrix by a ${t.rows} x ${t.columns} matrix / column-vector`);super(e,t,new nn(e._shape,t._shape))}}class Vn extends Ln{constructor(e,t){super(e,new Zt(e._shape,t))}}class Zn extends kn{constructor(e,t){Mn._assertSameShape(e._shape,t._shape),super(e,t,new Jt(e._shape,t._shape))}}class Jn extends Ln{constructor(e,t){if(e.rows<e.columns)throw new s.f(`Can't compute the QR decomposition of a ${e.rows} x ${e.columns} matrix`);super(e,new rn(e._shape,t))}}class ei extends Xn{constructor(e,t,n,r){i.a.assert(n.shape.rows===e.rows&&e.columns%n.shape.columns==0),i.a.assert(e.dtype===t.dtype);const s=e.columns/n.shape.columns;super(new Ct(t.rows,t.columns*s,t.dtype)),this._inputMatrix=e,this._mapfn=t,this._bi=n,this._index=r}_compile(){return this._inputMatrix._compile().then(e=>this._mapfn._compile().then(t=>new On(new dn(this._shape),this._matrix,[e,new On(null,t.outputMatrix),new On(null,this._bi),new On(null,this._index)],[["mapfn",t]])))}}class ti extends Xn{constructor(e,t,n,r,s,o){i.a.assert(r.shape.rows===e.rows&&e.columns%r.shape.columns==0),i.a.assert(e.dtype===t.dtype),i.a.assert(t._shape.equals(o._shape)),i.a.assert(t._shape.equals(n.shape)),super(t._shape),this._inputMatrix=e,this._reducefn=t,this._accumulator=n,this._bi=r,this._index=s,this._initialMatrix=o}_compile(){return this._inputMatrix._compile().then(e=>this._initialMatrix._compile().then(t=>this._reducefn._compile().then(n=>new On(new un(this._shape),this._matrix,[e,new On(null,n.outputMatrix),new On(null,this._accumulator),new On(null,this._bi),new On(null,this._index),t],[["reducefn",n]]))))}}class ni extends Xn{constructor(e,t,n,r){super(e._shape),i.a.assert(n.shape.equals(r.shape)),i.a.assert(n.rows===e.rows&&e.columns%n.columns==0),this._inputMatrix=e,this._comparator=t,this._blockShape=n.shape,this._bi=n,this._bj=r}_compile(){return this._inputMatrix._compile().then(e=>this._comparator._compile().then(t=>new On(new hn(this._shape,this._blockShape),this._matrix,[e,new On(null,t.outputMatrix),new On(null,this._bi),new On(null,this._bj)],[["cmp",t]])))}}class ii extends kn{constructor(e,t){i.a.assert(2===e._shape.rows&&4===e._shape.columns),i.a.assert(e._shape.equals(t._shape)),super(e,t,new pn(e._shape,t._shape))}}class ri extends kn{constructor(e,t){i.a.assert(2===e._shape.rows&&e._shape.columns>=4),i.a.assert(e._shape.equals(t._shape)),super(e,t,new fn(e._shape,t._shape))}}class si extends kn{constructor(e,t){i.a.assert(3===e.rows&&3===e.columns),i.a.assert(2===t.rows),super(e,t,new mn(e._shape,t._shape))}}class oi extends kn{constructor(e,t){i.a.assert(2===e.rows&&3===e.columns),i.a.assert(2===t.rows),super(e,t,new _n(e._shape,t._shape))}}class ai extends kn{constructor(e,t){i.a.assert(2===e.rows&&2===e.columns),i.a.assert(2===t.rows),super(e,t,new gn(e._shape,t._shape))}}class ci extends Pn{constructor(e,t,n,r,s,o){i.a.assert(2===e.rows&&e.columns>=4),i.a.assert(e._shape.equals(t._shape)),i.a.assert(1===o.rows&&o.columns===e.columns),i.a.assert(o.dtype===e.dtype),i.a.assert(o instanceof Nn),i.a.assert(n>0&&r>0&&s>=0),super(e,t,o,new vn(e._shape,t._shape,n,r,s,o._shape))}}class li extends kn{constructor(e,t){if(e.rows<e.columns)throw new s.f(`Can't compute the QR decomposition of a ${e.rows} x ${e.columns} matrix`);if(1!=t.columns||t.rows!=e.rows)throw new s.f(`Expected a ${e.rows} x 1 column-vector, but found a ${t.rows} x ${t.columns} matrix`);super(e,t,new sn(e._shape,t._shape))}}class hi extends Ln{constructor(e){if(e.columns!=e.rows+1)throw new s.f(`Expected a ${e.rows} x ${e.rows+1} matrix, but found a ${e.rows} x ${e.columns} matrix`);super(e,new on(e._shape))}}class di extends kn{constructor(e,t){const[n,i]=[e.rows,e.columns];if(n<i)throw new s.f(`Input matrix has more columns than rows - it's ${n} x ${i}`);if(t.rows!=n||1!=t.columns)throw new s.f(`Expected a ${n} x 1 column-vector, but found a ${t.rows} x ${t.columns} matrix`);super(e,t,new an(e._shape,t._shape))}}const ui=Object.freeze({Nothing:0,Image:1,Keypoints:2});class pi{constructor(e){this._type=e}get type(){return this._type}hasType(e){return this._type===e}isEmpty(){return this.hasType(ui.Nothing)}toString(){return"message of type "+Object.keys(ui).find(e=>ui[e]===this.type)}set(...e){throw new s.a}static create(e){return function(e){return new mi[e]}(e)}}class fi extends pi{constructor(){super(ui.Nothing,null)}set(){return this}}const mi=Object.freeze({[ui.Nothing]:fi,[ui.Image]:class extends pi{constructor(){super(ui.Image),this._image=null,this._format=x.c.RGBA}set(e,t=x.c.RGBA){return this._image=e,this._format=t,this}get image(){return this._image}get format(){return this._format}},[ui.Keypoints]:class extends pi{constructor(){super(ui.Keypoints),this._encodedKeypoints=null,this._descriptorSize=0,this._extraSize=0,this._encoderLength=1}set(e,t,n,r){return this._encodedKeypoints=e,this._descriptorSize=0|t,this._extraSize=0|n,this._encoderLength=0|r,i.a.assert(this._descriptorSize>=0&&this._extraSize>=0),i.a.assert(this._encoderLength===this._encodedKeypoints.width,"Invalid encoderLength"),i.a.assert(this._encodedKeypoints.width===this._encodedKeypoints.height,"Invalid encodedKeypoints texture"),this}get encodedKeypoints(){return this._encodedKeypoints}get descriptorSize(){return this._descriptorSize}get extraSize(){return this._extraSize}get encoderLength(){return this._encoderLength}hasDescriptors(){return this._descriptorSize>0}hasMatches(){return this._extraSize>0}}});const _i=e=>!0;class gi{constructor(e,t=_i){this._expectedMessageType=e,this._isValidMessage="function"==typeof t?t:_i,i.a.assert(this._expectedMessageType!=ui.Nothing)}isCompatibleWith(e){return this._expectedMessageType==e._expectedMessageType}accepts(e){return e.hasType(this._expectedMessageType)&&this._isValidMessage(e)}toString(){return`Port expects ${Object.keys(ui).find(e=>ui[e]===this._expectedMessageType)} satisfying ${this._isValidMessage}`}get expectedMessageType(){return this._expectedMessageType}}const vi=/^[a-z][a-zA-Z0-9]*$/,xi=new fi;class yi{constructor(e,t,n){this._name=String(e),this._spec=t,this._node=n,this._message=xi,i.a.assert(vi.test(this._name),`Port name "${this._name}" is not acceptable`)}get name(){return this._name}get node(){return this._node}connectTo(e){throw new s.a}isInputPort(){throw new s.a}isOutputPort(){return!this.isInputPort()}clearMessage(){this._message=xi}hasMessage(){return!this._message.isEmpty()}read(){if(this._message.isEmpty())throw new s.g(`Can't read from port ${this.name}: nothing to read`);return this._message}write(e){throw new s.i(`Can't write ${e} to port ${this.name}: unsupported operation`)}static get DEFAULT_NAME(){throw new s.a}}class Si extends yi{constructor(e,t,n){super(e,t,n),this._cachedMessage=null}connectTo(e){if(!e.isInputPort())throw new s.f(`Can't connect output port ${this.name} to port ${e.name}: expected an input port`);e.connectTo(this)}isInputPort(){return!1}write(e){if(!this._spec.accepts(e))throw new s.f(`Can't write ${e} to port ${this.name}. ${this._spec}`);this._message=e}swrite(...e){null==this._cachedMessage&&(this._cachedMessage=pi.create(this._spec.expectedMessageType)),this.write(this._cachedMessage.set(...e))}static get DEFAULT_NAME(){return"out"}}class wi extends yi{constructor(e,t,n){super(e,t,n),this._incomingLink=null}get incomingLink(){return this._incomingLink}connectTo(e){if(!e.isOutputPort())throw new s.f(`Can't connect input port ${this.name} to port ${e.name}: expected an output port`);if(!this._spec.isCompatibleWith(e._spec))throw new s.f(`Can't connect ports ${this.name} and ${e.name}: incompatible types`);this._incomingLink=e}disconnect(){this._incomingLink=null}isInputPort(){return!0}pullMessage(e=""){const t=e.length>0?`${this.name} of ${e}`:this.name;if(null==this._incomingLink)throw new s.g("No incoming link for input port "+t);const n=this._incomingLink.read();if(!this._spec.accepts(n))throw new s.f(`Can't receive ${n} at port ${t}: ${this._spec}`);return this._message=n}static get DEFAULT_NAME(){return"in"}}class bi{constructor(e,t){this._class=e,this._name=String(t),this._type=ui.Nothing,this._messageConstraint=void 0}expects(e){return i.a.assert(this._type==ui.Nothing),i.a.assert(e!=ui.Nothing),this._type=e,this}satisfying(e){return i.a.assert(this._type!=ui.Nothing,"You must first declare what type of message this port expects"),i.a.assert(void 0===this._messageConstraint),i.a.assert("function"==typeof e),this._messageConstraint=e,this}build(e){const t=new gi(this._type,this._messageConstraint);return Reflect.construct(this._class,[this._name,t,e])}}function Ai(e=wi.DEFAULT_NAME){return new bi(wi,e)}function Ei(e=Si.DEFAULT_NAME){return new bi(Si,e)}const Oi=e=>e.reduce((e,t)=>(e[t.name]=t,e),Object.create(null)),Ii=function(){let e=0;return()=>e++}();class Mi{constructor(e=(()=>Math.random().toString(16).substr(2))(),t=[]){this._id=Ii(),this._name=String(e);const n=t.map(e=>e.build(this));if(this._inputPorts=Oi(n.filter(e=>e.isInputPort())),this._outputPorts=Oi(n.filter(e=>e.isOutputPort())),this._outputTextures=new Array(this._outputPorts.length).fill(null),0==this._name.length)throw new s.f(`Invalid name "${this._name}" for node ${this.fullName}`);if(0==t.length)throw new s.f("No ports have been found in node "+this.fullName)}get name(){return this._name}get fullName(){return`${this.constructor.name}[${this.name}]`}get id(){return this._id}input(e=wi.DEFAULT_NAME){if(e in this._inputPorts)return this._inputPorts[e];throw new s.f(`Can't find input port ${e} in node ${this.fullName}`)}output(e=Si.DEFAULT_NAME){if(e in this._outputPorts)return this._outputPorts[e];throw new s.f(`Can't find output port ${e} in node ${this.fullName}`)}execute(e){let t;for(t in this._outputPorts)this._outputPorts[t].clearMessage();for(t in this._inputPorts)this._inputPorts[t].pullMessage(this.fullName);const n=this._run(e);if(null!=n)return n.then(()=>{for(t in this._outputPorts)i.a.assert(this._outputPorts[t].hasMessage(),`Did you forget to write data to the output port ${t} of ${this.fullName}?`)});for(t in this._outputPorts)i.a.assert(this._outputPorts[t].hasMessage(),`Did you forget to write data to the output port ${t} of ${this.fullName}?`)}_run(e){throw new s.a}isSource(){return 0==Object.keys(this._inputPorts).length}isSink(){return 0==Object.keys(this._outputPorts).length}clearPorts(){let e;for(e in this._inputPorts)this._inputPorts[e].clearMessage();for(e in this._outputPorts)this._outputPorts[e].clearMessage()}inputNodes(){const e=[];for(const t in this._inputPorts){const n=this._inputPorts[t];null!=n.incomingLink&&e.push(n.incomingLink.node)}return e}setOutputTextures(e){for(let t=0;t<this._outputTextures.length;t++)this._outputTextures[t]=e(this._outputTextures[t])}get _outputTexture(){return i.a.assert(1==this._outputTextures.length),this._outputTextures[0]}}class Xi extends Mi{constructor(e,t){super(e,t),i.a.assert(this.isSource())}}class Li extends Mi{constructor(e,t){super(e,t),i.a.assert(this.isSink())}export(){throw new s.a}}class ki{constructor(){this._nodes=[],this._sequence=[],this._gpu=null}node(e){for(let t=0,n=this._nodes.length;t<n;t++)if(this._nodes[t].name===e)return this._nodes[t];return null}init(...e){if(i.a.assert(e.length>0),null!=this._gpu)throw new s.g("The pipeline has already been initialized");this._gpu=new Qe(1,1);for(let t=0;t<e.length;t++){const n=e[t];this._hasNode(n)||this._nodes.push(n)}return this._sequence=ki._tsort(this._nodes),i.a.assert(this._sequence.length===this._nodes.length),this}release(){if(null==this._gpu)throw new s.g("The pipeline has already been released or has never been initialized");return this._gpu=this._gpu.release(),this._sequence.length=0,this._nodes.length=0,null}run(){i.a.assert(null!=this._gpu,"Pipeline has been released"),i.a.assert(this._sequence.length>0,"Pipeline doesn't have nodes"),i.a.assert(this._sequence[0].isSource(),"Pipeline doesn't have a source");const e=this._sequence.filter(e=>e.isSink());i.a.assert(e.length>0,"Pipeline doesn't have a sink");const t=e=>this._gpu.texturePool.allocate();for(let e=this._sequence.length-1;e>=0;e--)this._sequence[e].setOutputTextures(t);return ki._runSequence(this._sequence,this._gpu).then(()=>r.a.all(e.map(e=>e.export())).then(t=>t.reduce((t,n,i)=>(t[e[i].name]=n,t),{}))).then(e=>{const t=e=>this._gpu.texturePool.free(e);for(let e=this._sequence.length-1;e>=0;e--)this._sequence[e].setOutputTextures(t),this._sequence[e].clearPorts();return e}).turbocharge()}_hasNode(e){return this._nodes.includes(e)}static _runSequence(e,t,n=0,i=e.length){if(n>=i)return r.a.resolve();const s=e[n].execute(t);return null==s?ki._runSequence(e,t,n+1,i):s.then(()=>ki._runSequence(e,t,n+1,i))}static _tsort(e){const t=ki._outlinks(e),n=e.map(e=>[e,!1]),i=new Set,r=new Array(e.length);let o=r.length;for(;n.length>0;){const[e,a]=n.pop();if(a)r[--o]=e;else if(!i.has(e)){const o=t.get(e);if(i.add(e),n.push([e,!0]),n.push(...o.map(e=>[e,!1])),o.some(e=>i.has(e)&&!r.includes(e)))throw new s.g("Pipeline networks cannot have cycles!")}}return r}static _outlinks(e){const t=new Map;for(let n=0;n<e.length;n++)t.set(e[n],[]);for(let n=0;n<e.length;n++){const i=e[n],r=i.inputNodes();for(let e=0;e<r.length;e++){const n=r[e],s=t.get(n);t.set(n,s.concat([i]))}}return t}}class Pi extends Xi{constructor(e){super(e,[Ei().expects(ui.Image)]),this._media=null}get media(){return this._media}set media(e){i.a.assert(e instanceof et),this._media=e}_run(e){e.upload(this._media._source,this._outputTexture),this.output().swrite(this._outputTexture,x.c.RGBA)}}class Ti extends Li{constructor(e){super(e,[Ai().expects(ui.Image)]),this._bitmap=null,this._format=x.c.RGBA}export(){return i.a.assert(null!=this._bitmap),qe.load(this._bitmap).then(e=>new et(e,{lightweight:1}))}_run(e){const{image:t,format:n}=this.input().read();return new r.a(i=>{const r=e.renderToCanvas(t);createImageBitmap(r,0,r.height-t.height,t.width,t.height).then(e=>{this._bitmap=e,this._format=n,i()})})}}const zi=["in0","in1"];class Ri extends Mi{constructor(e){super(e,[...zi.map(e=>Ai(e).expects(ui.Image)),Ei().expects(ui.Image)]),this._port=0}get port(){return this._port}set port(e){if(e<0||e>=zi.length)throw new s.f("Invalid port: "+e);this._port=0|e}_run(e){const t=this.input(zi[this._port]).read();this.output().write(t)}}class Ci extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)])}_run(e){const{image:t}=this.input().read(),n=t.width,i=t.height,r=this._outputTexture;e.programs.colors.rgb2grey.outputs(n,i,r)(t),this.output().swrite(r,x.c.GREY)}}const Ni={3:[.27901008925473514,.44197982149052983,.27901008925473514],5:[.06135959781344021,.2447701955296099,.3877404133138998,.2447701955296099,.06135959781344021],7:[.03873542500847274,.11308485700794121,.2150068609928349,.26634571398150225,.2150068609928349,.11308485700794121,.03873542500847274],9:[.028532262603370988,.067234535494912,.12400932997922749,.17904386461741617,.20236001461014655,.17904386461741617,.12400932997922749,.067234535494912,.028532262603370988],11:[.022656882730580346,.04610857898527292,.08012661469398517,.11890414969751599,.15067709325491124,.16305336127546846,.15067709325491124,.11890414969751599,.08012661469398517,.04610857898527292,.022656882730580346],13:[.018815730430644363,.03447396964662016,.05657737457255748,.08317258170844948,.10952340502389682,.12918787500405662,.13649812722755,.12918787500405662,.10952340502389682,.08317258170844948,.05657737457255748,.03447396964662016,.018815730430644363],15:[.016100340991695383,.027272329212157102,.042598338587449644,.06135478775568558,.08148767614129326,.09979838342934616,.11270444144735056,.11736740487004466,.11270444144735056,.09979838342934616,.08148767614129326,.06135478775568558,.042598338587449644,.027272329212157102,.016100340991695383]},Fi=new Mt(0,0),Di={3:"convolution3x",5:"convolution5x",7:"convolution7x",9:"convolution9x",11:"convolution11x",13:"convolution13x",15:"convolution15x"},Ki={3:"convolution3y",5:"convolution5y",7:"convolution7y",9:"convolution9y",11:"convolution11y",13:"convolution13y",15:"convolution15y"};class ji extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)]),this._kernelSize=new zt(5,5),this._sigma=Fi,this._kernel={x:Ni[this._kernelSize.width],y:Ni[this._kernelSize.height]}}get kernelSize(){return this._kernelSize}set kernelSize(e){i.a.assert(e instanceof zt);const t=e.width,n=e.height;if(t<3||n<3||t>15||n>15||t%2==0||n%2==0)throw new s.i(`Unsupported kernel size: ${t}x${n}`);this._kernelSize=e,this._updateKernel()}get sigma(){return this._sigma}set sigma(e){i.a.assert(e instanceof Mt,"Sigma must be a SpeedyVector2"),i.a.assert(e.x>=0&&e.y>=0),this._sigma=e,this._updateKernel()}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._kernel.x,a=this._kernel.y,c=Di[this._kernelSize.width],l=Ki[this._kernelSize.height],h=e.texturePool.allocate();e.programs.filters[c].outputs(i,r,h)(t,o),e.programs.filters[l].outputs(i,r,s)(h,a),e.texturePool.free(h),this.output().swrite(s,n)}_updateKernel(){this._sigma.x==Fi.x?this._kernel.x=Ni[this._kernelSize.width]:this._kernel.x=i.a.gaussianKernel(this._sigma.x,this._kernelSize.width,!0),this._sigma.y==Fi.y?this._kernel.y=Ni[this._kernelSize.height]:this._kernel.y=i.a.gaussianKernel(this._sigma.y,this._kernelSize.height,!0)}}const $i={3:new Array(3).fill(1/3),5:new Array(5).fill(.2),7:new Array(7).fill(1/7),9:new Array(9).fill(1/9),11:new Array(11).fill(1/11),13:new Array(13).fill(1/13),15:new Array(15).fill(1/15)},Bi={3:"convolution3x",5:"convolution5x",7:"convolution7x",9:"convolution9x",11:"convolution11x",13:"convolution13x",15:"convolution15x"},qi={3:"convolution3y",5:"convolution5y",7:"convolution7y",9:"convolution9y",11:"convolution11y",13:"convolution13y",15:"convolution15y"};class Ui extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)]),this._kernelSize=new zt(5,5),this._kernel={x:$i[this._kernelSize.width],y:$i[this._kernelSize.height]}}get kernelSize(){return this._kernelSize}set kernelSize(e){i.a.assert(e instanceof zt);const t=e.width,n=e.height;if(t<3||n<3||t>15||n>15||t%2==0||n%2==0)throw new s.i(`Unsupported kernel size: ${t}x${n}`);this._kernelSize=e,this._kernel.x=$i[this._kernelSize.width],this._kernel.y=$i[this._kernelSize.height]}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._kernel.x,a=this._kernel.y,c=Bi[this._kernelSize.width],l=qi[this._kernelSize.height],h=e.texturePool.allocate();e.programs.filters[c].outputs(i,r,h)(t,o),e.programs.filters[l].outputs(i,r,s)(h,a),e.texturePool.free(h),this.output().swrite(s,n)}}const Gi={3:"median3",5:"median5",7:"median7"};class Yi extends Mi{constructor(e){super(e,[Ai().expects(ui.Image).satisfying(e=>e.format===x.c.GREY),Ei().expects(ui.Image)]),this._kernelSize=new zt(5,5)}get kernelSize(){return this._kernelSize}set kernelSize(e){i.a.assert(e instanceof zt);const t=e.width;if(3!=t&&5!=t&&7!=t)throw new s.i("Supported kernel sizes: 3x3, 5x5, 7x7");if(e.width!=e.height)throw new s.i("Use a square kernel");this._kernelSize=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._kernelSize.width,a=Gi[o];e.programs.filters[a].outputs(i,r,s)(t),this.output().swrite(s,n)}}const Wi={3:"convolution3",5:"convolution5",7:"convolution7"};class Hi extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)]),this._kernel=Mn.create(3,3,[0,0,0,0,1,0,0,0,0])}get kernel(){return this._kernel}set kernel(e){if(e.rows!=e.columns)throw new s.i("Use a square kernel");if(3!=e.rows&&5!=e.rows&&7!=e.rows)throw new s.i("Invalid kernel size. Supported sizes: 3x3, 5x5, 7x7");this._kernel=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._kernel.rows,a=Wi[o];return this._kernel.read().then(o=>{e.programs.filters[a].outputs(i,r,s)(t,o),this.output().swrite(s,n)})}}class Qi extends Mi{constructor(e){super(e,[Ai().expects(ui.Image).satisfying(e=>e.format===x.c.RGBA||e.format===x.c.GREY),Ei().expects(ui.Image)]),this._gain=.5,this._offset=.5,this._decay=0,this._quality="medium"}get gain(){return this._gain}set gain(e){this._gain=+e}get offset(){return this._offset}set offset(e){this._offset=+e}get decay(){return this._decay}set decay(e){this._decay=Math.max(0,Math.min(+e,1))}get quality(){return this._quality}set quality(e){if("high"!=e&&"medium"!=e&&"low"!=e)throw new s.f(`Invalid quality level for the Nightvision filter: "${e}"`);this._quality=String(e)}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._gain,a=this._offset,c=this._decay,l=this._quality,h=e.programs.enhancements,d=e.texturePool.allocate(),u=e.texturePool.allocate();"medium"==l?(h._illuminationMapX.outputs(i,r,d)(t),h._illuminationMapY.outputs(i,r,u)(d)):"high"==l?(h._illuminationMapHiX.outputs(i,r,d)(t),h._illuminationMapHiY.outputs(i,r,u)(d)):"low"==l&&(h._illuminationMapLoX.outputs(i,r,d)(t),h._illuminationMapLoY.outputs(i,r,u)(d)),n===x.c.GREY?h._nightvisionGreyscale.outputs(i,r,s)(t,u,o,a,c):n===x.c.RGBA&&h._nightvision.outputs(i,r,s)(t,u,o,a,c),e.texturePool.free(u),e.texturePool.free(d),this.output().swrite(s,n)}}class Vi extends Mi{constructor(e){super(e,[Ai().expects(ui.Image).satisfying(e=>e.format===x.c.GREY),Ei().expects(ui.Image)]),this._minValue=0,this._maxValue=255}get minValue(){return this._minValue}set minValue(e){this._minValue=Math.max(0,Math.min(+e,255))}get maxValue(){return this._maxValue}set maxValue(e){this._maxValue=Math.max(0,Math.min(+e,255))}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture;let o=this._minValue,a=this._maxValue;o>a&&(o=a=(o+a)/2);const c=[e.texturePool.allocate(),e.texturePool.allocate(),e.texturePool.allocate()],l=this._scanMinMax(e,c,t,x.e.GREEN);e.programs.enhancements._normalizeGreyscaleImage.outputs(i,r,s)(l,o,a),e.texturePool.free(c[2]),e.texturePool.free(c[1]),e.texturePool.free(c[0]),this.output().swrite(s,n)}_scanMinMax(e,t,n,r){const s=e.programs.utils,o=n.width,a=n.height,c=0|Math.ceil(Math.log2(Math.max(o,a)));i.a.assert(3===t.length),i.a.assert(void 0!==x.a[r]),s._copyComponents.outputs(o,a,t[2]),s._scanMinMax2D.outputs(o,a,t[0],t[1]);let l=s._copyComponents(n,n,x.e.ALL,x.a[r]);for(let e=0;e<c;e++)l=s._scanMinMax2D(l,e);return l}}class Zi extends it{static Greyscale(e){return new Ci(e)}static GaussianBlur(e){return new ji(e)}static SimpleBlur(e){return new Ui(e)}static MedianBlur(e){return new Yi(e)}static Convolution(e){return new Hi(e)}static Nightvision(e){return new Qi(e)}static Normalize(e){return new Vi(e)}}const Ji=[0,0,0,0,0,0,0,0,1];class er extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)]),this._transform=Mn.create(3,3,[1,0,0,0,1,0,0,0,1])}get transform(){return this._transform}set transform(e){if(3!=e.rows||3!=e.columns)throw new s.f("Not a 3x3 transformation matrix: "+e);this._transform=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture;return this._transform.read().then(o=>{let a=this._inverse3(o);Number.isNaN(a[0])&&(a=Ji),e.programs.transforms._warpPerspective.outputs(i,r,s)(t,a),this.output().swrite(s,n)})}_inverse3(e,t=1e-6){const n=e[0],i=e[1],r=e[2],s=e[3],o=e[4],a=e[5],c=e[6],l=e[7],h=e[8],d=h*o-a*l,u=h*s-a*c,p=l*s-o*c,f=n*d-i*u+r*p;if(Math.abs(f)<t)e.fill(Number.NaN,0,9);else{const t=1/f;e[0]=d*t,e[1]=-(h*i-r*l)*t,e[2]=(a*i-r*o)*t,e[3]=-u*t,e[4]=(h*n-r*c)*t,e[5]=-(a*n-r*s)*t,e[6]=p*t,e[7]=-(l*n-i*c)*t,e[8]=(o*n-i*s)*t}return e}}class tr extends Mi{constructor(e){super(e,[Ai().expects(ui.Image),Ei().expects(ui.Image)]),this._size=new zt(0,0),this._method="bilinear"}get size(){return this._size}set size(e){this._size=e}get method(){return this._method}set method(e){if("nearest"!==e&&"bilinear"!==e)throw new s.f(`Invalid method method: "${e}"`);this._method=e}_run(e){const{image:t,format:n}=this.input().read(),i=t.width,r=t.height,s=this._outputTexture,o=this._method,a=this._size.width||i,c=this._size.height||r;"bilinear"==o?e.programs.transforms.resizeBI.outputs(a,c,s)(t):"nearest"==o&&e.programs.transforms.resizeNN.outputs(a,c,s)(t),this.output().swrite(s,n)}}class nr extends it{static Resize(e){return new tr(e)}static PerspectiveWarp(e){return new er(e)}}const ir=new class extends Function{constructor(){return super("...args","return this._create(...args)"),this.bind(this)}Zeros(e,t=e,n=Rt.MatrixType.default){const i=new Array(e*t).fill(0);return this._create(e,t,i,n)}Ones(e,t=e,n=Rt.MatrixType.default){const i=new Array(e*t).fill(1);return this._create(e,t,i,n)}Eye(e,t=e,n=Rt.MatrixType.default){const i=new Array(e*t).fill(0);for(let n=Math.min(e,t)-1;n>=0;n--)i[n*e+n]=1;return this._create(e,t,i,n)}_create(e,t=e,n=null,i=Rt.MatrixType.default){let r=new Ct(e,t,i),o=null;if(null!=n){if(!Array.isArray(n))throw new s.f("Can't initialize SpeedyMatrix with values "+n);n.length>0&&(o=new wn(r,n))}return new Fn(r,o)}get Settings(){return An.instance}evaluate(e){return new Fn(e._shape).assign(e)}fromPoints(e,t=Rt.MatrixType.default){if(!(Array.isArray(e)&&e.length>0))throw new s.f("Can't create matrix from points: "+e);const n=[],i=e.length;for(let t=0;t<i;t++)n.push(e[t].x),n.push(e[t].y);return this._create(2,i,n,t)}toPoints(e){if(2!==e.rows)throw new s.f(`Can't convert ${e._shape.toString()} matrix to points`);return e.read().then(e=>{const t=[],n=e.length;for(let i=0;i<n;i+=2)t.push(new Tt(e[i],e[i+1]));return t})}QR(e,t={}){const n=e.rows,i=e.columns,r=e.dtype,s="full"==t.mode,o=s?this._create(n,n+i,null,r):this._create(n,i+i,null,r),a=s?o.block(0,n-1,0,n-1):o.block(0,n-1,0,i-1),c=s?o.block(0,n-1,n,n+i-1):o.block(0,i-1,i,i+i-1);return o.assign(e.qr(t.mode)).then(()=>[a,c]).turbocharge()}Perspective(e,t){if(2!==e.rows||4!==e.columns||!e._shape.equals(t._shape))throw new s.f(`Can't compute perspective transformation using ${e} and ${t}. 4 correspondences of points are required`);return new ii(e,t)}findHomography(e,t,n={}){if(n.method=n.method||"p-ransac",n.parameters=Object.assign({mask:null,numberOfHypotheses:500,bundleSize:100,reprojectionError:2},n.parameters||{}),!(2===e.rows&&e.columns>=4&&e._shape.equals(t._shape)))throw new s.f(`Can't compute homography matrix using ${e} and ${t}. 4 or more correspondences of points are required`);const i=n.parameters;if("p-ransac"===n.method){const r=new Ct(1,e.columns,e.dtype),o=i.mask||new Fn(r,new wn(r)),a=0|i.numberOfHypotheses,c=0|i.bundleSize,l=+i.reprojectionError;if(!(o instanceof Nn&&o._shape.equals(r)))throw new s.f("Can't compute homography matrix: invalid mask");if(a<=0||c<=0||l<0)throw new s.f(`Can't compute homography matrix: invalid parameters for "${n.method}"`);return new ci(e,t,a,c,l,o)}if("dlt"===n.method)return new ri(e,t);throw new s.f(`Can't compute homography matrix using method "${n.method}"`)}transform(e,t){if(2!==t.rows)throw new s.f(`Can't apply transform: invalid set of points (${t._shape.toString()})`);if(3===e.columns){if(3===e.rows)return new si(e,t);if(2===e.rows)return new oi(e,t)}else if(2===e.columns&&2===e.rows)return new ai(e,t);throw new s.f(`Can't apply transformation: invalid transformation matrix (${e._shape.toString()})`)}},rr=new class extends Function{constructor(){return super("return this._create();"),this.bind(this)}_create(){return new ki}ImageSource(e){return new Pi(e)}ImageSink(e="image"){return new Ti(e)}ImageMultiplexer(e){return new Ri(e)}};class sr{static load(e,t={}){return et.load(e,t)}static camera(e=640,t=360,n={},i={}){return et.loadCameraStream(e,t,n,i)}static pipeline(){return new Je}static get version(){return"0.7.0-wip"}static get fps(){return nt.instance.fps}static get FeatureDetector(){return Ot}static get FeatureTracker(){return Pt}static get FeatureDescriptor(){return Et}static Vector2(e,t){return new Mt(e,t)}static Point2(e,t){return new Tt(e,t)}static Size(e,t){return new zt(e,t)}static get Matrix(){return ir}static get Promise(){return r.a}static get Pipeline(){return rr}static get Filter(){return Zi}static get Transform(){return nr}}Object.assign(sr.constructor.prototype,rt),l.g||i.a.warn("Running on a big-endian machine")}]);